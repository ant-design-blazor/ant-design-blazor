@page "/"
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using System.Reflection

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<Form Model="@model"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="8"
      Name="model"
      Method="post"
      Enhance
      WrapperColSpan="16">
     <FormItem Label="User Name">
        <Input @bind-Value="@model.Username"/>
    </FormItem>
    <FormItem Label="Password">
         <InputPassword @bind-Value="@model.Password" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
         <Checkbox @bind-Value="model.RememberMe">Remember me</Checkbox>
    </FormItem>
     <FormItem WrapperColOffset="8" WrapperColSpan="16">
         <EnumRadioGroup @bind-Value="model.Period">Period</EnumRadioGroup>
     </FormItem>
     <FormItem WrapperColOffset="8" WrapperColSpan="16">
         <EnumCheckboxGroup @bind-Value="model.Period2">Periods</EnumCheckboxGroup>
     </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>

@*  <Form Model="@model"
       OnFinish="OnFinish"
       OnFinishFailed="OnFinishFailed"
       Name="@nameof(model)"
       Method="post"
       Enhance
       LabelColSpan="8"
       WrapperColSpan="16">

     @foreach (var field in fields)
    {
        <FormItem Name="@field.Key">
            @InputRender(field.Value)
        </FormItem>
    }

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>
 *@
@code
 {
    private Dictionary<string, PropertyInfo> fields = new();


    [SupplyParameterFromForm(FormName = "model")]
    public Model model { get; set; } = new();

    public enum Period
    {
        Moring,
        Evening
    }


    protected override void OnInitialized()
    {
        fields = typeof(Model).GetProperties().ToDictionary(x => x.Name, x => x);
        base.OnInitialized();
    }

    private RenderFragment InputRender(PropertyInfo property)
    {
        return property switch
        {
            _ when property.PropertyType.GetCustomAttribute<DataTypeAttribute>()?.DataType == DataType.Password =>@<InputPassword></InputPassword>,
            _ when property.PropertyType == typeof(bool) =>@<Checkbox></Checkbox>,
            _ when property.PropertyType == typeof(DateOnly?) =>@<DatePicker TValue="DateOnly?"></DatePicker>,
            _ =>@<Input TValue="string"></Input>,
        };
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    public class Model
    {
        [Required, DisplayName("User Name")]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }

        public bool RememberMe { get; set; } = true;

        public Period Period { get; set; }

        public Period[] Period2 { get; set; }
    }


}