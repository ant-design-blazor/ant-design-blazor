@using Color = System.Drawing.Color
@using System.Drawing
@using System.Linq.Expressions
@using System.Reflection
@using AntDesign.Filters

<Table DataSource="data" TItem="KnownColor">
    <PropertyColumn Property="c=>c.ToString()" Title="Name" Sortable Filterable/>

    <PropertyColumn Property="c=>Color.FromKnownColor(c).R" Title="Red" Sortable Filterable/>
    <PropertyColumn Property="c=>Color.FromKnownColor(c).G" Title="Green" Sortable Filterable/>
    <PropertyColumn Property="c=>Color.FromKnownColor(c).B" Title="Blue" Sortable Filterable/>
    
    <PropertyColumn Property="c=>Color.FromKnownColor(c)" Title="Color"
                    SorterCompare="(x, y) => x.GetHue().CompareTo(y.GetHue())"
                    FieldFilterType="colorFilterOptions" Filterable>
        <CellRender Context="cell">
            <span style="background-color: @(ColorTranslator.ToHtml(cell.FieldValue))">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
        </CellRender>
    </PropertyColumn>
</Table>

@code {

    readonly KnownColor[] data = Enum.GetValues<KnownColor>();
    readonly ColorFieldFilterType colorFilterOptions = new();

    class ColorFieldFilterType : BaseFieldFilterType
    {
        private static readonly MethodInfo colorGetBrightness = typeof(Color).GetMethod(nameof(Color.GetBrightness), Array.Empty<Type>());

        public override RenderFragment<TableFilterInputRenderOptions> FilterInput { get; }

        public override TableFilterCompareOperator DefaultCompareOperator => TableFilterCompareOperator.GreaterThan;

        public ColorFieldFilterType() {
            FilterInput = filter =>
                @<Slider TValue="double" Value="(float?)filter.Value ?? 0" ValueChanged="value => filter.Value = (float?)value" Style="width: 70px"
                         Min="0" Max="1" Step=".01"/>;
        }

        public override IEnumerable<TableFilterCompareOperator> GetSupportedCompareOperators()
        {
            foreach (TableFilterCompareOperator baseCompareOperator in base.GetSupportedCompareOperators())
                yield return baseCompareOperator;

            yield return TableFilterCompareOperator.GreaterThan;
            yield return TableFilterCompareOperator.LessThan;
            yield return TableFilterCompareOperator.GreaterThanOrEquals;
            yield return TableFilterCompareOperator.LessThanOrEquals;
        }
               
        public override Expression GetFilterExpression(TableFilterCompareOperator compareOperator, Expression leftExpr, Expression rightExpr) {
            // Compare the brightness of the color to the selected value
            leftExpr = Expression.Call(leftExpr, colorGetBrightness);

            return base.GetFilterExpression(compareOperator, leftExpr, rightExpr);
        }
    }
}