@inject ModalService _modalService
@inject IMessageService _message
<Space>
    <SpaceItem>
        <Button OnClick="ShowConfirm">Confirm</Button>
    </SpaceItem>
    <SpaceItem>
        <Button OnClick="ShowDeleteConfirm" Type="ButtonType.Dashed">Delete</Button>
    </SpaceItem>

    <SpaceItem>
        <Button OnClick="ShowPropsConfirm" Type="ButtonType.Dashed">With extra props</Button>
    </SpaceItem>
</Space>
<br />
<br />
<Space>
    <SpaceItem>
        <Button OnClick="BlockingConfirm">Blocking Confirm</Button>
    </SpaceItem>
</Space>
@code{
    Func<ModalClosingEventArgs, Task> onOk = (e) =>
    {
        Console.WriteLine("Ok");
        return Task.CompletedTask;
    };
    Func<ModalClosingEventArgs, Task> onCancel = (e) =>
    {
        Console.WriteLine("Cancel");
        return Task.CompletedTask;
    };
    RenderFragment icon = @<Icon Type="@IconType.Outline.ExclamationCircle" />;

    private void ShowConfirm()
    {
        _modalService.Confirm(new ConfirmOptions()
        {
            Title = "Do you Want to delete these items?",
            Icon = icon,
            Content = "Some descriptions",
            OnOk = onOk,
            OnCancel = onCancel
        });
    }

    private void ShowDeleteConfirm()
    {
        _modalService.Confirm(new ConfirmOptions()
        {
            Title = "Are you sure delete this task?",
            Icon = icon,
            Content = "Some descriptions",
            OnOk = onOk,
            OnCancel = onCancel,
            OkButtonProps = new AntDesign.ButtonProps
            {
                Danger = true
            }
        });
    }

    private void ShowPropsConfirm()
    {
        _modalService.Confirm(new ConfirmOptions()
        {
            Title = "Are you sure delete this task?",
            Icon = icon,
            Content = "Some descriptions",
            OnOk = onOk,
            OnCancel = onCancel,
            OkButtonProps = new AntDesign.ButtonProps()
            {
                Disabled = true,
                Danger = true,
            }
        });
    }


    private async Task BlockingConfirm()
    {
        var content = "Here is a blocking confirm, you can get OK or cancel button is click";
        var title = "Info";

        var isTrue = await _modalService.ConfirmAsync(new ConfirmOptions()
        {
            Content = content,
            Title = title
        });

        await _message.Info($"The confirm return {isTrue}");
    }
}
