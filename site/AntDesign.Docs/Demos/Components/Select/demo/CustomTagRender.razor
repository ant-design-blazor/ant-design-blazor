@using AntDesign.Select
<Select Mode="multiple"
        DataSource="@_myColors"
        Disabled="@_disabled" Style="max-width:200px; margin-right:20px;"
        @bind-Values="@_selectedColorValues"
        ValueName="@nameof(MyColor.Value)"
		LabelName="@nameof(MyColor.Name)">
    <LabelTemplate>
        <LabelTemplateItem Context="item"
                           TItem="MyColor"
                           TItemValue="string"
                           Class=@CustomClass(context.Name)
                           Style="margin-right: 4px;"
                           RemoveIconStyle="margin-top: 1px; display: inline-block;">
            <LabelTemplateItemContent>
                <span style=@(_disabled ? "color: rgba(0,0,0,.5)" : $"color: {item.Name};")>@item.Name</span>
            </LabelTemplateItemContent>
        </LabelTemplateItem>
    </LabelTemplate>
</Select>

<Switch @bind-Value=@_bindValue CheckedChildren="Enabled" UnCheckedChildren="Disabled" />

@code
{
    class MyColor
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    List<MyColor> _myColors;
    IEnumerable<string> _selectedColorValues;
    bool _toggleSearch, _disabled = true;
    bool _bindValue { get => !_disabled; set { _disabled = !value; } }
    private string CustomClass(string color) {
        var value = "ant-tag";
        if (!_disabled) value = value + $" ant-tag-{color}";
        return value;
    }

    protected override void OnInitialized()
    {
        _myColors = new List<MyColor>
        {
            new MyColor {Value = "gold", Name = "gold"}, 
            new MyColor {Value = "lime", Name = "lime"}, 
            new MyColor {Value = "green", Name = "green"}, 
            new MyColor {Value = "cyan", Name = "cyan"}
        };

        _selectedColorValues = new List<string> { "gold", "cyan" };
    }
}