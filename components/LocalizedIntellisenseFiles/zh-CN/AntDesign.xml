<?xml version="1.0"?>
<doc>
  <assembly>
    <name>AntDesign</name>
  </assembly>
  <members>
    <member name="E:AntDesign.NotificationConfig.OnClick">
      <summary v="42pkAh" i="0">
点击通知时触发的回调函数
</summary>
    </member>
    <member name="E:AntDesign.NotificationConfig.OnClose">
      <summary v="11YvOG" i="0">
当通知关闭时触发
</summary>
    </member>
    <member name="F:AntDesign.Alert._isClosed">
      <summary v="yW8vK" i="0">
组件是否已关闭的指示器。
</summary>
    </member>
    <member name="F:AntDesign.Alert._isClosing">
      <summary v="1CUgJ3" i="0">
在关闭组件之前，我们设置此指示器以显示关闭动画。
</summary>
    </member>
    <member name="F:AntDesign.AutoComplete`1._optionDataItems">
      <summary v="3hlfJJ" i="0">
列表数据集合
列表数据收集
</summary>
    </member>
    <member name="F:AntDesign.AutoComplete`1._options">
      <summary v="3QtkWg" i="0">
列表绑定数据源集合
列表绑定数据源集合
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Closed">
      <summary v="2lNNDv" i="0">
一旦关闭时经历过一次OnAfterRender/OnAfterRenderAsync，就变成此状态
一旦OnAfterRender/OnAfterRenderAsync被体验一次，当关闭时，它变成这种状态
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Closing">
      <summary v="1Mk8P4" i="0">
用于在参数属性中设置，表明组件正在关闭中
用于在参数属性中设置，指示组件正在关闭
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Destroyed">
      <summary v="4HjwoW" i="0">
一旦销毁时经历过一次OnAfterRender，就变成此状态
一旦OnAfterRender/OnAfterRenderAsync在销毁期间体验一次，它就变成这种状态
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Destroying">
      <summary v="10HgBd" i="0">
用于在参数属性中设置、表明组件正则销毁中、
用于在参数属性中设置，指示组件处于常规销毁状态
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Inited">
      <summary v="1e7sQF" i="0">
组件初始化完毕
组件初始化已完成
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Initing">
      <summary v="2Dnf11" i="0">
组件初始化中
正在进行组件初始化
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Opened">
      <summary v="1V4YNr" i="0">
一旦打开时经历过一次OnAfterRender/OnAfterRenderAsync，就变成此状态
一旦组件体验OnAfterRender/OnAfterRenderAsync一旦打开时，它就变成这种状态
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Opening">
      <summary v="1WRA1H" i="0">
用于在参数属性中设置，表明组件正在第一次渲染中
用于在参数属性中设置，指示组件是第一次呈现
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.AbortRetryIgnore">
      <summary v="3dHrPd" i="0">
三个按钮: 中止、重试和忽略
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.OK">
      <summary v="3t6Etb" i="0">
只有一个好按钮
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.OKCancel">
      <summary v="4UZPqN" i="0">
两个按钮: 好和取消
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.RetryCancel">
      <summary v="2JNCgQ" i="0">
两个按钮: 重试和取消
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.YesNo">
      <summary v="4WMXxD" i="0">
两个按钮: 是和否
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.YesNoCancel">
      <summary v="3CuxQc" i="0">
三个按钮: 是，否和取消
</summary>
    </member>
    <member name="F:AntDesign.Core.HashCodes.ParameterDescriptor`1.Descriptors">
      <summary v="3jJwQt" i="0">
获取组件的所有参数的说明
</summary>
    </member>
    <member name="F:AntDesign.Dialog._dialogMouseDown">
      <summary v="2mDnNT" i="0">
检查是对话框单击
</summary>
    </member>
    <member name="F:AntDesign.Dialog._element">
      <summary v="2lsUtt" i="0">
对话框根容器
</summary>
    </member>
    <member name="F:AntDesign.Dialog._sentinelStart">
      <summary v="enVVW" i="0">
TAB键键盘控制
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultCloseIcon">
      <summary v="W8kIQ" i="0">
默认对话框关闭图标
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultFooter">
      <summary v="T4rRh" i="0">
默认模式页脚
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultHeader">
      <summary v="2Y2SUn" i="0">
默认模式标题
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultMaximizeIcon">
      <summary v="W8kIQ" i="0">
默认对话框关闭图标
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAndClear">
      <summary v="1w7dgS" i="0">
焦点时，内容将被清除
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAndSelectAll">
      <summary v="1zmt3n" i="0">
当焦点，内容将被选中
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAtFirst">
      <summary v="3yAl94" i="0">
当焦点，光标将移动到第一个字符
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAtLast">
      <summary v="2IX3yV" i="0">
当焦点，光标将移动到最后一个字符
这是默认行为。
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.None">
      <summary v="4NnUqv" i="0">
设置为 &ldquo;无” 时，窗体将不按任何字段显示任何指标，而不管其所需状态如何
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.Optional">
      <summary v="3P3eBz" i="0">
当设置为可选时，表单将在可选字段旁边显示一个指示符
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.Required">
      <summary v="1UZY2b" i="0">
当设置为必需时，表单将在必填字段旁边显示一个指示符
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Complex">
      <summary v="pWX6P" i="0">
同时使用默认模式和规则模式
同时使用默认和规则模式
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Default">
      <summary v="4686Sm" i="0">
Blazor的验证模式。在模型字段上添加validateAttributes
Blazor的验证模式，在模型字段上附加验证特性
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Rules">
      <summary v="4erxc3" i="0">
在FormItem上设置规则
在FormItem上设置规则参数
</summary>
    </member>
    <member name="F:AntDesign.Internal.Overlay._isReloading">
      <summary v="3wcE9I" i="0">
指示正在刷新页面
</summary>
    </member>
    <member name="F:AntDesign.Rate._currentValue">
      <summary v="3qqeGZ" i="0">
当前被选中的星星数量
当前选择的星星数量
</summary>
    </member>
    <member name="F:AntDesign.Rate._hasHalf">
      <summary v="2fqpId" i="0">
是否允许半选
是否允许半选
</summary>
    </member>
    <member name="F:AntDesign.Rate._hoverValue">
      <summary v="dbFU7" i="0">
鼠标悬停时从最左到光标位置的星星数。
鼠标悬停时从最左边到光标位置的星数。
</summary>
    </member>
    <member name="F:AntDesign.Rate._isFocused">
      <summary v="3ALEeG" i="0">
是否获取的输入焦点
Weter来获得输入焦点。
</summary>
    </member>
    <member name="F:AntDesign.Rate._valueWasSet">
      <summary v="4T5P25" i="0">
指示值是否已更改。需要避免重置为DefaultValue (如果存在)。
</summary>
    </member>
    <member name="F:AntDesign.RerenderStrategy.Always">
      <summary v="BjYee" i="0">
始终重新渲染
</summary>
    </member>
    <member name="F:AntDesign.RerenderStrategy.ParametersHashCodeChanged">
      <summary v="W9Mkm" i="0">
仅当更改任何组件的参数值时才重新渲染
</summary>
    </member>
    <member name="F:AntDesign.Select.Internal.SelectContent`2._isReloading">
      <summary v="3wcE9I" i="0">
指示正在刷新页面
</summary>
    </member>
    <member name="F:AntDesign.Select`2._dataSourceItemShallowCopyMehtod">
      <summary v="2dLgj3" i="0">
MethodInfo将包含附加的MemberwiseClone protected
方法。由于其保护级别，必须访问
使用反射。它将在生成期间使用
数据源浅拷贝 (这是一个新的数据源列表
具有每个项目的浅副本的项目)。
</summary>
    </member>
    <member name="F:AntDesign.SelectBase`2._maxTagCount">
      <summary v="v23JS" i="0">
标签的长度 (字符数)。
仅适用于Mode = "multiple" 或Mode = "tags"
</summary>
      <value>
                The maximum length of the tag text.
            </value>
    </member>
    <member name="F:AntDesign.SelectOption`2._itemSet">
      <summary v="3XJgl6" i="0">
SelectOption的项目
仅当直接创建SelectOption时才应使用参数。
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._isTipFormatterDefault">
      <summary v="30Azba" i="0">
滑块将其值传递给tipFormatter，并在工具提示中显示其值
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._range">
      <summary v="34jy3B" i="0">
双拇指模式
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._reverse">
      <summary v="4bs5mi" i="0">
反转组件
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._step">
      <summary v="7DciJ" i="0">
滑块可以逐步通过值的粒度。必须大于0，并除以 (<see cref="P:AntDesign.Slider`1.Max" />-<see cref="P:AntDesign.Slider`1.Min" />)。当不<see cref="P:AntDesign.Slider`1.Marks" />null时， <see cref="P:AntDesign.Slider`1.Step" />可以为null。
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._tooltipVisible">
      <summary v="FnJHc" i="0">
如果为true，则工具提示将始终显示，或者即使拖动或悬停也不会显示。
</summary>
    </member>
    <member name="F:AntDesign.Table`1._isReloading">
      <summary v="3wcE9I" i="0">
指示正在刷新页面
</summary>
    </member>
    <member name="F:AntDesign.TextArea._isReloading">
      <summary v="3wcE9I" i="0">
指示正在刷新页面
</summary>
    </member>
    <member name="F:AntDesign.Tree`1._allNodes">
      <summary v="XXSU2" i="0">
节点的所有
</summary>
    </member>
    <member name="F:AntDesign.Tree`1._checkedNodes">
      <summary v="1Z7yRm" i="0">
所有选中的节点
</summary>
    </member>
    <member name="F:AntDesign.TreeNodeTitle`1._dragTargetClientX">
      <summary v="0000" i="0" />
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.InScroll">
      <summary v="2mhd7P" i="0">
在滚动范围内
如果需要重新定位覆盖，则文档边界是用于计算的边界。
因此，即使叠加层在视口之外，只要叠加层仍然可以显示
不会 &ldquo;溢出” 文档边界。
</summary>
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.InView">
      <summary v="2HCzIU" i="0">
在可视范围内(默认模式)
默认情况下，视口边界是用于计算的边界，如果覆盖
是完全可见的。
尝试调整叠加层，使其始终在视口中完全可见。
因此，如果叠加层在视口之外 (&ldquo;溢出”)，则重新定位计算将
尝试。
</summary>
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.None">
      <summary v="2a2qbd" i="0">
不自动调整
不自动调整
</summary>
    </member>
    <member name="M:AntDesign.Alert.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="seeMo" i="0">
处理close回调。
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Alert.OnInitialized">
      <summary v="ajhia" i="0">
启动代码。
</summary>
    </member>
    <member name="M:AntDesign.Alert.SetClassMap">
      <summary v="45aP6Q" i="0">
设置默认类。
</summary>
    </member>
    <member name="M:AntDesign.AntComponentBase.BlurAsync(Microsoft.AspNetCore.Components.ElementReference)">
      <summary v="1Df4hk" i="0">
标准模糊。使用JS interop。
</summary>
      <param name="target" v="4QgwiP" i="0">将获得焦点的元素。</param>
    </member>
    <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,AntDesign.FocusBehavior,System.Boolean)">
      <summary v="zIr6D" i="0">
专注于行为。行为将只适用于元素
HTMLInputElement或htmltextare。否则只会专注。
</summary>
      <param name="target" v="4QgwiP" i="0">将获得焦点的元素。</param>
      <param name="behavior" v="4euOKD" i="0">聚焦元素的行为</param>
      <param name="preventScroll" v="2zL7A" i="0">是否滚动到焦点元素</param>
    </member>
    <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
      <summary v="3oHKS9" i="0">
标准焦点。从Net5在ElementReference上使用Blazor扩展方法。
之前，使用JS实现与Net5 JS完全相同。
</summary>
      <param name="target" v="4QgwiP" i="0">将获得焦点的元素。</param>
      <param name="preventScroll" v="2zL7A" i="0">是否滚动到焦点元素</param>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.#ctor">
      <summary v="7iYge" i="0">
构造<see cref="T:Microsoft.AspNetCore.Components.Forms.InputBase`1" />的实例。
</summary>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.FormatValueAsString(`0)">
      <summary v="2Mhrl9" i="0">
将值格式化为字符串。派生类可以重写此以确定用于<see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString" />的格式。
</summary>
      <param name="value" v="26kDud" i="0">要设置格式的值。</param>
      <returns v="1AaSv2" i="0">值的字符串表示形式。</returns>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnCurrentValueChange(`0)">
      <summary v="1OUvUw" i="0">
调用此方法时，Value和CurrentValue已被修改，并且ValueChanged已被触发，因此外部绑定值已更改。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnValueChange(`0)">
      <summary v="oF6Fx" i="0">
调用此方法时，仅修改了Value，但未触发ValueChanged，因此未更改外部绑定Value。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnValueChangeAsync(`0)">
      <summary v="oF6Fx" i="0">
调用此方法时，仅修改了Value，但未触发ValueChanged，因此未更改外部绑定Value。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
      <summary v="4eJg98" i="0">
分析字符串以创建的实例。派生类可以重写此以更改
<see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString" />解释传入的值。
<typeparamref name="TValue" /></summary>
      <param name="value" v="3C8L8R" i="0">要分析的字符串值。</param>
      <param name="result" v="2OSvxq" i="0">的一个实例。<typeparamref name="TValue" /></param>
      <param name="validationErrorMessage" v="1lxpYC" i="0">如果无法分析该值，则提供验证错误消息。</param>
      <returns v="22lm7E" i="0">如果可以分析该值，则为True; 否则为false。</returns>
    </member>
    <member name="M:AntDesign.AutoComplete`1.ClosePanel">
      <summary v="1AK2s7" i="0">
关闭面板
关闭面板
</summary>
    </member>
    <member name="M:AntDesign.AutoComplete`1.OpenPanel">
      <summary v="PETmG" i="0">
打开面板
打开面板
</summary>
    </member>
    <member name="M:AntDesign.AutoCompleteOption.CalcSelected">
      <summary v="15MAgK" i="0">
计算当前计算选择状态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Badge.OnInitialized">
      <summary v="1cE7i0" i="0">
启动代码
</summary>
    </member>
    <member name="M:AntDesign.Badge.SetClassMap">
      <summary v="K1vic" i="0">
设置默认的CSS类。
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.OnInitialized">
      <summary v="1cE7i0" i="0">
启动代码
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.OnParametersSet">
      <summary v="3bianQ" i="0">
每次设置参数时运行。
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.SetClassMap">
      <summary v="K1vic" i="0">
设置默认的CSS类。
</summary>
    </member>
    <member name="M:AntDesign.Cascader.CascaderOnBlur">
      <summary v="4QW9aB" i="0">
输入框/浮层失去焦点(隐藏浮层)
</summary>
    </member>
    <member name="M:AntDesign.Cascader.ClearSelected">
      <summary v="EYuLQ" i="0">
清除已选择项
</summary>
    </member>
    <member name="M:AntDesign.Cascader.GetNodeByValue(System.Collections.Generic.IEnumerable{AntDesign.CascaderNode},System.String)">
      <summary v="2me3yv" i="0">
根据指定的值获取节点
</summary>
      <param name="list" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.InitCascaderNodeState(System.Collections.Generic.List{AntDesign.CascaderNode},AntDesign.CascaderNode,System.Int32,System.Boolean)">
      <summary v="JTgDE" i="0">
初始化节点 (级别，ParentNode)
</summary>
      <param name="list" v="0000" i="0" />
      <param name="parentNode" v="0000" i="0" />
      <param name="level" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.InputOnToggle">
      <summary v="JoEYk" i="0">
输入框单击(显示/隐藏浮层)
</summary>
    </member>
    <member name="M:AntDesign.Cascader.NodeOnClick(AntDesign.CascaderNode)">
      <summary v="4Y7NQo" i="0">
下拉节点单击
</summary>
      <param name="node" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.NodeOnMouseOver(AntDesign.CascaderNode)">
      <summary v="3PeI3Q" i="0">
下拉节点移入
</summary>
      <param name="node" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.NodesOnMouseOut">
      <summary v="4P5oXL" i="0">
浮层移出
</summary>
    </member>
    <member name="M:AntDesign.Cascader.NodesOnMouseOver">
      <summary v="2UJTjQ" i="0">
浮层移入
</summary>
    </member>
    <member name="M:AntDesign.Cascader.ProcessParentAndDefault">
      <summary v="fSFSs" i="0">
处理选项更新后的父节点和默认值
</summary>
    </member>
    <member name="M:AntDesign.Cascader.RefreshDisplayText">
      <summary v="4TItSt" i="0">
重建显示文本
</summary>
    </member>
    <member name="M:AntDesign.Cascader.RefreshNodeValue(System.String)">
      <summary v="23wDCv" i="0">
刷新所选值
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetDefaultValue(System.String)">
      <summary v="4bhYmD" i="0">
设置默认值
</summary>
      <param name="defaultValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetSelectedNode(AntDesign.CascaderNode,AntDesign.SelectedTypeEnum)">
      <summary v="1yanOb" i="0">
所选节点
</summary>
      <param name="cascaderNode" v="0000" i="0" />
      <param name="selectedType" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetSelectedNodeWithParent(AntDesign.CascaderNode,System.Collections.Generic.List{AntDesign.CascaderNode}@)">
      <summary v="4cw9N0" i="0">
设置要选择的所有父节点
</summary>
      <param name="node" v="0000" i="0" />
      <param name="list" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetValue(System.String)">
      <summary v="4LHGMk" i="0">
设置绑定值
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.CheckboxGroup`1.OnCheckboxChange(AntDesign.Checkbox,System.Boolean)">
      <summary v="12407g" i="0">
当 [checkbox change] 时调用。
</summary>
      <param name="checkbox" v="RRWM4" i="0">复选框。</param>
      <param name="invokeOnChange" v="2gshfC" i="0">是否为变更事件而离开的标志。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.Dispose(System.Boolean)">
      <summary v="JOrKd" i="0">
注销事件
</summary>
      <param name="disposing" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmClose(AntDesign.ConfirmRef)">
      <summary v="29ltvo" i="0">
销毁确认对话框
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmCloseAll">
      <summary v="3stjhf" i="0">
销毁所有确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmOpen(AntDesign.ConfirmRef)">
      <summary v="4Ttvme" i="0">
创建并打开确认对话框
</summary>
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmRemove(AntDesign.ConfirmRef)">
      <summary v="2hkOM7" i="0">
确认对话框后从DOM中删除，将其从 _confirmrefs中删除
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmUpdate(AntDesign.ConfirmRef)">
      <summary v="2Hw32B" i="0">
更新确认对话框
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnInitialized">
      <summary v="2AGfwn" i="0">
注册事件
</summary>
    </member>
    <member name="M:AntDesign.ComponentStatusExt.Is(AntDesign.ComponentStatus,AntDesign.ComponentStatus)">
      <summary v="1aMoDL" i="0">
返回是的<paramref name="componentStatus" /><paramref name="status" /></summary>
      <param name="componentStatus" v="0000" i="0" />
      <param name="status" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsClose(AntDesign.ComponentStatus)">
      <summary v="4f8eFK" i="0">
是ComponentStatus.Closing或ComponentStatus.Closed
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsNotOpen(AntDesign.ComponentStatus)">
      <summary v="37QzBT" i="0">
不是ComponentStatus.正在打开，也不是ComponentStatus已打开
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsOpen(AntDesign.ComponentStatus)">
      <summary v="3YviB6" i="0">
是ComponentStatus.正在打开或ComponentStatus.已打开
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Confirm.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Confirm.OnInitializedAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmOptions.BuildButtonsDefaultOptions">
      <summary v="N7VQ8" i="0">
设置按钮的默认选项
</summary>
    </member>
    <member name="M:AntDesign.ConfirmRef.CloseAsync">
      <summary v="w8anv" i="0">
关闭确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.OpenAsync">
      <summary v="4ME4b" i="0">
打开确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync">
      <summary v="3cDh69" i="0">
更新确认对话框配置哪个可见 = true
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync(AntDesign.ConfirmOptions)">
      <summary v="1aknzh" i="0">
使用新的confirmotions更新确认对话框配置
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef`1.CancelAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ConfirmRef`1.OkAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon,AntDesign.ConfirmButtonOptions,System.Nullable{AntDesign.ConfirmAutoFocusButton})">
      <summary v="3S6wbj" i="0">
显示一个确认对话框，如Windows的MessageBox
</summary>
      <param name="content" v="4eHUMp" i="0">对话的内容</param>
      <param name="title" v="2qim70" i="0">对话框的标题</param>
      <param name="confirmButtons" v="4OkTic" i="0">对话框的按钮</param>
      <param name="confirmIcon" v="4E5rut" i="0">对话框的图标</param>
      <param name="options" v="30j200" i="0">对话框的配置选项</param>
      <param name="autoFocusButton" v="2g6u5L" i="0">自动对焦按钮</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon)">
      <summary v="3S6wbj" i="0">
显示一个确认对话框，如Windows的MessageBox
</summary>
      <param name="content" v="4eHUMp" i="0">对话的内容</param>
      <param name="title" v="2qim70" i="0">对话框的标题</param>
      <param name="confirmButtons" v="4OkTic" i="0">对话框的按钮</param>
      <param name="confirmIcon" v="4E5rut" i="0">对话框的图标</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Extensions.ArrayExtensions.Scroll``1(``0[],System.Int32)">
      <summary v="KDoZN" i="0">
向左滚动元素
</summary>
      <typeparam name="T" v="0000" i="0" />
      <param name="sourceArray" v="0000" i="0" />
      <param name="offset" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.DataConversionExtensions.Convert``2(``0)">
      <summary v="kkCNA" i="0">
将泛型类型tof转换为指定的TTo类型
</summary>
      <typeparam name="TFrom" v="0000" i="0" />
      <typeparam name="TTo" v="0000" i="0" />
      <param name="fromValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.HttpClientExtensions.GetEncoding(System.Net.Http.HttpContent)">
      <summary v="1hf85j" i="0">
从<see cref="T:System.Net.Http.HttpContent" />获取编码信息</summary>
      <param name="httpContent" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.HttpClientExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
      <summary v="Vs5WG" i="0">
读取为二进制数组并转换为指定的编码
</summary>
      <param name="httpContent" v="0000" i="0" />
      <param name="dstEncoding" v="3gsAdT" i="0">目标编码</param>
      <exception cref="T:System.ArgumentException" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCode`1.GetHashCode(`0)">
      <summary v="lh0fV" i="0">
计算参数的哈希值
</summary>
      <param name="parameter" v="3HK7tg" i="0">参数</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCode`1.HashCodeEquals(`0,`0)">
      <summary v="277aqd" i="0">
计算两个参数值的哈希值是否相等
</summary>
      <param name="parameter1" v="30MREE" i="0">参数1</param>
      <param name="parameter2" v="YZiuF" i="0">参数2</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeExtensions.GetParametersHashCode``1(``0)">
      <summary v="4PHukz" i="0">
计算所有参数的HashCode
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <param name="component" v="4TC8iJ" i="0">组件</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.Create(System.Type)">
      <summary v="4SPSAV" i="0">
为参数创建适当的哈希提供程序
</summary>
      <param name="parameterType" v="4I5cph" i="0">参数类型</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.GetHashCode(System.Object)">
      <summary v="4Vme4X" i="0">
获取参数值的哈希值
</summary>
      <param name="parameter" v="4I5cph" i="0">参数类型</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
      <summary v="24e72M" i="0">
组件的参数描述符
</summary>
      <param name="property" v="33iWJQ" i="0">属性类型</param>
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.CreateGetFunc(System.Reflection.PropertyInfo)">
      <summary v="2h7DUq" i="0">
创建属性的get委托
</summary>
      <param name="property" v="2UyZk2" i="0">财产</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.GetValueHashCode(`0)">
      <summary v="13vswS" i="0">
返回参数值的哈希
</summary>
      <param name="component" v="1I629k" i="0">组件</param>
      <exception cref="T:System.NotSupportedException" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.IsEventCallBack(System.Reflection.PropertyInfo)">
      <summary v="4WeCE2" i="0">
检查是否为EventCallback类型
</summary>
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.Formatter.ToPercentWithoutBlank(System.Double)">
      <summary v="8T4Rw" i="0">
在WASM模式下，将双精度数字格式化为百分比时，数字和 % 之间将有一个空白，&ldquo;35.00%”
使用此方法来避免空白
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.Formatter`1.ParseSpanTimeFormatString(System.String)">
      <summary v="2DFOjP" i="0">
解析格式字符串中的其他字符。
</summary>
      <remarks>refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings#other-characters</remarks>
      <param name="format" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet(System.Object,System.String)">
      <summary v="3qsIng" i="0">
按路径获取成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``1(System.Object,System.String)">
      <summary v="3qsIng" i="0">
按路径获取成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``2(``0,System.String)">
      <summary v="3qsIng" i="0">
按路径获取成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault(System.Object,System.String)">
      <summary v="4a1HWG" i="0">
通过路径获取可空成员值，它将捕获所有异常并返回null
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``1(System.Object,System.String)">
      <summary v="4a1HWG" i="0">
通过路径获取可空成员值，它将捕获所有异常并返回null
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``2(``0,System.String)">
      <summary v="4a1HWG" i="0">
通过路径获取可空成员值，它将捕获所有异常并返回null
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet(System.Object,System.String,System.Object)">
      <summary v="3EPTh0" i="0">
按路径设置成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``1(System.Object,System.String,``0)">
      <summary v="3EPTh0" i="0">
按路径设置成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``2(``0,System.String,``1)">
      <summary v="3EPTh0" i="0">
按路径设置成员值
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <typeparam name="TITem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="IEM4X" i="0">
获取获取值委托，委托的类型取决于和: <br />
'Func&lt;TItem，TValue&gt;': = typeof(TItem)， = typeof(TValue)， = false。
'Func&lt;object，TValue&gt;': = typeof(object)， = typeof(TValue)， = false。
'Func&lt;object，object&gt;': = typeof(object)， = typeof(object)， = false。
'Func&lt;TItem，TValue？&gt; ': = typeof(TItem)， = typeof(TValue)， = true。
'Func&lt;object，TValue？&gt; ': = typeof(object)， = typeof(TValue)， = true。
'Func&lt;object，object？&gt; ': = typeof(object)， = typeof(object)， = true。<paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="243k0x" i="0">访问对象的类型</param>
      <param name="path" v="31OaeH" i="0">字符串路径</param>
      <param name="paramType" v="1lMs0o" i="0">如果要将项目作为对象传入，请将其设置为true</param>
      <param name="valueType" v="RS5c9" i="0">如果要将值作为对象获取，请将其设置为true</param>
      <param name="checkNull" v="3hhVUM" i="0">如果为true，委托将检查路径不为null和返回值或默认值，如果返回值的类型为ValueType，委托将返回Nullable&lt;T&gt;，
如果为false，则委托不会检查路径not null，因此，如果路径包含null值或未找到键，则会引发异常</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type)">
      <summary v="2EGHXe" i="0">
获取获取值委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``1(System.String,System.Type)">
      <summary v="2EGHXe" i="0">
获取获取值委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``2(System.String)">
      <summary v="2EGHXe" i="0">
获取获取值委托
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault(System.String,System.Type)">
      <summary v="3V8rsK" i="0">
获取可以为nullable的值委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``1(System.String,System.Type)">
      <summary v="3V8rsK" i="0">
获取可以为nullable的值委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``2(System.String)">
      <summary v="3V8rsK" i="0">
获取可以为nullable的值委托
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetExpression(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="4XJufI" i="0">
获取获取值表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="paramType" v="0000" i="0" />
      <param name="valueType" v="0000" i="0" />
      <param name="checkNull" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="TEvn8" i="0">
获取获取值lambda表达式，lambda表达式的类型取决于和: <br />
'Expression&lt;Func&lt;TItem，TValue&gt;&gt;': = typeof(TItem)， = typeof(TValue)， = false。
'Expression&lt;Func&lt;object，TValue&gt;&gt;': = typeof(object)， = typeof(TValue)， = false。
'Expression&lt;Func&lt;object，object&gt;&gt;': = typeof(object)， = typeof(object)， = false。
'Expression&lt;Func&lt;TItem，TValue ？&gt;&gt; ': = typeof(TItem)， = typeof(TValue)， = true。
'Expression&lt;Func&lt;object，TValue ？&gt;&gt; ': = typeof(object)， = typeof(TValue)， = true。
'Expression&lt;Func&lt;object，object ？&gt;&gt; ': = typeof(object)， = typeof(object)， = true。<paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="243k0x" i="0">访问对象的类型</param>
      <param name="path" v="31OaeH" i="0">字符串路径</param>
      <param name="paramType" v="1lMs0o" i="0">如果要将项目作为对象传入，请将其设置为true</param>
      <param name="valueType" v="RS5c9" i="0">如果要将值作为对象获取，请将其设置为true</param>
      <param name="checkNull" v="3hhVUM" i="0">如果为true，委托将检查路径不为null和返回值或默认值，如果返回值的类型为ValueType，委托将返回Nullable&lt;T&gt;，
如果为false，则委托不会检查路径not null，因此，如果路径包含null值或未找到键，则会引发异常</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type)">
      <summary v="l9gOr" i="0">
获取值lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``1(System.String,System.Type)">
      <summary v="l9gOr" i="0">
获取值lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``2(System.String)">
      <summary v="l9gOr" i="0">
获取值lambda表达式
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault(System.String,System.Type)">
      <summary v="5YTrN" i="0">
获取可以为nullvalue的lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``1(System.String,System.Type)">
      <summary v="5YTrN" i="0">
获取可以为nullvalue的lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``2(System.String)">
      <summary v="5YTrN" i="0">
获取可以为nullvalue的lambda表达式
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type,System.Type,System.Type)">
      <summary v="247ukh" i="0">
获取一个set value委托，委托的类型取决于和: <br />
'Action&lt;TItem，TValue&gt;': = typeof(TItem)， = typeof(TValue)。 <br />
'Action&lt;object，TValue&gt;': = typeof(object)， = typeof(TValue)。 <br />
'Action&lt;object，object&gt;': = typeof(object)， = typeof(object)。 <br /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="3KAWC" i="0">项目类型</param>
      <param name="path" v="1tDgZj" i="0">成员路径字符串</param>
      <param name="paramType" v="3EPEMR" i="0">传入对象的类型</param>
      <param name="valueType" v="4S22WK" i="0">赋值对象的类型</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type)">
      <summary v="1tIQdL" i="0">
获取set value委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``1(System.String,System.Type)">
      <summary v="1tIQdL" i="0">
获取set value委托
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``2(System.String)">
      <summary v="1tIQdL" i="0">
获取set value委托
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetExpression(System.String,System.Type,System.Type,System.Type)">
      <summary v="2YPZv4" i="0">
获取设置值表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="paramType" v="0000" i="0" />
      <param name="valueType" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type,System.Type,System.Type)">
      <summary v="4MOdQj" i="0">
获取一个集值lambda表达式，lambda表达式的类型取决于和: <br />
'Expression&lt;Action&lt;TItem，TValue&gt;&gt;': = typeof(TItem)， = typeof(TValue)。 <br />
'Expression&lt;Action&lt;object，TValue&gt;&gt;': = typeof(object)， = typeof(TValue)。 <br />
'Expression&lt;Action&lt;object，object&gt;&gt;': = typeof(object)， = typeof(object)。 <br /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="3KAWC" i="0">项目类型</param>
      <param name="path" v="1tDgZj" i="0">成员路径字符串</param>
      <param name="paramType" v="3EPEMR" i="0">传入对象的类型</param>
      <param name="valueType" v="4S22WK" i="0">赋值对象的类型</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type)">
      <summary v="132T86" i="0">
获取设置值lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``1(System.String,System.Type)">
      <summary v="132T86" i="0">
获取设置值lambda表达式
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``2(System.String)">
      <summary v="132T86" i="0">
获取设置值lambda表达式
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="3kkUvI" i="0">
C.道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetPropertyOrNull(System.Linq.Expressions.Expression,System.String)">
      <summary v="1RqOfF" i="0">
C？.道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.GetRootParameterExpression(System.Linq.Expressions.Expression)">
      <summary v="2GqtB8" i="0">
表达式应类似于: ParameterExpression-&gt;MemberExpression1-&gt;MemberExpression2. ..，
如果 'expression' 的根不是ParameterExpression，这将返回null。
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsClass(System.Linq.Expressions.Expression)">
      <summary v="1fYDYr" i="0">
检查expression.Type是否为class，否则抛出和异常
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsNullableTypeOrThrow(System.Linq.Expressions.Expression)">
      <summary v="4ElDLn" i="0">
检查expression.Type是否为Nullable&lt;T&gt;，否则抛出和异常
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsValueType(System.Linq.Expressions.Expression)">
      <summary v="Ty4KO" i="0">
检查expression.Type是否为ValueType且不可为Nullable&lt;T&gt;，否则引发和异常
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="2TjE8o" i="0">
NV!.Value.Prop，可能是无值的InvalidOperationException
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetPropOrNull(System.Linq.Expressions.Expression,System.String)">
      <summary v="1x7cZa" i="0">
NV?.Value.Prop
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValue(System.Linq.Expressions.Expression)">
      <summary v="1rT0TK" i="0">
NV!.Value，可能是无值的InvalidOperationException
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValueOrNull(System.Linq.Expressions.Expression)">
      <summary v="373AOg" i="0">
NV？.值
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ParseIndexAccess(System.String)">
      <summary v="1CTdtF" i="0">
检查属性字符串是否有索引操作并解析为表达式
</summary>
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.TryConvertToNullable(System.Linq.Expressions.Expression)">
      <summary v="1TR7Jh" i="0">
尝试将表达式类型转换为可以为Nullable的类型，只能转换不可为Nullable的ValueType
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ValueTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="4BMgnr" i="0">
V.道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddDaysSafely(System.DateTime,System.Int32)">
      <summary v="tyQe5" i="0">
用该函数来执行add日逻辑，不会触发System.Argumentoutofroangeexception异常
函数的add天永远不会抛出System.Argumentoutoffrangeexception
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddMonthsSafely(System.DateTime,System.Int32)">
      <summary v="2eg2rN" i="0">
用该函数来执行逻辑，不会触发系统。argumentoutoffrangeexception异常
函数的addmonth斯永远不会抛出System.Argumentoutoffrangeexception
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddYearsSafely(System.DateTime,System.Int32)">
      <summary v="31u7rC" i="0">
用该函数来执行addarrow逻辑，不会触发System.Argumentoutofroangeexception异常
函数的addearrow永远不会抛出System.Argumentoutoffrangeexception
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfDay(System.DateTime)">
      <summary v="rYvKV" i="0">
例如，当currentDateTime 2020-01-04 05:34:55时，则:
下一个日期应该是2021-01-05 00:00:00，这是第二天的开始日期
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfDecade(System.DateTime)">
      <summary v="1kzAtL" i="0">
例如，
当currentDateTime 2020-01-04 05:34:55时:
下一个日期应该是2030-01 00:00:00，这是下一个10年的开始日期

当currentDateTime 2023-01-04 05:34:55时:
下一个日期应该是2030-01 00:00:00，这是下一个10年的开始日期

当currentDateTime 2018-01-04 05:34:55时:
下一个日期应该是2020-01 00:00:00，这是下一个10年的开始日期
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfMonth(System.DateTime)">
      <summary v="1z1IDD" i="0">
例如，当currentDateTime 2020-01-04 05:34:55时，则:
下一个日期应该是2020-02-01 00:00:00，这是下个月的开始日期
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfQuarter(System.DateTime)">
      <summary v="3VCB6e" i="0">
例如，当currentDateTime 2020-01-04 05:34:55时，则:
下一个日期应该是2020-04-01 00:00:00，这是下一个季度2020年的开始日期
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfYear(System.DateTime)">
      <summary v="33tvDc" i="0">
例如，当currentDateTime 2020-01-04 05:34:55时，则:
下一个日期应该是2021-01 00:00:00，这是明年的开始日期
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePicker`1.GetIndexValue(System.Int32)">
      <summary v="29wd8z" i="0">
获取选择器的值
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="15XtPd" i="0">
如果在Input元素内不再按下键盘键，则通过EventCallBack调用方法。
</summary>
      <param name="e" v="19uVqq" i="0">包含在输入元素内按下的键 (组合)</param>
    </member>
    <member name="M:AntDesign.DatePickerBase`1.ChangePickerValue(System.DateTime,System.Nullable{System.Int32})">
      <summary v="4PBJQR" i="0">
更改将在选取器上显示的日期。
</summary>
      <param name="date" v="2tF8nX" i="0">要保存的新日期。</param>
      <param name="index" v="4P8AAT" i="0">输入框的索引，其中0 = inputStart，1 = inputEnd (仅RangePicker)</param>
    </member>
    <member name="M:AntDesign.DatePickerBase`1.ChangeValue(System.DateTime,System.Int32,System.Boolean)">
      <summary v="2WHZEZ" i="0">
修改值
</summary>
      <param name="value" v="0000" i="0" />
      <param name="index" v="0000" i="0" />
      <param name="closeDropdown" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePickerBase`1.GetIndexPickerValue(System.Int32)">
      <summary v="wsrBf" i="0">
通过选取器索引获取pickerValue。请注意，索引是指一个选择器面板
而不是输入文本。对于RangePicker 2输入，生成2个面板。
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DayOfWeekHelper.GetDiffForDayOfWeek(System.DayOfWeek)">
      <summary v="2AmivX" i="0">
返回必须添加到开始日期以获得正确的一周第一天的天数。
</summary>
      <param name="firstDayOfWeek" v="2NXrGl" i="0">在当前区域设置中定义的一周的第一天。</param>
      <returns v="4ZXel1" i="0">天的差异。</returns>
    </member>
    <member name="M:AntDesign.Dialog.AppendToContainer">
      <summary v="rD7kr" i="0">
附加到正文
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.CleanShowAnimationAsync">
      <summary v="2e9XUW" i="0">
清除蚂蚁模型输入类，这将禁用用户选择。
更多详细信息请参阅样式/mixins/modal-mask.less
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.GetStyle">
      <summary v="449EWV" i="0">
蚂蚁模态风格
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.Hide">
      <summary v="B1FcK" i="0">
通过动画隐藏对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.IsShow">
      <summary v="4TzPoA" i="0">
确定是否显示对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="isFirst" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnCloserClick">
      <summary v="wH6uH" i="0">
closer(X) click事件
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="1oMDd3" i="0">
监听Tab和ESC键事件
</summary>
      <param name="e" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnMaxBtnClick">
      <summary v="wH6uH" i="0">
closer(X) click事件
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnParametersSetAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.Show">
      <summary v="3EGs1m" i="0">
通过动画显示对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.TryResetModalStyle">
      <summary v="1O67Zt" i="0">
如果Modal是可拖动的，则重置与第一个show类似的位置样式
</summary>
    </member>
    <member name="M:AntDesign.DialogWrapper.DestroyAsync">
      <summary v="1InHPh" i="0">
从DOM树中销毁组件
</summary>
    </member>
    <member name="M:AntDesign.DialogWrapper.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DialogWrapper.OnParametersSetAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.CloseClick">
      <summary v="41qy8P" i="0">
单击Closer时触发
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.HandleClose(System.Boolean)">
      <summary v="ydVZ5" i="0">
收盘后清理
</summary>
      <param name="isChangeByParamater" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.MaskClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="3dYfV8" i="0">
单击掩码时触发
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnClose(AntDesign.DrawerRef)">
      <summary v="3VEoDU" i="0">
关闭抽屉
</summary>
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnCreate(AntDesign.DrawerRef)">
      <summary v="1IAQRb" i="0">
创建并打开抽屉
</summary>
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnUpdateEvent(AntDesign.DrawerRef)">
      <summary v="3xcPb5" i="0">
更新抽屉
</summary>
      <param name="drawerRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.CloseAsync">
      <summary v="w8anv" i="0">
关闭确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.OpenAsync">
      <summary v="4ME4b" i="0">
打开确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.UpdateConfigAsync">
      <summary v="3cDh69" i="0">
更新确认对话框配置哪个可见 = true
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.UpdateConfigAsync(AntDesign.DrawerOptions)">
      <summary v="1aknzh" i="0">
使用新的confirmotions更新确认对话框配置
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef`1.CloseAsync(`0)">
      <summary v="1fh4wR" i="0">
关闭抽屉
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerService.CreateAsync(AntDesign.DrawerOptions)">
      <summary v="4COGsK" i="0">
创建并打开一个没有结果的简单抽屉
</summary>
      <param name="options" v="4Co7ip" i="0">抽屉选项</param>
      <returns v="4dM9xE" i="0">抽屉的参考</returns>
    </member>
    <member name="M:AntDesign.DrawerService.CreateAsync``3(AntDesign.DrawerOptions,``1)">
      <summary v="3xw7KV" i="0">
使用模板创建并打开抽屉
</summary>
      <typeparam name="TComponent" v="zYcLf" i="0">DrawerTemplate实现的类型</typeparam>
      <typeparam name="TComponentOptions" v="70Cl2" i="0">的</typeparam>
      <typeparam name="TResult" v="22qdCS" i="0">返回值的类型</typeparam>
      <param name="config" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <returns v="4dM9xE" i="0">抽屉的参考</returns>
    </member>
    <member name="M:AntDesign.DrawerService.CreateDialogAsync``3(AntDesign.DrawerOptions,``1)">
      <summary v="3IA0Sy" i="0">
创建并打开抽屉
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerService.UpdateAsync(AntDesign.DrawerRef)">
      <summary v="1KxX7p" i="0">
更新抽屉
</summary>
      <param name="drawerRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dropdown.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="uNBE4" i="0">
处理触发器单击。
</summary>
      <param name="args" v="2rN4Oq" i="0">MouseEventArgs</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DropdownButton.OnAfterRenderAsync(System.Boolean)">
      <summary v="li9fM" i="0">
将强制覆盖触发器附加到的包装元素
正确的按钮。右按钮必须包装，
因为覆盖将寻找第一个孩子
用于计算叠加位置的叠加触发器的元素。
如果右按钮是触发器，那么它的第一个子
将是图标/省略号，叠加层将是
渲染得太高。
</summary>
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.EnumerableExtensions.AddIf``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
      <summary v="39Zky1" i="0">
当条件为true时将项目添加到项目
</summary>
      <typeparam name="T" v="0000" i="0" />
      <param name="items" v="0000" i="0" />
      <param name="condition" v="0000" i="0" />
      <param name="item" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="ne9hr" i="0">
触发取消按钮时回拨，可用于取消结账
在取消按钮触发时回调，可以用来取消关闭
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.CloseFeedbackAsync">
      <summary v="MRcJX" i="0">
为了用户可以通过按钮关闭模板
为了用户可以在模板内通过按钮主动关闭
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2P1DPD" i="0">
好按钮触发时回拨，可用于取消结账
在好按钮触发时回调，可以用来取消关闭
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="ne9hr" i="0">
触发取消按钮时回拨，可用于取消结账
在取消按钮触发时回调，可以用来取消关闭
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2P1DPD" i="0">
好按钮触发时回拨，可用于取消结账
在好按钮触发时回调，可以用来取消关闭
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.CloseAsync">
      <summary v="2ZRDin" i="0">
只是做关闭反馈组件，不会触发OkAsync或OkCancel
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.OpenAsync">
      <summary v="17W1IJ" i="0">
只需打开关闭反馈组件
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.UpdateConfigAsync">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.FeedbackRefWithOkCancelBase.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2goXMY" i="0">
单击 &ldquo;取消” 按钮
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefWithOkCancelBase.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2chA2T" i="0">
单击好按钮
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FormItem.GetRulesFromAttributes">
      <summary v="3N16ij" i="0">
用于使用区域设置验证消息模板的FormValidationRule的tansform属性
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.HtmlRenderer.HandleException(System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.IFeedbackRef.CloseAsync">
      <summary v="2ZRDin" i="0">
只是做关闭反馈组件，不会触发OkAsync或OkCancel
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IFeedbackRef.OpenAsync">
      <summary v="21ZJm2" i="0">
打开组件
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IFeedbackRef.UpdateConfigAsync">
      <summary v="YyiiH" i="0">
更新组件
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IForm.Reset">
      <summary v="8JhiC" i="0">
重置所有字段的值和验证消息。
</summary>
    </member>
    <member name="M:AntDesign.IForm.SetValidationMessages(System.String,System.String[])">
      <summary v="1QWtyN" i="0">
为特定字段设置验证消息。
</summary>
      <param name="field" v="0000" i="0" />
      <param name="errorMessages" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IForm.Submit">
      <summary v="1o8vxt" i="0">
当所有字段都有效时触发 'OnFinish'，否则触发 'OnFinishFailed'。
</summary>
    </member>
    <member name="M:AntDesign.IForm.Validate">
      <summary v="1O3Irc" i="0">
验证所有字段。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IModalTemplate.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="HOT19" i="0">
触发取消按钮时回叫
点击取消按钮时调用，可以重写它来放入自己的逻辑
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="1st9il" i="0">
好按钮被触发时回叫
点击确定按钮时调用，可以重写它来放入自己的逻辑
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="HOT19" i="0">
触发取消按钮时回叫
点击取消按钮时调用，可以重写它来放入自己的逻辑
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="11XfcB" i="0">
好按钮被触发时回叫
击确定按钮时调用，可以重写它来放入自己的逻辑
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Input`1.Blur">
      <summary v="2TivqD" i="0">
从输入元素移除焦点。
</summary>
    </member>
    <member name="M:AntDesign.Input`1.Focus(AntDesign.FocusBehavior,System.Boolean)">
      <summary v="2TJZHv" i="0">
具有可选行为的输入组件的焦点行为。
</summary>
      <param name="behavior" v="3ckSUH" i="0">枚举: AntDesign.FocusBehavior</param>
      <param name="preventScroll" v="mJzFU" i="0">当为true时，接收焦点的元素不会滚动到。</param>
    </member>
    <member name="M:AntDesign.Input`1.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <summary v="2rohGm" i="0">
当用户添加/删除内容时调用
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
      <summary v="1YS4Nn" i="0">
始终返回true，如果输入字符串无效，result = default，如果输入字符串为null或空，result = DefaultValue
</summary>
      <param name="value" v="0000" i="0" />
      <param name="result" v="0000" i="0" />
      <param name="validationErrorMessage" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.InputPassword.Focus(AntDesign.FocusBehavior,System.Boolean)">
      <summary v="BBLs9" i="0">
具有可选行为的InputPassword组件的焦点行为。
wasm所需的特殊行为。
</summary>
      <param name="behavior" v="3ckSUH" i="0">枚举: AntDesign.FocusBehavior</param>
      <param name="preventScroll" v="mJzFU" i="0">当为true时，接收焦点的元素不会滚动到。</param>
    </member>
    <member name="M:AntDesign.Internal.DateTimeInputMaskConverter.Convert(System.String,System.String)">
      <summary v="1qVqcd" i="0">
将字符串值转换为掩码
</summary>
      <param name="value" v="0000" i="0" />
      <param name="mask" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.IsHiding">
      <summary v="4zx3a" i="0">
当覆盖完成隐藏时，IsPopup返回true
当叠加是隐藏 (播放隐藏动画)，IsPopup返回false，IsHiding返回true。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.UpdateChildState(AntDesign.Internal.Overlay,System.Boolean)">
      <summary v="4HGtC6" i="0">
设置是否有任何子覆盖显示或隐藏
覆盖不会隐藏，如果任何孩子正在显示
</summary>
      <param name="child" v="0000" i="0" />
      <param name="isChildOverlayShow" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.WaitFor(System.Func{System.Boolean},System.Int32,System.Int32)">
      <summary v="WmAnP" i="0">
将每隔给定的毫秒探测一个检查谓词，直到谓词为真或直到
探测次数用完了。
</summary>
      <param name="check" v="DTHnp" i="0">将传递每次在waittimeinmilsecondsperpropering之后运行的谓词。</param>
      <param name="probings" v="3vA775" i="0">探测的最大数量。达到此数字后，该方法结束。</param>
      <param name="waitTimeInMilisecondsPerProbing" v="3rKbiP" i="0">每次探测之间要等待多长时间。</param>
      <returns v="VAeqQ" i="0">任务</returns>
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.Close">
      <summary v="2KR58q" i="0">
将隐藏覆盖。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.IsOverlayShow">
      <summary v="2Ggocw" i="0">
检查覆盖当前是否处于可见状态。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="uNBE4" i="0">
处理触发器单击。
</summary>
      <param name="args" v="2rN4Oq" i="0">MouseEventArgs</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.OnMouseUp(System.Text.Json.JsonElement)">
      <summary v="4XMUqd" i="0">
在文档上鼠标向上
</summary>
      <param name="element" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.SetVisible(System.Boolean)">
      <summary v="3vKfxn" i="0">
切换覆盖可见性。
</summary>
      <param name="visible" v="P3osx" i="0">布尔值: 可见性true/false</param>
    </member>
    <member name="M:AntDesign.IOkCancelRef.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2qxEww" i="0">
触发取消按钮单击
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="1AzDVn" i="0">
点击触发好按钮
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef`1.CancelAsync(`0)">
      <summary v="2qxEww" i="0">
触发取消按钮单击
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef`1.OkAsync(`0)">
      <summary v="1AzDVn" i="0">
点击触发好按钮
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.MenuHelper.EqualsHrefExactlyOrIfTrailingSlashAdded(System.String,System.String)">
      <summary v="45QEiW" i="0">
比较两个uri是否相等，说明可选的尾随斜杠。
</summary>
      <param name="currentUriAbsolute" v="2FTHGm" i="0">当前位置的绝对URI。</param>
      <param name="hrefAbsolute" v="2oqpNf" i="0">要比较的绝对URI。</param>
      <returns v="0721d" i="0">如果URI相等，或者如果向当前URI添加尾部斜杠使它们相等，则为True; 否则为false。</returns>
    </member>
    <member name="M:AntDesign.MenuHelper.IsStrictlyPrefixWithSeparator(System.String,System.String)">
      <summary v="21TnT1" i="0">
确定字符串值是否严格为另一个字符串的前缀，前缀后带有分隔符。
</summary>
      <param name="value" v="4Mj5B9" i="0">要检查的字符串值。</param>
      <param name="prefix" v="3FK6u0" i="0">要检查的前缀。</param>
      <returns v="kserR" i="0">如果值以前缀开头，后跟分隔符，则为True; 否则为false。</returns>
    </member>
    <member name="M:AntDesign.MenuHelper.ShouldMatch(Microsoft.AspNetCore.Components.Routing.NavLinkMatch,System.String,System.String)">
      <summary v="2Yuawe" i="0">
根据给定的匹配条件确定当前URI是否应与指定的URI匹配。
</summary>
      <param name="match" v="1c2o8O" i="0">匹配条件 (精确或前缀)。</param>
      <param name="currentUriAbsolute" v="2FTHGm" i="0">当前位置的绝对URI。</param>
      <param name="hrefAbsolute" v="21c5Xn" i="0">要匹配的绝对URI。</param>
      <returns v="eIoT1" i="0">如果uri根据条件匹配，则为True; 否则为false。</returns>
    </member>
    <member name="M:AntDesign.MenuLink.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.MenuLink.OnInitialized">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.MenuLink.OnParametersSet">
      <inheritdoc />
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalClosingEventArgs.Reject">
      <summary v="1weYjX" i="0">
拒绝关闭模式。
</summary>
    </member>
    <member name="M:AntDesign.ModalRef.CloseAsync">
      <summary v="1C3EuD" i="0">
关闭模式对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.OpenAsync">
      <summary v="4ej4FH" i="0">
打开模式对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.SetConfirmLoading(System.Boolean)">
      <summary v="3rjfxG" i="0">
设置确认按钮的加载状态
</summary>
      <param name="loading" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.UpdateConfigAsync">
      <summary v="3HSUvR" i="0">
更新模态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef`1.CancelAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalRef`1.OkAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalService.CheckConfirmOptionsIsNull(AntDesign.ConfirmOptions)">
      <summary v="ceR4u" i="0">
检查确认选项是否为空
</summary>
      <param name="options" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CloseModalAsync(AntDesign.ModalRef)">
      <summary v="32KVPZ" i="0">
关闭模式对话框
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Confirm(AntDesign.ConfirmOptions)">
      <summary v="446RlY" i="0">
创建并打开好-取消确认对话框
</summary>
      <param name="props" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.ConfirmAsync(AntDesign.ConfirmOptions)">
      <summary v="4GLQTQ" i="0">
创建并打开一个好-取消确认对话框，
并返回一个bool值，该值指示是否已单击好按钮
</summary>
      <param name="props" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateAsync(AntDesign.ConfirmOptions)">
      <summary v="mEobg" i="0">
创建并打开一个好-取消确认异步
</summary>
      <param name="config" v="VWReJ" i="0">选项</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateAsync``3(AntDesign.ConfirmOptions,``1)">
      <summary v="ozXdH" i="0">
&ldquo;创建并打开模板” 确认对话框
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateConfirmAsync(AntDesign.ConfirmOptions)">
      <summary v="mEobg" i="0">
创建并打开一个好-取消确认异步
</summary>
      <param name="config" v="VWReJ" i="0">选项</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateConfirmAsync``3(AntDesign.ConfirmOptions,``1)">
      <summary v="ozXdH" i="0">
&ldquo;创建并打开模板” 确认对话框
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
创建并打开模态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``1(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
创建并打开模态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``2(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
使用模板创建和打开模态
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <param name="options" v="tybuH" i="0">模态选项</param>
      <param name="componentOptions" v="3DQjZ" i="0">设置模板选项</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``3(AntDesign.ModalOptions,``1)">
      <summary v="BZBpW" i="0">
创建并打开带有模板组件的模态
</summary>
      <typeparam name="TComponent" v="32TQtz" i="0">模板组件的类型。</typeparam>
      <typeparam name="TComponentOptions" v="1r24BW" i="0">模板组件选项的类型。</typeparam>
      <typeparam name="TResult" v="3XbXsR" i="0">从模板组件返回的结果。</typeparam>
      <param name="options" v="tybuH" i="0">模态选项</param>
      <param name="componentOptions" v="3DQjZ" i="0">设置模板选项</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
创建并打开模态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``1(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
创建并打开模态
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``2(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
使用模板创建和打开模态
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``3(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
使用模板创建和打开模态
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync(AntDesign.ModalRef)">
      <summary v="2bOTQb" i="0">
创建或打开模式对话框
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync``1(AntDesign.ModalRef{``0})">
      <summary v="2bOTQb" i="0">
创建或打开模式对话框
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Destroy(AntDesign.ConfirmRef)">
      <summary v="3tfjt5" i="0">
关闭确认对话框
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyAll">
      <summary v="1pE5wT" i="0">
关闭所有确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyAllConfirmAsync">
      <summary v="1pE5wT" i="0">
关闭所有确认对话框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="2arRzl" i="0">
关闭确认对话框
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Error(AntDesign.ConfirmOptions)">
      <summary v="2ux7xK" i="0">
创建并打开带有错误图标的好-取消确认对话框
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.ErrorAsync(AntDesign.ConfirmOptions)">
      <summary v="2Qy7Ap" i="0">
创建并打开带有错误图标的好-取消确认对话框，
并返回一个bool值，该值指示是否已单击好按钮
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Info(AntDesign.ConfirmOptions)">
      <summary v="2Ho26k" i="0">
创建并打开带有信息图标的好-取消确认对话框
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.InfoAsync(AntDesign.ConfirmOptions)">
      <summary v="4m1YE" i="0">
创建并打开带有信息图标的好-取消确认对话框，
并返回一个bool值，该值指示是否已单击好按钮
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.OpenConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="1l2VTY" i="0">
打开确认对话框
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Success(AntDesign.ConfirmOptions)">
      <summary v="33yL7U" i="0">
创建并打开带有成功图标的好-取消确认对话框
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.SuccessAsync(AntDesign.ConfirmOptions)">
      <summary v="4blYzC" i="0">
创建并打开带有成功图标的好-取消确认对话框，
并返回一个bool值，该值指示是否已单击好按钮
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.System#IDisposable#Dispose">
      <summary v="2VmIAJ" i="0">
实现接口IDisposable
</summary>
    </member>
    <member name="M:AntDesign.ModalService.Update(AntDesign.ConfirmRef)">
      <summary v="1NFloI" i="0">
更新确认哪个可见 = true
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.UpdateConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="1NFloI" i="0">
更新确认哪个可见 = true
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Warning(AntDesign.ConfirmOptions)">
      <summary v="fbH97" i="0">
创建并打开带有警告图标的好-取消确认对话框
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.WarningAsync(AntDesign.ConfirmOptions)">
      <summary v="3rhIU9" i="0">
创建并打开带有警告图标的好-取消确认对话框，
并返回一个bool值，该值指示是否已单击好按钮
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Notification.Config(AntDesign.NotificationGlobalConfig)">
      <summary v="1is6NV" i="0">
修改全局配置
</summary>
      <param name="defaultConfig" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.CloseAsync">
      <summary v="4UcOnP" i="0">
关闭通知框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.OpenAsync">
      <summary v="4SH2nV" i="0">
打开通知框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync">
      <summary v="3tSEAT" i="0">
修改Config属性后，更新通知框
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
      <summary v="1mHuoq" i="0">
更新通知框的说明和消息
</summary>
      <param name="description" v="0000" i="0" />
      <param name="message" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
      <summary v="2kVQOh" i="0">
更新通知框的说明
</summary>
      <param name="description" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Close(System.String)">
      <summary v="3jolhi" i="0">
按键关闭通知
</summary>
      <param name="key" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.CreateRefAsync(AntDesign.NotificationConfig)">
      <summary v="2Bc7tH" i="0">
只需创建一个NotificationRef而不打开它
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Destroy">
      <summary v="39Brkl" i="0">
销毁所有通知框
</summary>
    </member>
    <member name="M:AntDesign.NotificationService.Error(AntDesign.NotificationConfig)">
      <summary v="xrKET" i="0">
打开具有NotificationType.Error样式的通知框
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Info(AntDesign.NotificationConfig)">
      <summary v="pEMCC" i="0">
使用NotificationType.Info样式打开通知框
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Open(AntDesign.NotificationConfig)">
      <summary v="3MKyC" i="0">
打开通知框
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Success(AntDesign.NotificationConfig)">
      <summary v="4DfMLQ" i="0">
使用NotificationType.Success样式打开通知框
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.UpdateAsync(System.String,OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},System.Nullable{OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment}})">
      <summary v="3C21Nn" i="0">
更新已存在的通知框
</summary>
      <param name="key" v="0000" i="0" />
      <param name="description" v="0000" i="0" />
      <param name="message" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Warn(AntDesign.NotificationConfig)">
      <summary v="bXGWQ" i="0">
等效于警告方法
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Warning(AntDesign.NotificationConfig)">
      <summary v="2FtkJD" i="0">
使用NotificationType.Warning样式打开通知框
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Pagination.GetItemIcon(Microsoft.AspNetCore.Components.RenderFragment{AntDesign.PaginationItemRenderContext},System.String)">
      <summary v="yaMOW" i="0">
需要渲染的计算图标节点。
</summary>
      <param name="icon" v="0000" i="0" />
      <param name="label" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.RangePicker`1.GetIndexValue(System.Int32)">
      <summary v="3Nl0wm" i="0">
通过选取器索引获取值
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.RangePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Int32)">
      <summary v="15XtPd" i="0">
如果在Input元素内不再按下键盘键，则通过EventCallBack调用方法。
</summary>
      <param name="e" v="19uVqq" i="0">包含在输入元素内按下的键 (组合)</param>
      <param name="index" v="3EB8uv" i="0">引用选择器索引-0表示开始日期，1表示结束日期</param>
    </member>
    <member name="M:AntDesign.RangePicker`1.OnValueChange(`0)">
      <summary v="3fp1oJ" i="0">
处理值的更改。
更改值时，pickervvalues应指向这些新值
或当前日期 (如果未传递任何值)。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseAll">
      <summary v="DxSPd" i="0">
关闭所有可关闭或未固定的页面
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseCurrent">
      <summary v="4fGDon" i="0">
关闭当前页面
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseOther(System.String)">
      <summary v="1AstJw" i="0">
关闭除具有指定键的页面之外的所有页面
</summary>
      <param name="key" v="41HRQc" i="0">指定页面的键</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.ClosePage(System.String)">
      <summary v="2DgLqm" i="0">
关闭指定键对应的页面
</summary>
      <param name="key" v="41HRQc" i="0">指定页面的键</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
      <summary v="1ZV1GJ" i="0">
创建一个没有导航的选项卡，页面不会真正呈现，直到选项卡被点击
</summary>
      <param name="pageUrl" v="cpmkn" i="0">目标页面的url</param>
      <param name="titleTemplate" v="40GSf5" i="0">标题显示在选项卡上</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,System.String)">
      <summary v="1ZV1GJ" i="0">
创建一个没有导航的选项卡，页面不会真正呈现，直到选项卡被点击
</summary>
      <param name="pageUrl" v="cpmkn" i="0">目标页面的url</param>
      <param name="title" v="40GSf5" i="0">标题显示在选项卡上</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.GetAllAssembly">
      <summary v="49IvX1" i="0">
获取所有程序集
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.ReloadPage">
      <summary v="3tT3nA" i="0">
重新加载当前页面
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.ReloadPage(System.String)">
      <summary v="OXxMk" i="0">
重新加载指定键对应的页面
</summary>
      <param name="key" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.ScanReuseTabsPageAttribute">
      <summary v="XkbND" i="0">
扫描ReuseTabsPageAttribute特性
</summary>
    </member>
    <member name="M:AntDesign.Select.Internal.SelectContent`2.GetFirstItemMaxWidth">
      <summary v="43hQcz" i="0">
任何项目都可能溢出。在第一项的情况下，当有
是SelectContent中的任何其他元素 (前缀，后缀，清除btn等)
默认MaxWidth将强制th SelectContent增长。更改MaxWidth
允许溢出项适合一行。
TODO: 使用相对单位
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.AllOptionsHidden">
      <summary v="40RjGr" i="0">
如果SelectOptions列表中的所有条目都将参数IsHidden设置为True，则返回true
</summary>
      <returns v="2q84ZY" i="0">如果所有项都设置为IsHidden(true)，则为true</returns>
    </member>
    <member name="M:AntDesign.Select`2.AppendLabelValue(System.String)">
      <summary v="1bSAjX" i="0">
在标记模式下附加标签项
</summary>
      <param name="label" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.CreateDeleteSelectOptions">
      <summary v="44SoRK" i="0">
当数据源更改时，创建或删除SelectOption
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ElementScrollIntoViewAsync(Microsoft.AspNetCore.Components.ElementReference)">
      <summary v="wAgqW" i="0">
通过JavaScript滚动到项目。
</summary>
      <param name="element" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.EvaluateValueChangedOutsideComponent(AntDesign.Select.Internal.SelectOptionItem{`0,`1},`0)">
      <summary v="4NsNUd" i="0">
当绑定值在组件外部更改时，则组件
必须根据传递的新值重新选择选定的项目。
</summary>
      <param name="optionItem" v="lDKGf" i="0">已选择的选项项。</param>
      <param name="value" v="2kKYpM" i="0">所选选项项的值。</param>
    </member>
    <member name="M:AntDesign.Select`2.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <summary v="4V1spf" i="0">
如果键盘更改了输入元素的值，则通过EventCallBack调用方法
</summary>
      <param name="e" v="1BvLkq" i="0">包含输入元素的值</param>
    </member>
    <member name="M:AntDesign.Select`2.OnKeyDownAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="2Eypjm" i="0">
如果在输入元素内按下键，则通过EventCallback调用方法。
如果用户按下TAB循环槽元素，则该方法用于获取TAB事件。
如果接收到选项卡，则覆盖将被关闭并且输入元素blures。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.OnKeyUpAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="15XtPd" i="0">
如果在Input元素内不再按下键盘键，则通过EventCallBack调用方法。
</summary>
      <param name="e" v="19uVqq" i="0">包含在输入元素内按下的键 (组合)</param>
    </member>
    <member name="M:AntDesign.Select`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4XvNPB" i="0">
如果用户单击标记的关闭图标，则通过EventCallBack调用方法。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ProcessSelectedSelectOptions">
      <summary v="4g8hNe" i="0">
仅在使用ChildElement SelectOptions时使用。
如果项目在initization之后运行此过程
添加的也标记为选定。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.ResetValue">
      <summary v="cEne8" i="0">
由窗体重置方法调用
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ScrollToFirstSelectedItemAsync">
      <summary v="OQdQR" i="0">
搜索第一个选择的项目，将所有其他项目的IsActive设置为False，并通过JavaScript调用scrollintovew函数。
该方法用于在打开覆盖后滚动到第一个选择的项目。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetClassMap">
      <summary v="RBCbP" i="0">
设置CSS类以更改视觉样式
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetDefaultActiveFirstItemAsync">
      <summary v="1b9LQT" i="0">
如果DefaultActiveFirstItem为True，则未禁用的第一项 (True) 将设置为选定项。
如果没有项，则回退到clear方法。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetDropdownStyleAsync">
      <summary v="1rNbax" i="0">
获取Ref (JSInvoke) 的BoundingClientRect，并在px中设置min-width和width。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetInitialValuesAsync">
      <summary v="nJ8su" i="0">
初始化后设置初始值，该方法应只调用一次。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetInputBlurAsync">
      <summary v="2BVDnI" i="0">
检查焦点属性是否为true; 将焦点属性设置为false，更改
样式和blures通过DOM输入元素。它还调用OnBlur操作。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.TrySetDefaultValueAsync">
      <summary v="2yMz2T" i="0">
如果值为null (默认值)，则由OnAfterRenderAsync调用的方法
DefaultValue具有值或DefaultActiveFirstItem为True。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.TrySetDefaultValuesAsync">
      <summary v="3y6E36" i="0">
如果值为null (默认值)，则由OnAfterRenderAsync调用的方法
DefaultValues具有值或DefaultActiveFirstItem为True。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.ClearSelectedAsync">
      <summary v="38H8Nv" i="0">
清除selectValue(s) 属性并通过双向绑定将null(default) 值发送回。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.CloseAsync">
      <summary v="1jx2FJ" i="0">
关闭覆盖
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.CreateSelectOptionItem(System.String,System.Boolean)">
      <summary v="4s4PA" i="0">
创建选择选项项。主要是为了创建新的标签，这就是为什么IsAddedTag硬编码为true。
</summary>
      <param name="label" v="HyC3F" i="0">基于传递的标签创建</param>
      <param name="isActive" v="47SihR" i="0">如果设置为<c>true</c> [是活动的]。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.EvaluateValuesChangedOutsideComponent(System.Collections.Generic.IEnumerable{`0})">
      <summary v="1z9pAS" i="0">
当绑定值在组件外部更改时，则组件
必须根据传递的新值重新选择选定的项目。
TODO :( Perf) 考虑使用哈希来确定传递的值是否与当前选择的值不同。
</summary>
      <param name="values" v="2odFbD" i="0">需要选择的值。</param>
    </member>
    <member name="M:AntDesign.SelectBase`2.InvokeOnSelectedItemChanged(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="3K1S7F" i="0">
一个单独的方法，用于调用ValuesChanged和OnSelectedItemsChanged以减少代码重复。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputBlurAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
      <summary v="4p4QI" i="0">
如果输入元素失去焦点，则通过EventCallBack调用方法
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputClearClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="1sG09T" i="0">
方法通过EventCallBack调用用户点击输入元素内的清除图标后。
将所有项的IsSelected和IsHidden属性设置为False。它更新覆盖位置，如果
SelectMode是标签或多个。调用OnClearSelected操作。将值设置为默认值。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputFocusAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
      <summary v="22mu2d" i="0">
如果输入元素获得焦点，则通过EventCallBack调用方法
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4XvNPB" i="0">
如果用户单击标记的关闭图标，则通过EventCallBack调用方法。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnValuesChangeAsync(System.Collections.Generic.IEnumerable{`0})">
      <summary v="4VfcuR" i="0">
如果双向绑定更改了 @ bind-Values的值，则每次都会调用该方法。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.ResetValue">
      <summary v="cEne8" i="0">
由窗体重置方法调用
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.SetInputBlurAsync">
      <summary v="2BVDnI" i="0">
检查焦点属性是否为true; 将焦点属性设置为false，更改
样式和blures通过DOM输入元素。它还调用OnBlur操作。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.SetInputFocusAsync">
      <summary v="Rq9hv" i="0">
检查focus属性是否为False; 将focus属性设置为true，更改
样式，并通过DOM将焦点设置在输入元素上。它还调用OnFocus操作。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.SetValueAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4JZajd" i="0">
如果用户通过鼠标或键盘选择/取消选择项目，则每次调用该方法。
不要在此函数之外更改IsSelected属性。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.UnhideSelectOptions">
      <summary v="1znG6K" i="0">
取消隐藏所有选择选项，但在为true的情况下<see cref="P:AntDesign.SelectBase`2.HideSelected" />选择的选项除外
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.UpdateOverlayPositionAsync">
      <summary v="4VAGyk" i="0">
通知覆盖更新位置。
</summary>
    </member>
    <member name="M:AntDesign.Table`1.AntDesign#ITable#OnColumnInitialized">
      <summary v="3j8YuV" i="0">
当设置了所有列时，将调用此方法
</summary>
    </member>
    <member name="M:AntDesign.Table`1.AntDesign#ITable#RebuildColumns(System.Boolean)">
      <summary v="1lzzz9" i="0">
对于每个列的变化，它需要重新渲染四次
<br />1.重新渲染一次以识别在<see cref="M:AntDesign.Table`1.OnParametersSet" />调用后有任何列更改，触发渲染空的ChildContent。
<br />2.在调用at<see cref="M:AntDesign.ITable.RebuildColumns(System.Boolean)" />后为空ChildContent重新呈现一次，然后触发重新建源内容的呈现。
<br />3.在调用at<see cref="M:AntDesign.Table`1.OnAfterRenderAsync(System.Boolean)" />后重新呈现用于重建列，然后在列准备就绪后触发用于加载数据的呈现。
<br />4.在<see cref="M:AntDesign.Table`1.OnColumnInitialized" />调用后重新呈现重新加载数据</summary>
      <param name="add" v="4duF5f" i="0">是否添加/删除列</param>
      <remarks>
            lifecycle process: columns was changed -&gt; render#1(true) -&gt; column add/dispose -&gt; call rebuild(call render#2) -&gt; render#2(true) -&gt; OnAfterRenderAsync#2 (call render#3) -&gt; render#3(true)
            -&gt; OnColumnInitialized call render#4 -&gt; OnAfterRenderAsync#4 -&gt; OnAfterRenderAsync#3 -&gt; OnAfterRenderAsync#1 (the last 2 steps are duplicated and useless)
            </remarks>
      <returns v="3rKED9" i="0">是否开始重建</returns>
    </member>
    <member name="M:AntDesign.Table`1.ClearSelectedRows">
      <summary v="1OT3qB" i="0">
清除当前页的选定行
</summary>
    </member>
    <member name="M:AntDesign.Table`1.InvokeDataSourceHasChanged">
      <summary v="0pX44" i="0">
在更改数据源以刷新表的状态后调用此方法。
</summary>
            Make the method protected to allow derived classes to call it.
        </member>
    <member name="M:AntDesign.Table`1.SelectAll">
      <summary v="1zOBwL" i="0">
选择当前页的所有行
</summary>
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(`0)">
      <summary v="20O0Av" i="0">
选择一个项目
</summary>
      <param name="item" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.ICollection{System.String})">
      <summary v="ZRvp2" i="0">
如果可能的话，请使用<see cref="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})" />，
因为启用虚拟化时，此方法将无法正确选择不可见行中的项目。
</summary>
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})">
      <summary v="31oGTq" i="0">
设置所有选定项目
</summary>
      <param name="items" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Table`1.UnselectAll">
      <summary v="4ITSSv" i="0">
取消选择当前页的所有行
</summary>
    </member>
    <member name="M:AntDesign.TableModels.QueryModel`1.GetFilterExpression">
      <summary v="2TdfGV" i="0">
获取orm (如实体框架) 的当前过滤器表达式。
,您可以通过使用数据源执行表达式来获取过滤后的数据。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TableModels.SortModel`1.Compare(`0,`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.Tabs.AddTabPane(AntDesign.TabPane)">
      <summary v="2lX08c" i="0">
将<see cref="T:AntDesign.TabPane" />添加到 <see cref="T:AntDesign.Tabs" /></summary>
      <param name="tabPane" v="1YkHnc" i="0">要添加的AntTabPane</param>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exception cref="T:System.ArgumentException">An AntTabPane with the same key already exists</exception>
    </member>
    <member name="M:AntDesign.TextArea.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.Tree`1.AddChildNode(AntDesign.TreeNode{`0})">
      <summary v="1A85p0" i="0">
添加节点
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.CollapseAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="4cORof" i="0">
折叠所有节点
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.DeselectAll">
      <summary v="3ZRxKG" i="0">
取消选择所有选项
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.ExpandAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="gV1mk" i="0">
展开所有节点
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="eypyL" i="0">
查找节点
</summary>
      <param name="predicate" v="3xQfy6" i="0">谓词</param>
      <param name="recursive" v="DgcMI" i="0">递归查找</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.GetNode(System.String)">
      <summary v="3HcUYe" i="0">
从密钥获取TreeNode
</summary>
      <param name="key" v="1LwHKs" i="0">钥匙</param>
    </member>
    <member name="M:AntDesign.Tree`1.TriggerOnSelect(AntDesign.TreeNode{`0})">
      <summary v="Z97NP" i="0">
触发事件OnSelect
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.TriggerOnUnselect(AntDesign.TreeNode{`0})">
      <summary v="3ttz41" i="0">
触发事件OnUnselect
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.UncheckAll">
      <summary v="4fGZnq" i="0">
取消选中所有节点
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.UpdateSelectedKeys">
      <summary v="4Ddxug" i="0">
更新绑定数据
</summary>
    </member>
    <member name="M:AntDesign.TreeIndent`1.GetParentNode(AntDesign.TreeNode{`0},System.Int32)">
      <summary v="21vmtR" i="0">
查找特定级别的父节点
</summary>
      <param name="node" v="0000" i="0" />
      <param name="level" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddChildNode(`0)">
      <summary v="4Woj0Y" i="0">
添加子节点
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddNextNode(`0)">
      <summary v="4UcvGu" i="0">
在节点下添加节点
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddNode(AntDesign.TreeNode{`0})">
      <summary v="11Ldf2" i="0">
将节点添加到父节点
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddPreviousNode(`0)">
      <summary v="1chHuB" i="0">
在节点前添加节点
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.CollapseAll">
      <summary v="0InAm" i="0">
折叠所有子节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.Downgrade">
      <summary v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.DragMoveDown(AntDesign.TreeNode{`0})">
      <summary v="24tZuq" i="0">
拖放到目标的底部
</summary>
      <param name="treeNode" v="3w3ozB" i="0">目标</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.DragMoveInto(AntDesign.TreeNode{`0})">
      <summary v="2DcpoU" i="0">
拖放到子节点中
</summary>
      <param name="treeNode" v="3w3ozB" i="0">目标</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.Expand(System.Boolean)">
      <summary v="1Mpf35" i="0">
展开节点
</summary>
      <param name="expanded" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.ExpandAll">
      <summary v="34qmuW" i="0">
展开所有子节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="3HXbN3" i="0">
查找节点
</summary>
      <param name="predicate" v="3xQfy6" i="0">谓词</param>
      <param name="recursive" v="DgcMI" i="0">递归查找</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentChildDataItems">
      <summary v="2YwfqR" i="0">
获得上级数据集合
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentChildNodes">
      <summary v="1kSesi" i="0">
获取父节点的子节点
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentNodes">
      <summary v="2gK1NO" i="0">
获取父数据集
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveDown">
      <summary v="3BRJY8" i="0">
下移节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveInto(AntDesign.TreeNode{`0})">
      <summary v="1U6xDN" i="0">
节点移动到子节点
</summary>
      <param name="treeNode" v="4IISiB" i="0">目标节点</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveUp">
      <summary v="2ZOqfQ" i="0">
向上移动节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.OnCheckBoxClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="2xEXWN" i="0">
单击选择框时触发
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.OnSwitcherClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="3iMt4O" i="0">
节点切换
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.OpenPropagation(System.Boolean)">
      <summary v="4fa8eR" i="0">
扩张的父母
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.Remove">
      <summary v="sd5wW" i="0">
删除
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.RemoveNode">
      <summary v="dGVDZ" i="0">
删除当前节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.SetChecked(System.Boolean)">
      <summary v="1BDNpt" i="0">
设置复选框状态
</summary>
      <param name="check" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetChildChecked(AntDesign.TreeNode{`0},System.Boolean,System.Boolean,System.Boolean)">
      <summary v="1UnxiI" i="0">
设置子节点的复选框状态
</summary>
      <param name="subnode" v="0000" i="0" />
      <param name="check" v="0000" i="0" />
      <param name="isManual" v="0000" i="0" />
      <param name="forceRecursive" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetParentTargetContainer(System.Boolean)">
      <summary v="bQvqo" i="0">
设置拖放目标节点容器
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.SetSelected(System.Boolean)">
      <summary v="x0QNF" i="0">
设置选择状态
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetTargetBottom(System.Boolean)">
      <summary v="1VAIex" i="0">
设置释放目标位置的节点
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SwitchAllNodes(AntDesign.TreeNode{`0},System.Boolean)">
      <summary v="3aHy9v" i="0">
节点展开关闭
</summary>
      <param name="node" v="0000" i="0" />
      <param name="expanded" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.UpdateCheckState(System.Nullable{System.Boolean})">
      <summary v="9fWzk" i="0">
更新检查状态
</summary>
      <param name="halfChecked" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.Upgrade">
      <summary v="12yZbC" i="0">
升级节点
</summary>
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDblClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnd(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="9faGh" i="0">
拖动结束
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnter(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragLeave(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="1uwlgW" i="0">
离开释放目标
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragOver(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="2qw6tf" i="0">
如果目标向右移动超出OffsetX距离，则可以将其视为子级
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDrop(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Affix.OffsetBottom">
      <summary v="1bVteV" i="0">
距视口底部的偏移量 (以像素为单位)
</summary>
    </member>
    <member name="P:AntDesign.Affix.OffsetTop">
      <summary v="2aj1Wk" i="0">
距视口顶部的偏移量 (以像素为单位)
</summary>
    </member>
    <member name="P:AntDesign.Alert.AfterClose">
      <summary v="1HTYuL" i="0">
当关闭动画完成时调用
</summary>
    </member>
    <member name="P:AntDesign.Alert.Banner">
      <summary v="1rzYJy" i="0">
是否显示为横幅
</summary>
    </member>
    <member name="P:AntDesign.Alert.ChildContent">
      <summary v="3ll9iq" i="0">
附加内容
</summary>
    </member>
    <member name="P:AntDesign.Alert.Closable">
      <summary v="h5EMt" i="0">
是否可以关闭警报
</summary>
    </member>
    <member name="P:AntDesign.Alert.CloseText">
      <summary v="29NGpS" i="0">
关闭文本以显示
</summary>
    </member>
    <member name="P:AntDesign.Alert.Description">
      <summary v="3xZDj2" i="0">
警报的附加内容
</summary>
    </member>
    <member name="P:AntDesign.Alert.Icon">
      <summary v="rqvuO" i="0">
自定义图标，当showIcon为true时有效
</summary>
    </member>
    <member name="P:AntDesign.Alert.IconType">
      <summary v="4EXXPV" i="0">
要显示的图标。
</summary>
    </member>
    <member name="P:AntDesign.Alert.Message">
      <summary v="3ySxVB" i="0">
警报内容
</summary>
    </member>
    <member name="P:AntDesign.Alert.OnClose">
      <summary v="3qPRmi" i="0">
警报关闭时的回调。
</summary>
    </member>
    <member name="P:AntDesign.Alert.ShowIcon">
      <summary v="2CtP65" i="0">
是否显示图标。
</summary>
    </member>
    <member name="P:AntDesign.Alert.Type">
      <summary v="4TLMol" i="0">
警报样式的类型，选项: 成功，信息，警告，错误
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Affix">
      <summary v="G5LeF" i="0">
锚定的固定方式
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Bounds">
      <summary v="2ba1Sf" i="0">
锚区域的边界距离
</summary>
    </member>
    <member name="P:AntDesign.Anchor.GetContainer">
      <summary v="2yuhxT" i="0">
滚动容器
</summary>
    </member>
    <member name="P:AntDesign.Anchor.GetCurrentAnchor">
      <summary v="4JAkIk" i="0">
自定义锚点突出显示
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Key">
      <summary v="13ppKL" i="0">
用于在键更改时刷新链接列表。
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OffsetBottom">
      <summary v="4gFv5O" i="0">
计算滚动位置时从底部偏移的像素
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OffsetTop">
      <summary v="1vMGhz" i="0">
计算滚动位置时从顶部偏移的像素
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OnClick">
      <summary v="4N09j8" i="0">
设置处理程序以处理click事件
</summary>
    </member>
    <member name="P:AntDesign.Anchor.ShowInkInFixed">
      <summary v="11ujva" i="0">
是否在固定模式下显示墨球
</summary>
    </member>
    <member name="P:AntDesign.Anchor.TargetOffset">
      <summary v="39FgZF" i="0">
锚点滚动偏移，默认为 <see cref="P:AntDesign.Anchor.OffsetTop" /></summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Href">
      <summary v="3zX1xf" i="0">
超链接的目标
</summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Target">
      <summary v="278vCU" i="0">
指定显示链接URL的位置
</summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Title">
      <summary v="y1NoB" i="0">
超链接的内容
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Class">
      <summary v="1PA7jq" i="0">
为DOM元素指定一个或多个类名。
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Ref">
      <summary v="3v0RLn" i="0">
已返回DOM元素的ElementRef引用。
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Style">
      <summary v="34unoz" i="0">
指定DOM元素的内联样式。
</summary>
    </member>
    <member name="P:AntDesign.AntInputBoolComponentBase.CheckedChanged">
      <summary v="3VLzSp" i="0">
获取或设置更新绑定的checked值的回调。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.AdditionalAttributes">
      <summary v="3jnG2N" i="0">
获取或设置将应用于创建的元素的附加特性的集合。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CultureInfo">
      <summary v="OrqPJ" i="0">
将字符串转换为值并将值转换为字符串时将使用什么文化
对于InputNumber组件很有用。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CurrentValue">
      <summary v="4WBLIM" i="0">
获取或设置输入的当前值。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString">
      <summary v="DJ3yY" i="0">
获取或设置输入的当前值，表示为字符串。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.EditContext">
      <summary v="3o9jfY" i="0">
获取关联的<see cref="P:AntDesign.AntInputComponentBase`1.EditContext" />。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.FieldIdentifier">
      <summary v="4LejCf" i="0">
获取绑定值的<see cref="P:AntDesign.AntInputComponentBase`1.FieldIdentifier" />。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.NameAttributeValue">
      <summary v="2QEQYC" i="0">
获取要用于输入的 "name" 属性的值。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.Size">
      <summary v="P25m2" i="0">
输入框的大小。注意: 在表单的上下文中，
使用 &ldquo;大” 尺寸。可用: &ldquo;大” &ldquo;默认” &ldquo;小”
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.Value">
      <summary v="yoUC3" i="0">
获取或设置输入的值。这应该与双向绑定一起使用。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.ValueChanged">
      <summary v="1XH9uJ" i="0">
获取或设置更新绑定值的回调。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.ValueExpression">
      <summary v="iOY7r" i="0">
获取或设置标识绑定值的表达式。
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.ActiveValue">
      <summary v="3fAvMK" i="0">
高亮的项目
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.AllowFilter">
      <summary v="24Ovzi" i="0">
允许过滤
允许筛选
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.AutoCompleteOptions">
      <summary v="13tbuq" i="0">
列表对象集合
列出对象集合
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.BoundaryAdjustMode">
      <summary v="KChSv" i="0">
覆盖调整策略 (例如，当浏览器调整大小时)。检查
枚举的细节。
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.CompareWith">
      <summary v="3JD1Kz" i="0">
对比，用于两个对象比较是否相同
对比度，用于比较两个对象是否相同
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.FilterExpression">
      <summary v="3yC7cw" i="0">
过滤表达式
筛选器表达式
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionDataItems">
      <summary v="2DAw7L" i="0">
绑定列表数据项格式的数据源
绑定列表数据项格式的数据源
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionFormat">
      <summary v="3nrqPc" i="0">
格式化选项，可以自定义显示格式
格式选项，您可以自定义显示格式
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionTemplate">
      <summary v="1nOobb" i="0">
选项模板
选项模板
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OverlayTemplate">
      <summary v="4Xek7P" i="0">
所有选项模板
所有选项模板
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.SelectedItem">
      <summary v="1eV7pf" i="0">
选择的项
</summary>
    </member>
    <member name="P:AntDesign.Avatar.Overflow">
      <summary v="XJk6e" i="0">
超过组最大计数
</summary>
    </member>
    <member name="P:AntDesign.BackTop.TargetSelector">
      <summary v="3UmJzr" i="0">
回到顶部的目标控件
</summary>
    </member>
    <member name="P:AntDesign.Badge.ChildContent">
      <summary v="3K0w9c" i="0">
包装这个项目。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Color">
      <summary v="3hwCN6" i="0">
自定义徽章状态点颜色。使用此参数将使徽章成为状态点。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Count">
      <summary v="3xDbds" i="0">
要在徽章中显示的数字
</summary>
    </member>
    <member name="P:AntDesign.Badge.CountTemplate">
      <summary v="3mO9Ri" i="0">
要显示在计数位置的模板
</summary>
    </member>
    <member name="P:AntDesign.Badge.Dot">
      <summary v="2fwY3p" i="0">
是否显示点而不是计数
</summary>
    </member>
    <member name="P:AntDesign.Badge.Offset">
      <summary v="2TKOcL" i="0">
设置徽章点的偏移量，如 (左，上)
</summary>
    </member>
    <member name="P:AntDesign.Badge.OverflowCount">
      <summary v="4wMP5" i="0">
要显示的最大计数
</summary>
    </member>
    <member name="P:AntDesign.Badge.PresetColor">
      <summary v="48RxSA" i="0">
将徽章状态点设置为预设颜色。使用此参数将使徽章成为状态点。
</summary>
    </member>
    <member name="P:AntDesign.Badge.ShowZero">
      <summary v="An9Bu" i="0">
计数为零时是否显示徽章
</summary>
    </member>
    <member name="P:AntDesign.Badge.Size">
      <summary v="2hUVCd" i="0">
徽章的大小
</summary>
    </member>
    <member name="P:AntDesign.Badge.Status">
      <summary v="2SAJpA" i="0">
将标记点设置为状态颜色。使用此参数将使徽章成为状态点。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Text">
      <summary v="mNMHX" i="0">
状态点旁边的显示文本
</summary>
    </member>
    <member name="P:AntDesign.Badge.Title">
      <summary v="GmAt5" i="0">
悬停在徽章上时要显示的文本。默认值为Count的值
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.ChildContent">
      <summary v="3K0w9c" i="0">
包装这个项目。
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Color">
      <summary v="45tQm" i="0">
自定义功能区颜色
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Placement">
      <summary v="1w1VYs" i="0">
设置功能区的位置。
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Text">
      <summary v="2umtFr" i="0">
设置功能区的文本内容。
</summary>
    </member>
    <member name="P:AntDesign.Breadcrumb.Separator">
      <summary v="1HcP2j" i="0">
自定义分隔符
</summary>
    </member>
    <member name="P:AntDesign.Button.AriaLabel">
      <summary v="3lc7zV" i="0">
设置aria-label属性的值
</summary>
    </member>
    <member name="P:AntDesign.Button.Block">
      <summary v="4dlKNJ" i="0">
使按钮宽度适合其父宽度的选项
</summary>
    </member>
    <member name="P:AntDesign.Button.ChildContent">
      <summary v="2ZM4UH" i="0">
按钮的内容。
</summary>
    </member>
    <member name="P:AntDesign.Button.Color">
      <summary v="Zhn2Z" i="0">
设置按钮的颜色。
</summary>
    </member>
    <member name="P:AntDesign.Button.Danger">
      <summary v="38p6E3" i="0">
设置按钮的危险状态。
</summary>
    </member>
    <member name="P:AntDesign.Button.Disabled">
      <summary v="2k5NmL" i="0">
是否禁用 &ldquo;按钮”。
</summary>
    </member>
    <member name="P:AntDesign.Button.Ghost">
      <summary v="Sd2qi" i="0">
使背景透明并反转文本和边框颜色
</summary>
    </member>
    <member name="P:AntDesign.Button.HtmlType">
      <summary v="RzH3K" i="0">
设置按钮元素的原始html类型。
</summary>
    </member>
    <member name="P:AntDesign.Button.Icon">
      <summary v="WDN78" i="0">
设置按钮的图标组件。
</summary>
    </member>
    <member name="P:AntDesign.Button.Loading">
      <summary v="3cOuxj" i="0">
显示加载指示器。你必须自己写加载逻辑。
</summary>
    </member>
    <member name="P:AntDesign.Button.NoSpanWrap">
      <summary v="4UYg0o" i="0">
不要用 &lt;span&gt; 换行
</summary>
    </member>
    <member name="P:AntDesign.Button.OnClick">
      <summary v="2T2oFB" i="0">
单击 &ldquo;按钮” 时回调
</summary>
    </member>
    <member name="P:AntDesign.Button.OnClickStopPropagation">
      <summary v="QjNIe" i="0">
单击按钮时不传播事件。
</summary>
    </member>
    <member name="P:AntDesign.Button.Shape">
      <summary v="4PnLWH" i="0">
可以设置按钮形状: 'circle' | 'round' 或 'null' (默认为矩形)。
</summary>
    </member>
    <member name="P:AntDesign.Button.Size">
      <summary v="P6T6U" i="0">
设置按钮的大小。
</summary>
    </member>
    <member name="P:AntDesign.Button.Type">
      <summary v="V9Agx" i="0">
按钮的类型。
</summary>
    </member>
    <member name="P:AntDesign.Carousel.Autoplay">
      <summary v="4Zlm4r" i="0">
是否自动滚动
</summary>
    </member>
    <member name="P:AntDesign.Carousel.DotPosition">
      <summary v="44UFvq" i="0">
点的位置，可以是顶部，底部，左侧或右侧， <see cref="T:AntDesign.CarouselDotPosition" /></summary>
    </member>
    <member name="P:AntDesign.Carousel.Effect">
      <summary v="0D1WU" i="0">
过渡效应， <see cref="T:AntDesign.CarouselEffect" /></summary>
    </member>
    <member name="P:AntDesign.Cascader.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
覆盖调整策略 (例如，当浏览器调整大小发生时)
</summary>
    </member>
    <member name="P:AntDesign.Cascader.OnChange">
      <summary v="4P1mUg" i="0">
请改用SelectedNodesChanged。
</summary>
    </member>
    <member name="P:AntDesign.CloseEventArgs`1.Cancel">
      <summary v="1g27YO" i="0">
如果为true，将阻止组件关闭
</summary>
    </member>
    <member name="P:AntDesign.Collapse.Animation">
      <summary v="4N3BlR" i="0">
是否启用展开/折叠动画
</summary>
    </member>
    <member name="P:AntDesign.Column`1.Filtered">
      <summary v="2XyWA9" i="0">
是否过滤数据源。当它为true时，过滤器图标将被激活。
</summary>
    </member>
    <member name="P:AntDesign.Column`1.OnFilter">
      <summary v="4e8Sfq" i="0">
确定筛选时是否显示行的函数
<para>
参数1: 筛选项的值
</para><para>
参数2: 列的值
</para></summary>
    </member>
    <member name="P:AntDesign.Confirm.Config">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Confirm.ConfirmRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Confirm.OnRemove">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button1Props">
      <summary v="3uYyxi" i="0">
LTR布局中最左边的按钮属性
</summary>
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button2Props">
      <summary v="22oJ1V" i="0">
LTR布局中的辅助按钮属性
</summary>
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button3Props">
      <summary v="4QlFFO" i="0">
LTR布局中的第三个按钮属性
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.AbortText">
      <summary v="4dymfT" i="0">
中止按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.CancelText">
      <summary v="3YxACC" i="0">
&ldquo;取消” 按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.IgnoreText">
      <summary v="4CzbV2" i="0">
忽略按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.NoText">
      <summary v="1MTUhf" i="0">
无按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.OkText">
      <summary v="1kbJyX" i="0">
好按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.RetryText">
      <summary v="3UaGPH" i="0">
&ldquo;重试” 按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.YesText">
      <summary v="eXHQf" i="0">
&ldquo;是” 按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.AutoFocusButton">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button1Props">
      <summary v="3zpJsY" i="0">
LTR布局中最左边的按钮
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button1Text">
      <summary v="QZq7a" i="0">
LTR布局中最左边的按钮，它将覆盖ConfirmLocale
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button2Props">
      <summary v="2XllId" i="0">
左边的第二个按钮位于LTR布局中
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button2Text">
      <summary v="2jO8Xs" i="0">
左边的第二个按钮在LTR布局中，它将覆盖ConfirmLocale
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button3Props">
      <summary v="twE2H" i="0">
LTR布局中最右边的按钮
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button3Text">
      <summary v="Y306A" i="0">
LTR布局中最右边的按钮，它将覆盖ConfirmLocale
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.CancelButtonProps">
      <summary v="3bEw4J" i="0">
好-取消确认对话框的取消按钮道具。它相当于Button2Props。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.CancelText">
      <summary v="1TKAGv" i="0">
为左边的第二个按钮设置取消按钮内容: 取消或没有按钮，它将覆盖ConfirmLocale
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.ClassName">
      <summary v="4ZPZXD" i="0">
&ldquo;.ant-modal” 元素的类名
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Content">
      <summary v="LVRKT" i="0">
ChildContent
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn1Text">
      <summary v="q3Wg3" i="0">
好
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn2Text">
      <summary v="1G3tB3" i="0">
取消
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn3Text">
      <summary v="3tdu1K" i="0">
忽略
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Icon">
      <summary v="34Ek9o" i="0">
&ldquo;确认左上方” 图标
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Locale">
      <summary v="4ZCiPk" i="0">
确认区域设置
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkButtonProps">
      <summary v="4fyyWA" i="0">
好-取消确认对话框的好按钮道具。它相当于Button1Props。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkCancel">
      <summary v="3FnioJ" i="0">
显示好的取消按钮-取消确认对话框
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkText">
      <summary v="1UJ85J" i="0">
为最左边的按钮设置好按钮内容: 好或是按钮，它将覆盖ConfirmLocale
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkType">
      <summary v="hftSf" i="0">
为最左边的按钮设置好按钮类型: 好或是按钮
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OnCancel">
      <summary v="297oJB" i="0">
对于好-取消确认对话框，取消按钮单击回调。
它仅在ModalService模式创建的Confirm中触发
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OnOk">
      <summary v="WcOPM" i="0">
对于好-取消确认对话框，好按钮单击回调。
它仅在ModalService模式创建的Confirm中触发
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Style">
      <summary v="4Bzv48" i="0">
。蚂蚁模态元素的风格
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmRef.Config">
      <summary v="1kUbEo" i="0">
确认对话框选项
</summary>
    </member>
    <member name="P:AntDesign.ConfirmRef.Service">
      <summary v="33W2aX" i="0">
ModalService
</summary>
    </member>
    <member name="P:AntDesign.ConfirmRef`1.OnCancel">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.ConfirmRef`1.OnOk">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.DatePickerBase`1.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
覆盖调整策略 (例如，当浏览器调整大小发生时)
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.ChangeOnClose">
      <summary v="2QN4Qc" i="0">
保存模糊后的输入值
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.IsNullable">
      <summary v="1y4yhm" i="0">
如果TValue是可以为nullable的类型，则存储信息。
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.OnClear">
      <summary v="2qqn9J" i="0">
在单击 &ldquo;清除” 按钮时调用。
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.Placement">
      <summary v="12BNeH" i="0">
选择框弹出的位置
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.CalendarDateRender">
      <summary v="3GeJLc" i="0">
对于Calendar.DateCellRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.CalendarMonthCellRender">
      <summary v="1b4EGp" i="0">
对于Calendar.MonthCellRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.DateRender">
      <summary v="1faJpx" i="0">
对于Calendar.DateFullCellRender、DatePicker.DateRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.IsShowTime">
      <summary v="3q0ltB" i="0">
仅由DatePickerWithTimePanel使用
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.MonthCellRender">
      <summary v="1rnJ5M" i="0">
对于日历.MonthFullCellRender、DatePicker.MonthCellRender
</summary>
    </member>
    <member name="P:AntDesign.Dialog.SentinelStart">
      <summary v="1bBGgs" i="0">
Tab start控件id
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.BodyStyle">
      <summary v="Bh4MH" i="0">
ant-modal-body风格
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ChildContent">
      <summary v="LVRKT" i="0">
ChildContent
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ClassName">
      <summary v="4ZPZXD" i="0">
&ldquo;.ant-modal” 元素的类名
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Closable">
      <summary v="122WS7" i="0">
显示ant-modal-closer
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.CloseIcon">
      <summary v="1Bc5mm" i="0">
更接近的图标RenderFragment，默认值为 &ldquo;X”
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ConfirmLoading">
      <summary v="3IUGTG" i="0">
是否为好按钮应用加载视觉效果
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DefaultMaximized">
      <summary v="3BcFs7" i="0">
在组件初始化期间最大化对话框，它将忽略可最大化的值。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DestroyOnClose">
      <summary v="45nYFl" i="0">
模态关闭后是否从DOM中删除模态
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Draggable">
      <summary v="3zmBrO" i="0">
可拖动模态
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DragInViewport">
      <summary v="4eoCF0" i="0">
仅在视口内拖放
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Footer">
      <summary v="3C0yk" i="0">
模态页脚
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ForceRender">
      <summary v="KgRwM" i="0">
是否在打开之前强制渲染模态dom。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Header">
      <summary v="2e3Pxq" i="0">
模态页眉
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.MaxBodyHeight">
      <summary v="2FuBJq" i="0">
最大模态车身内容高度
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Maximizable">
      <summary v="4CJFl8" i="0">
显示模式最大化按钮
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
模式处于正常状态时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnCancel">
      <summary v="297oJB" i="0">
对于好-取消确认对话框，取消按钮单击回调。
它仅在ModalService模式创建的Confirm中触发
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnClosed">
      <summary v="2jjyi0" i="0">
对话框关闭后触发
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnOk">
      <summary v="WcOPM" i="0">
对于好-取消确认对话框，好按钮单击回调。
它仅在ModalService模式创建的Confirm中触发
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Resizable">
      <summary v="1COtwc" i="0">
可调整大小 (仅水平方向)
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
模式最大化时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.WrapClassName">
      <summary v="3xRJ9X" i="0">
模态对话框的容器的类名
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.CancelButtonProps">
      <summary v="2Vf3Gr" i="0">
取消按钮的道具
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.CancelText">
      <summary v="3qDtWd" i="0">
模态默认页脚取消文本
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Centered">
      <summary v="1nfblX" i="0">
是否居中显示
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.GetContainer">
      <summary v="1e0xvG" i="0">
获取或设置模态父DOM
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Keyboard">
      <summary v="4DS9c2" i="0">
是否支持按esc键关闭
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Mask">
      <summary v="4N1u35" i="0">
是否显示蒙版
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.MaskClosable">
      <summary v="1DBAFK" i="0">
单击蒙版 (模态以外的区域) 时是否关闭模态对话框
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.MaskStyle">
      <summary v="vgNzt" i="0">
对话框的蒙版元素的样式
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkButtonProps">
      <summary v="3Ndw8d" i="0">
好按钮的道具
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkText">
      <summary v="2IMgZI" i="0">
好按钮的文本
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkType">
      <summary v="1XT62s" i="0">
好按钮的按钮类型
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.PrefixCls">
      <summary v="3GXzUH" i="0">
类名前缀
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Rtl">
      <summary v="MHb3Z" i="0">
是RTL
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Title">
      <summary v="1gdKE7" i="0">
模态对话框的字符串标题
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.TitleTemplate">
      <summary v="3OT4NB" i="0">
模式对话框的标题RenderFragment
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Width">
      <summary v="7XF2B" i="0">
模式对话框的宽度
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.ZIndex">
      <summary v="10GCuH" i="0">
模态的z-index
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.ChildContent">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.Config">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.Dialog">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.OnAfterHide">
      <summary v="a7xve" i="0">
当OnAfterRenderAsync方法上的visible为false时触发
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.OnAfterShow">
      <summary v="1VqOVh" i="0">
当OnAfterRenderAsync方法上的visible为true时触发
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.OnBeforeDestroy">
      <summary v="1w3viE" i="0">
在从DOM树中销毁组件之前。您可以通过设置取消销毁CancelEventArgs.cancel = true
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Divider.Orientation">
      <summary v="2K2sRS" i="0">
'左' | '右' | '中心'
</summary>
    </member>
    <member name="P:AntDesign.Divider.Type">
      <summary v="2qbWzY" i="0">
'水平' | '垂直'
</summary>
    </member>
    <member name="P:AntDesign.Drawer.BodyStyle">
      <summary v="1sASnm" i="0">
        <para>
抽屉体样式
</para>
        <para>
模态车身元素的车身样式。如高度、填充等。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Closable">
      <summary v="1fIsaV" i="0">
        <para>
是否显示右上角的关闭按钮
</para>
        <para>
关闭 (x) 按钮是否在抽屉对话框的右上角可见。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.HeaderStyle">
      <summary v="1Bz9Hy" i="0">
        <para>
抽屉页眉抽屉头
</para>
        <para>
模态标头元素的标头样式。如高度、填充等。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Height">
      <summary v="1VGvyG" i="0">
        <para>
高度，仅当<see cref="P:AntDesign.Drawer.Placement" />时生效为 &ldquo;顶部” 或 &ldquo;底部”
</para>
        <para>
抽屉对话框的高度，只有当放置是 '顶部' 或 '底部'。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Keyboard">
      <summary v="pHsEM" i="0">
        <para>
是否支持键盘esc关闭
</para>
        <para>
是否支持键盘esc off
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Mask">
      <summary v="31se3b" i="0">
        <para>
是否显示蒙层
</para>
        <para>
是否显示面具。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.MaskClosable">
      <summary v="41uooW" i="0">
        <para>
点击蒙层是否允许关闭
</para>
        <para>
点击蒙版 (抽屉外的区域) 关闭或不关闭抽屉。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.MaskStyle">
      <summary v="1dtjUI" i="0">
        <para>
蒙层样式
</para>
        <para>
抽屉面具元素的样式。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetTransform">
      <summary v="1ovClK" i="0">
设置抽屉是否显示，以及显示时候的位置偏移
</summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetX">
      <summary v="4SM4Ck" i="0">
        <para>
X轴方向的偏移量，只在方向为 &ldquo;左” 或 &ldquo;右” 时生效。
</para>
        <para>
X坐标偏移 (px)，只有当放置是 &ldquo;左” 或 &ldquo;右”。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetY">
      <summary v="2jVNIe" i="0">
        <para>
Y轴方向的偏移量，只在方向为 &ldquo;顶部” 或 &ldquo;底部” 时生效
</para>
        <para>
Y坐标偏移 (px)，仅当放置为 &ldquo;顶部” 或 &ldquo;底部” 时。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OnClose">
      <summary v="1HSpIg" i="0">
        <para>
在关闭前的回调事件，应当在设置为OnClose将<see cref="P:AntDesign.Drawer.Visible" />false
</para>
        <para>
指定当用户单击 &ldquo;遮罩” 、 &ldquo;关闭” 按钮或 &ldquo;取消” 按钮时将调用的回调。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OnOpen">
      <summary v="4aE0BV" i="0">
        <para>
在抽屉打开前的回调事件
</para>
        <para>
指定将在显示抽屉之前调用的回调
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Placement">
      <summary v="2FjAtl" i="0">
        <para>
抽屉的位置，字符串，&ldquo;左” | &ldquo;右” | &ldquo;顶部” | &ldquo;底部”
</para>
        <para>
抽屉的位置，选项可以是左，上，右，下
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Title">
      <summary v="2uiszR" i="0">
        <para>
标题
</para>
        <para>
抽屉的标题。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Transform">
      <summary v="oxkit" i="0">
设置抽屉是否隐藏，以及隐藏时候的位置偏移
</summary>
    </member>
    <member name="P:AntDesign.Drawer.Visible">
      <summary v="4Gf60Q" i="0">
        <para>
抽屉是否可见
</para>
        <para>
抽屉对话框是否可见。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.VisibleChanged">
      <summary v="Fls9t" i="0">
Visible上的EventCallback触发器已更改。
</summary>
    </member>
    <member name="P:AntDesign.Drawer.Width">
      <summary v="1CSOF0" i="0">
        <para>
宽度，仅当<see cref="P:AntDesign.Drawer.Placement" />时生效为 &ldquo;左” 或 &ldquo;右”
</para>
        <para>
抽屉对话框的宽度，只有当放置是 &ldquo;左” 或 &ldquo;右”。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.WrapClassName">
      <summary v="tZAG7" i="0">
        <para>
抽屉对话框外层容器的类名
</para>
        <para>
抽屉对话框的容器的类名。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.ZIndex">
      <summary v="3TOr6I" i="0">
        <para>
设置抽屉的z-index
</para>
        <para>
抽屉的z-index。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.DrawerOpenEventArgs.Cancel">
      <summary v="3EbA1B" i="0">
获取或设置一个值，该值指示是否应取消事件。
返回结果: 如果应取消事件为true; 否则为为false。
获取或设置一个值，该值指示是否应取消事件。
返回结果: 如果应该取消事件，则为true; 否则为false。
</summary>
    </member>
    <member name="P:AntDesign.DrawerOptions.Placement">
      <summary v="434MBO" i="0">
"左" | "右" | "上" | "下"
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Block">
      <summary v="4dlKNJ" i="0">
使按钮宽度适合其父宽度的选项
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsClass">
      <summary v="2JSYNV" i="0">
允许将每个按钮的css类设置为相同的字符串
或分开。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsRender">
      <summary v="2CfA26" i="0">
完全可定制的按钮。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsStyle">
      <summary v="3pYu7U" i="0">
允许将每个按钮的样式设置为相同的字符串
或分开。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Danger">
      <summary v="EU9VT" i="0">
设置按钮的危险状态
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Ghost">
      <summary v="x4g06" i="0">
用于背景复杂的场合，通常是主页。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Icon">
      <summary v="3hn7FB" i="0">
将在右侧呈现的图标
按钮。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Loading">
      <summary v="3zCufH" i="0">
指示是否要包括加载图标。
如果设置为true，则下拉列表将不处于活动状态。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Size">
      <summary v="qmBSM" i="0">
按钮大小。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Type">
      <summary v="485Sk2" i="0">
允许将每个按钮的类型设置为相同的字符串
或分开。使用AntDesign.ButtonType帮助器类。
</summary>
    </member>
    <member name="P:AntDesign.FeedbackComponent`1.FeedbackRef">
      <summary v="11Cl1m" i="0">
允许您从外部传入模板的选项
</summary>
    </member>
    <member name="P:AntDesign.FeedbackComponent`1.OkCancelRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackComponent`2.OkCancelRefWithResult">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.AntDesign#IFeedbackRef#ModalTemplate">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.OnClose">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.OnOpen">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnCancel">
      <summary v="uSJz1" i="0">
当取消按钮或关闭单击时调用
</summary>
    </member>
    <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnOk">
      <summary v="xi0GX" i="0">
单击好按钮时调用
</summary>
    </member>
    <member name="P:AntDesign.Flex.Align">
      <summary v="2At4GH" i="0">
设置元素在交叉轴方向上的对齐方式
参考align-items https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
</summary>
    </member>
    <member name="P:AntDesign.Flex.Component">
      <summary v="243oNo" i="0">
自定义元素类型
</summary>
    </member>
    <member name="P:AntDesign.Flex.FlexCss">
      <summary v="F363V" i="0">
flex CSS速记属性
参考flex https://developer.mozilla.org/en-US/docs/Web/CSS/flex
</summary>
    </member>
    <member name="P:AntDesign.Flex.Gap">
      <summary v="Uut0G" i="0">
设置网格之间的间隙
小 | 中 | 大 | 字符串 | 数字
</summary>
    </member>
    <member name="P:AntDesign.Flex.Justify">
      <summary v="3zFpKI" i="0">
设置元素在主轴方向上的对齐方式
参考justify-content https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
</summary>
    </member>
    <member name="P:AntDesign.Flex.Vertical">
      <summary v="rxl5t" i="0">
是flex的垂直方向，请使用flex-方向: 列
</summary>
    </member>
    <member name="P:AntDesign.Flex.Wrap">
      <summary v="rE4AA" i="0">
设置元素是显示在单行中还是显示在多行中
参考flex-wrap:https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Autocomplete">
      <summary v="2cp7Sy" i="0">
默认情况下，输入元素是否可以由浏览器自动完成其值
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Enhance">
      <summary v="vrllB" i="0">
如果启用，则在不完全重新加载页面的情况下执行表单提交。这等同于向表单添加数据增强。
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Method">
      <summary v="36C0mf" i="0">
用于提交表单的Http方法
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Name">
      <summary v="1i6Jp4" i="0">
获取或设置窗体处理程序名称。这是将其发布到服务器端端点所必需的。
或使用从<see cref="T:AntDesign.FormProviderFinishEventArgs" />获取表单实例。
</summary>
    </member>
    <member name="P:AntDesign.Form`1.RequiredMark">
      <summary v="0PrxO" i="0">
更改必需/可选字段标签在窗体上的显示方式。
<list type="bullet"><item>必填-将标记必填字段</item><item>可选-将标记可选字段</item><item>无-将不标记任何字段，无论是必需的/可选的</item></list></summary>
    </member>
    <member name="P:AntDesign.Form`1.ValidateOnChange">
      <summary v="4Lbt9x" i="0">
组件值更改时启用验证
</summary>
    </member>
    <member name="P:AntDesign.FormItem.LabelStyle">
      <summary v="VhFGJ" i="0">
将仅应用于<label />element的样式。
如果设置了LabelTemplate，则不会应用。
</summary>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.Definitions">
      <summary v="1ORrMe" i="0">
定义每个列的操作
</summary>
      <param name="propertyName" v="3HDKAv" i="0">绑定列的属性的名称。</param>
      <param name="column" v="3n42MC" i="0">列实例，您需要显式强制转换为具体的列类型。</param>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.HideColumnsByName">
      <summary v="Ree44" i="0">
按属性名称隐藏列。
</summary>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.Range">
      <summary v="3qtd4o" i="0">
指定需要显示的列的范围。
</summary>
    </member>
    <member name="P:AntDesign.Icon.Theme">
      <summary v="3RjsZn" i="0">
'fill' | 'outline' | 'twotone';
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.ModalTemplate">
      <summary v="BHg9M" i="0">
获取反馈内部组件的事件
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.OnClose">
      <summary v="2JaQDk" i="0">
在反馈关闭时
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.OnOpen">
      <summary v="49INqh" i="0">
在反馈打开时
</summary>
    </member>
    <member name="P:AntDesign.IForm.EditContext">
      <summary v="z1gfH" i="0">
从表单中获取当前的EditContext。
</summary>
    </member>
    <member name="P:AntDesign.IForm.IsModified">
      <summary v="4RJ8hI" i="0">
表单是否已修改。
</summary>
    </member>
    <member name="P:AntDesign.IForm.Model">
      <summary v="kFSC0" i="0">
窗体绑定到的数据对象。
</summary>
    </member>
    <member name="P:AntDesign.IForm.Name">
      <summary v="zR1Ov" i="0">
窗体的名称。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AddOnAfter">
      <summary v="8vf60" i="0">
在输入字段之后 (右侧) 显示的标签文本。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AddOnBefore">
      <summary v="36H0rJ" i="0">
显示在输入字段之前 (左侧) 的标签文本。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AllowClear">
      <summary v="gEOSA" i="0">
允许删除带有清晰图标的输入内容
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AutoComplete">
      <summary v="1aFWnI" i="0">
控制输入HTML元素的autocomplete特性。
默认值 = true
</summary>
    </member>
    <member name="P:AntDesign.Input`1.BindOnInput">
      <summary v="2efoKI" i="0">
是否更改输入值
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Bordered">
      <summary v="2zghRL" i="0">
是否有边框样式
</summary>
    </member>
    <member name="P:AntDesign.Input`1.DebounceMilliseconds">
      <summary v="3QPF7H" i="0">
延迟KeyUp事件的处理，直到用户停止
键入预定的时间。默认值为250毫秒。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.DefaultValue">
      <summary v="1t7Dcf" i="0">
初始输入内容
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Disabled">
      <summary v="2pb5l" i="0">
是否禁用输入。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.InputElementSuffixClass">
      <summary v="2XanWf" i="0">
将添加到输入元素类的Css类
作为最后一个类条目。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.MaxLength">
      <summary v="lftDP" i="0">
最大长度
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnBlur">
      <summary v="ZLSVg" i="0">
输入失去焦点时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnChange">
      <summary v="ptUEL" i="0">
内容更改时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnClear">
      <summary v="3PGUwN" i="0">
通过单击 &ldquo;ClearIcon” 清除内容时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnFocus">
      <summary v="44qPny" i="0">
输入接收焦点时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnInput">
      <summary v="2OIWbo" i="0">
输入值时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnkeyDown">
      <summary v="3ksyLG" i="0">
按下键时回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnkeyUp">
      <summary v="2t1JgE" i="0">
释放键时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnMouseUp">
      <summary v="1ZcYJf" i="0">
释放鼠标按钮时的回调
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnPressEnter">
      <summary v="1KYPr0" i="0">
回车键时触发的回调函数
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Placeholder">
      <summary v="4Bbqr0" i="0">
提供描述输入字段的预期值的提示信息
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Prefix">
      <summary v="1gKiV2" i="0">
输入的前缀图标。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.ReadOnly">
      <summary v="5klsi" i="0">
当存在时，它指定输入字段是只读的。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.StopPropagation">
      <summary v="35yoCv" i="0">
控制onclick和模糊事件传播。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Suffix">
      <summary v="e99Ci" i="0">
输入的后缀图标。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Type">
      <summary v="31w74n" i="0">
输入的类型，请参阅: MDN (使用 &ldquo;input.Textara” 而不是type = &ldquo;textara”)
</summary>
    </member>
    <member name="P:AntDesign.Input`1.WrapperStyle">
      <summary v="2dMr07" i="0">
设置包装器的CSS样式。当组件具有可见: 前缀/后缀时使用
或具有参数集<seealso cref="P:AntDesign.Input`1.AllowClear" />或组件: <see cref="T:AntDesign.InputPassword" />
还有 <see cref="T:AntDesign.Search" />.在这些情况下，使用html span元素
来包装html input元素。
<seealso cref="P:AntDesign.Input`1.WrapperStyle" />用于span元素。
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.ChildContent">
      <summary v="42rJBC" i="0">
由InputGroup包装的内容。
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.Compact">
      <summary v="4LIr5D" i="0">
是否使用紧凑样式
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.Size">
      <summary v="46I7pX" i="0">
InputGroup的大小指定包含的输入字段的大小。
可用: 大默认小
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.IconRender">
      <summary v="4TMYeJ" i="0">
自定义图标渲染
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.ShowPassword">
      <summary v="2B8kH0" i="0">
是否显示密码
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.VisibilityToggle">
      <summary v="1v25GF" i="0">
是否显示切换按钮
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.HiddenMode">
      <summary v="3QUJQe" i="0">
默认情况下，叠加不呈现其内容，如果叠加尚未
激活 (至少显示一次)。设置HiddenMode = true将
完成渲染过程。
用例: 使用<see cref="T:AntDesign.SimpleSelectOption" />或<see cref="T:AntDesign.SelectOption`2" />时选择组件
需要HiddenMode = true，因此select选项被初始化，并且
潜在的默认值可以正确呈现。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.HorizontalOffset">
      <summary v="3vWYjR" i="0">
触发器和覆盖之间的水平偏移，默认值为4
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.ParentTrigger">
      <summary v="48SclE" i="0">
在嵌套覆盖中使用 (例如菜单-&gt; 子菜单)
触发器是另一个叠加层。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.Trigger">
      <summary v="4bvUky" i="0">
将触发叠加显示的组件。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.VerticalOffset">
      <summary v="1HnpzC" i="0">
触发器和覆盖之间的垂直偏移，默认值为4
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.BoundaryAdjustMode">
      <summary v="KChSv" i="0">
覆盖调整策略 (例如，当浏览器调整大小时)。检查
枚举的细节。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.ChildContent">
      <summary v="1gMxc" i="0">
触发器 (链接、按钮等)
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.ComplexAutoCloseAndVisible">
      <summary v="3UGtkY" i="0">
自动关闭功能和可见参数同时生效
自动关闭和可视控制关闭
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Disabled">
      <summary v="2QRQsZ" i="0">
是否禁用触发器。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.HiddenMode">
      <summary v="wznUH" i="0">
属性转发到覆盖组件。查阅覆盖图
属性以获得更详细的解释。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.InlineFlexMode">
      <summary v="1XN23m" i="0">
(未在未绑定中使用) 将包装div样式设置为 &ldquo;display: inline-flex;”。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.IsButton">
      <summary v="25Xeqt" i="0">
行为像一个按钮: 点击时调用OnClick
(除非OnClickDiv被覆盖并且不调用base)。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnClick">
      <summary v="3d74MK" i="0">
单击triggger时的回调
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMaskClick">
      <summary v="ikdSq" i="0">
回调-等效于触发触发器上的OnMouseUp事件。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseEnter">
      <summary v="35YiFL" i="0">
当鼠标进入触发器边界时回调。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseLeave">
      <summary v="1VUc5I" i="0">
鼠标离开触发器边界时的回调。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnOverlayHiding">
      <summary v="24gkPj" i="0">
覆盖隐藏时的回调。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnVisibleChange">
      <summary v="3buQek" i="0">
覆盖可见性发生变化时的回调。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Overlay">
      <summary v="2RFxLE" i="0">
覆盖内容 (触发器激活后将呈现的内容)
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayClassName">
      <summary v="3QEUgi" i="0">
覆盖容器自定义css类。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayEnterCls">
      <summary v="2LgbEv" i="0">
显示叠加时添加到叠加的Css类。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayHiddenCls">
      <summary v="12iLR6" i="0">
当覆盖被隐藏时，Css类被添加到覆盖。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayLeaveCls">
      <summary v="1PwGmh" i="0">
当overlay隐藏时添加到overlay的Css类。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayStyle">
      <summary v="2XefjF" i="0">
将添加到覆盖div的Css样式。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.PlacementCls">
      <summary v="WTn3s" i="0">
覆盖基于 'Placement' 参数的默认放置类。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.PopupContainerSelector">
      <summary v="2eHWNH" i="0">
定义什么将成为覆盖的容器。
示例用例: 当覆盖必须包含在
可滚动区域。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Trigger">
      <summary v="40VgVu" i="0">
触发模式。通过传递一个数组可以是多个。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.TriggerReference">
      <summary v="1DTqfD" i="0">
手动将参考设置为触发元素。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Unbound">
      <summary v="2o8VWA" i="0">
设置了ElementReference以避免包装div的ChildElement。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Visible">
      <summary v="18BKHv" i="0">
切换覆盖可行性。
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef.OnCancel">
      <summary v="3A1HW6" i="0">
当取消按钮或关闭单击时调用
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef.OnOk">
      <summary v="pmyYN" i="0">
好按钮单击时调用
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef`1.OnCancel">
      <summary v="uSJz1" i="0">
当取消按钮或关闭单击时调用
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef`1.OnOk">
      <summary v="xi0GX" i="0">
单击好按钮时调用
</summary>
    </member>
    <member name="P:AntDesign.Mentions.LoadOptions">
      <summary v="27wMxz" i="0">
当用户在 @ 符号后键入值时，动态加载提及选项以供显示
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.ActiveClass">
      <summary v="2vOtf4" i="0">
获取或设置应用于NavLink的CSS类名称，当
当前路由与NavLink href匹配。
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.ChildContent">
      <summary v="23NMCf" i="0">
获取或设置组件的子内容。
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.Match">
      <summary v="3aS9Lu" i="0">
获取或设置表示URL匹配行为的值。
</summary>
    </member>
    <member name="P:AntDesign.Modal.AfterClose">
      <summary v="22x97b" i="0">
指定当模态关闭时将被调用的函数
</summary>
    </member>
    <member name="P:AntDesign.Modal.BodyStyle">
      <summary v="20QVv7" i="0">
模态车身元素的车身样式。如高度，填充等
</summary>
    </member>
    <member name="P:AntDesign.Modal.CancelButtonProps">
      <summary v="43SP5U" i="0">
取消按钮道具
</summary>
    </member>
    <member name="P:AntDesign.Modal.CancelText">
      <summary v="36siBe" i="0">
取消按钮的文本或RenderFragment，它将覆盖ModalLocale
</summary>
    </member>
    <member name="P:AntDesign.Modal.Centered">
      <summary v="4ae1Lx" i="0">
居中
</summary>
    </member>
    <member name="P:AntDesign.Modal.ChildContent">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Modal.Closable">
      <summary v="6Ku7u" i="0">
关闭 (x) 按钮是否在模式对话框的右上角可见
</summary>
    </member>
    <member name="P:AntDesign.Modal.CloseIcon">
      <summary v="1Bc5mm" i="0">
更接近的图标RenderFragment，默认值为 &ldquo;X”
</summary>
    </member>
    <member name="P:AntDesign.Modal.ConfirmLoading">
      <summary v="3IUGTG" i="0">
是否为好按钮应用加载视觉效果
</summary>
    </member>
    <member name="P:AntDesign.Modal.DefaultMaximized">
      <summary v="iMY02" i="0">
在组件初始化期间最大化模态，它将忽略可最大化的值。
</summary>
    </member>
    <member name="P:AntDesign.Modal.DestroyOnClose">
      <summary v="eSgaw" i="0">
是否卸载onClose上的子组件，默认为false
</summary>
    </member>
    <member name="P:AntDesign.Modal.Draggable">
      <summary v="2CuRqx" i="0">
是否拖动模式对话框
</summary>
    </member>
    <member name="P:AntDesign.Modal.DragInViewport">
      <summary v="4eoCF0" i="0">
仅在视口内拖放
</summary>
    </member>
    <member name="P:AntDesign.Modal.Footer">
      <summary v="geWVh" i="0">
页脚内容，不需要默认按钮时设置为页脚 = null
</summary>
    </member>
    <member name="P:AntDesign.Modal.ForceRender">
      <summary v="2f0TiM" i="0">
是否在打开之前强制渲染模态dom。
</summary>
    </member>
    <member name="P:AntDesign.Modal.GetContainer">
      <summary v="18bBhe" i="0">
获取或设置模态父DOM，默认值为null: 指定document.body
</summary>
    </member>
    <member name="P:AntDesign.Modal.Header">
      <summary v="2AdhVw" i="0">
标题内容
</summary>
    </member>
    <member name="P:AntDesign.Modal.Keyboard">
      <summary v="4DS9c2" i="0">
是否支持按esc键关闭
</summary>
    </member>
    <member name="P:AntDesign.Modal.Locale">
      <summary v="8rCHK" i="0">
模态区域设置
</summary>
    </member>
    <member name="P:AntDesign.Modal.Mask">
      <summary v="4N1u35" i="0">
是否显示蒙版
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaskClosable">
      <summary v="1DBAFK" i="0">
单击蒙版 (模态以外的区域) 时是否关闭模态对话框
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaskStyle">
      <summary v="37Y5Kb" i="0">
模态的遮罩元素的样式
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaxBodyHeight">
      <summary v="RA58v" i="0">
最大模态内容车身高度
</summary>
    </member>
    <member name="P:AntDesign.Modal.Maximizable">
      <summary v="4CJFl8" i="0">
显示模式最大化按钮
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
模式处于正常状态时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.Modal.ModalRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Modal.OkButtonProps">
      <summary v="y5TMV" i="0">
好按钮道具
</summary>
    </member>
    <member name="P:AntDesign.Modal.OkText">
      <summary v="3XDkqM" i="0">
好按钮的RenderFragment的文本，它将覆盖ModalLocale
</summary>
    </member>
    <member name="P:AntDesign.Modal.OkType">
      <summary v="1XT62s" i="0">
好按钮的按钮类型
</summary>
    </member>
    <member name="P:AntDesign.Modal.OnCancel">
      <summary v="1CxuiP" i="0">
指定当用户单击蒙版，右上角的关闭按钮或取消按钮时将调用的函数
</summary>
    </member>
    <member name="P:AntDesign.Modal.OnOk">
      <summary v="1gOn2R" i="0">
指定当用户单击好按钮时将调用的函数
</summary>
    </member>
    <member name="P:AntDesign.Modal.Resizable">
      <summary v="1COtwc" i="0">
可调整大小 (仅水平方向)
</summary>
    </member>
    <member name="P:AntDesign.Modal.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
模式最大化时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.Modal.Rtl">
      <summary v="MHb3Z" i="0">
是RTL
</summary>
    </member>
    <member name="P:AntDesign.Modal.Title">
      <summary v="1pU6Fn" i="0">
模态对话框的标题。如果<param>TitleTemplate</param> != null， <param>标题</param>不会生效
</summary>
    </member>
    <member name="P:AntDesign.Modal.TitleTemplate">
      <summary v="3xtZMa" i="0">
模态对话框的标题
</summary>
    </member>
    <member name="P:AntDesign.Modal.Visible">
      <summary v="1nqRXC" i="0">
模态对话框是否可见
</summary>
    </member>
    <member name="P:AntDesign.Modal.VisibleChanged">
      <summary v="2xcii5" i="0">
当模式对话框可见或不可见时指定函数调用
</summary>
    </member>
    <member name="P:AntDesign.Modal.Width">
      <summary v="3Ed7Ef" i="0">
模式对话框的宽度，默认值为520
</summary>
    </member>
    <member name="P:AntDesign.Modal.WrapClassName">
      <summary v="3xRJ9X" i="0">
模态对话框的容器的类名
</summary>
    </member>
    <member name="P:AntDesign.Modal.ZIndex">
      <summary v="10GCuH" i="0">
模态的z-index
</summary>
    </member>
    <member name="P:AntDesign.ModalCancelFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalClosingEventArgs.Cancel">
      <summary v="49f55H" i="0">
是否应取消结账。
如果应取消关闭，则设置为true; 默认值为false。
是否应取消关闭模态。
如果应取消关闭，请设置为true; 默认为false。
</summary>
    </member>
    <member name="P:AntDesign.ModalFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalLocale.CancelText">
      <summary v="3YxACC" i="0">
&ldquo;取消” 按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ModalLocale.OkText">
      <summary v="1kbJyX" i="0">
好按钮文本
</summary>
    </member>
    <member name="P:AntDesign.ModalOkFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalOptions.AfterClose">
      <summary v="2jjyi0" i="0">
对话框关闭后触发
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.BodyStyle">
      <summary v="Bh4MH" i="0">
ant-modal-body风格
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Closable">
      <summary v="122WS7" i="0">
显示ant-modal-closer
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.CloseIcon">
      <summary v="1Bc5mm" i="0">
更接近的图标RenderFragment，默认值为 &ldquo;X”
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.ConfirmLoading">
      <summary v="3IUGTG" i="0">
是否为好按钮应用加载视觉效果
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Content">
      <summary v="LVRKT" i="0">
ChildContent
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DefaultMaximized">
      <summary v="iMY02" i="0">
在组件初始化期间最大化模态，它将忽略可最大化的值。
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DestroyOnClose">
      <summary v="45nYFl" i="0">
模态关闭后是否从DOM中删除模态
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Draggable">
      <summary v="3zmBrO" i="0">
可拖动模态
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DragInViewport">
      <summary v="4eoCF0" i="0">
仅在视口内拖放
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Footer">
      <summary v="4GmrOX" i="0">
模态页脚。如果页脚 = = null，对话框将没有页脚
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Maximizable">
      <summary v="4CJFl8" i="0">
显示模式最大化按钮
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
模式处于正常状态时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.OnCancel">
      <summary v="4XxZcU" i="0">
指定当用户单击蒙版，右上角的关闭按钮或取消按钮时将调用的函数。
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.OnOk">
      <summary v="1gOn2R" i="0">
指定当用户单击好按钮时将调用的函数
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Resizable">
      <summary v="2v6bNP" i="0">
可调整大小
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
模式最大化时最大化按钮的图标
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Style">
      <summary v="449EWV" i="0">
蚂蚁模态风格
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalOptions.WrapClassName">
      <summary v="3xRJ9X" i="0">
模态对话框的容器的类名
</summary>
    </member>
    <member name="P:AntDesign.ModalRef`1.OnCancel">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.ModalRef`1.OnOk">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.NotificationConfig.AnimationClass">
      <summary v="jSnlC" i="0">
控制出现与消失的动画
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Btn">
      <summary v="3rMr6n" i="0">
自定义关闭按钮
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.ClassName">
      <summary v="JO5pm" i="0">
自定义CSS类
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.CloseIcon">
      <summary v="3vgdNM" i="0">
自定义关闭图标
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Description">
      <summary v="4XGzTg" i="0">
通知提醒内容，必选，字符串或者RenderFragment
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Duration">
      <summary v="4USzIz" i="0">
自动关闭的延时，单位为秒。默认4.5秒后自动关闭，配置为null则不自动关闭
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Icon">
      <summary v="4Ai0SO" i="0">
自定义图标
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Key">
      <summary v="2OV090" i="0">
当前通知唯一标志
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Message">
      <summary v="419bj1" i="0">
通知提醒标题，必选，字符串或者RenderFragment
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.NotificationType">
      <summary v="1WRYqg" i="0">
通知提醒框左侧的图标类型
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Placement">
      <summary v="1Cg6Tf" i="0">
弹出位置
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Style">
      <summary v="1EFSed" i="0">
自定义内联样式
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Bottom">
      <summary v="4CcfGP" i="0">
消息从底部弹出时，距离底部的位置，单位像素。
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.CloseIcon">
      <summary v="3vgdNM" i="0">
自定义关闭图标
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Duration">
      <summary v="4USzIz" i="0">
自动关闭的延时，单位为秒。默认4.5秒后自动关闭，配置为null则不自动关闭
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Placement">
      <summary v="1Cg6Tf" i="0">
弹出位置
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Rtl">
      <summary v="1mUF1k" i="0">
是否开启RTL模式
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Top">
      <summary v="PvlTX" i="0">
消息从顶部弹出时，距离顶部的位置，单位像素。
</summary>
    </member>
    <member name="P:AntDesign.NotificationRef.Config">
      <summary v="1axnfs" i="0">
通知框的配置
</summary>
    </member>
    <member name="P:AntDesign.Progress.Format">
      <summary v="4Lqn3Z" i="0">
内容的模板函数
</summary>
    </member>
    <member name="P:AntDesign.Progress.GapDegree">
      <summary v="12RNGJ" i="0">
半圆的间隙度，0 ~ 295
</summary>
    </member>
    <member name="P:AntDesign.Progress.GapPosition">
      <summary v="21CHJQ" i="0">
间隙位置，选项: 上下左右
</summary>
    </member>
    <member name="P:AntDesign.Progress.Percent">
      <summary v="3NOeu0" i="0">
设置完成百分比
</summary>
    </member>
    <member name="P:AntDesign.Progress.ShowInfo">
      <summary v="LnI2g" i="0">
是否显示进度值和状态图标
</summary>
    </member>
    <member name="P:AntDesign.Progress.Size">
      <summary v="3T93xE" i="0">
进度大小
</summary>
    </member>
    <member name="P:AntDesign.Progress.Status">
      <summary v="1r9Emr" i="0">
要设置进度的状态，选项: 成功异常正常活动 (仅行)
</summary>
    </member>
    <member name="P:AntDesign.Progress.Steps">
      <summary v="42cdeR" i="0">
总步数
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeColor">
      <summary v="4XWxFu" i="0">
进度条的颜色，传递对象时呈现线性渐变
循环进程的颜色，传递对象时呈现线性渐变
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeLinecap">
      <summary v="3jsLOz" i="0">
设置progress linecap的样式
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeWidth">
      <summary v="4JZZdB" i="0">
设置进度条的宽度，单位: px
设置循环进度的宽度，单位: 画布宽度的百分比
设置仪表板进度的宽度，单位: 画布宽度的百分比
</summary>
    </member>
    <member name="P:AntDesign.Progress.SuccessPercent">
      <summary v="196roM" i="0">
分段成功百分比
</summary>
    </member>
    <member name="P:AntDesign.Progress.TrailColor">
      <summary v="zWVJN" i="0">
未填充部分的颜色
</summary>
    </member>
    <member name="P:AntDesign.Progress.Type">
      <summary v="3E83zd" i="0">
要设置类型，选项: 直线圆操控板
</summary>
    </member>
    <member name="P:AntDesign.Progress.Width">
      <summary v="1IrjNn" i="0">
要设置循环进度的画布宽度，单位: px
设置仪表板进度的画布宽度，单位: px
</summary>
    </member>
    <member name="P:AntDesign.PropertyColumn`2.Property">
      <summary v="24tPyG" i="0">
定义要在此列的单元格中显示的值。
</summary>
    </member>
    <member name="P:AntDesign.RangePicker`1.Value">
      <summary v="yoUC3" i="0">
获取或设置输入的值。这应该与双向绑定一起使用。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.Rate.AllowClear">
      <summary v="31ACLe" i="0">
是否允许再次点击后清除
</summary>
    </member>
    <member name="P:AntDesign.Rate.AllowHalf">
      <summary v="4eosQT" i="0">
是否允许半选
</summary>
    </member>
    <member name="P:AntDesign.Rate.AutoFocus">
      <summary v="3fMFPR" i="0">

</summary>
    </member>
    <member name="P:AntDesign.Rate.Character">
      <summary v="Ria0m" i="0">
自定义字符，星星可以被自定义字符替代
</summary>
    </member>
    <member name="P:AntDesign.Rate.Count">
      <summary v="21NjXr" i="0">
组件要呈现的星星数目
</summary>
    </member>
    <member name="P:AntDesign.Rate.DefaultValue">
      <summary v="35fCJO" i="0">
的，则组件默认含有半星并且允许半星默认当前被选中的星星数量，如果被设置为小数位不为0
</summary>
    </member>
    <member name="P:AntDesign.Rate.Disabled">
      <summary v="mwwY0" i="0">
是否禁止用户交互
</summary>
    </member>
    <member name="P:AntDesign.Rate.Tooltips">
      <summary v="1bbY12" i="0">
自定义每项的提示信息(存储每个子元素的提醒框内容文本)
</summary>
    </member>
    <member name="P:AntDesign.Rate.Value">
      <summary v="3AqHuX" i="0">
当前值 -- 被选中的星星数量
</summary>
    </member>
    <member name="P:AntDesign.RateItemRenderContext.Type">
      <summary v="34NDQy" i="0">
'AntIcon' | '文本'
</summary>
    </member>
    <member name="P:AntDesign.Result.IsShowIcon">
      <summary v="2WCoGi" i="0">
是否显示图标，默认显示
</summary>
    </member>
    <member name="P:AntDesign.Result.Status">
      <summary v="2RoVqZ" i="0">
成功 | 错误 | 信息 | 警告 | 404 | 403 | 500
默认值: info
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Body">
      <summary v="151KL0" i="0">
用于自定义页面内容的模板。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Draggable">
      <summary v="3ONg1t" i="0">
是否可以拖放Tab。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.HidePages">
      <summary v="2DzMAJ" i="0">
是否隐藏页面显示并仅保留标题选项卡。然后，您可以使用<see cref="T:AntDesign.ReusePages" />来显示页面conent。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Locale">
      <summary v="2Y3MCv" i="0">
本地化设置。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.ReuseTabsRouteData">
      <summary v="2MfoI1" i="0">
当前页的路由信息，该页是<see cref="T:Microsoft.AspNetCore.Components.RouteData" />的可序列化版本。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Size">
      <summary v="2haZnj" i="0">
制表符的大小。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.TabPaneClass">
      <summary v="1gD4lo" i="0">
内部选项卡窗格的类名。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabsService.Pages">
      <summary v="1FZzbS" i="0">
当前打开页面的页面信息列表，可用于缓存和恢复
</summary>
    </member>
    <member name="P:AntDesign.Row.Align">
      <summary v="mIvIE" i="0">
'top' | 'middle' | 'bottom'
</summary>
    </member>
    <member name="P:AntDesign.Row.DefaultBreakpoint">
      <summary v="2gg4aQ" i="0">
用于在预渲染期间设置装订线
</summary>
    </member>
    <member name="P:AntDesign.Row.Justify">
      <summary v="Ugi9m" i="0">
'start' | 'end' | 'center' | '空格-around' |' 空格-中间'
</summary>
    </member>
    <member name="P:AntDesign.Search.ClassicSearchIcon">
      <summary v="1cvZKm" i="0">
搜索输入以后缀搜索图标呈现，而不是作为按钮。
EnterButton时将被忽略!= false
</summary>
    </member>
    <member name="P:AntDesign.Search.EnterButton">
      <summary v="3Lcudq" i="0">
输入后是否显示enter按钮。此属性与addonaf后属性冲突
</summary>
    </member>
    <member name="P:AntDesign.Search.Loading">
      <summary v="4HPN9Y" i="0">
带加载的搜索框
</summary>
    </member>
    <member name="P:AntDesign.Search.OnSearch">
      <summary v="2YV1Az" i="0">
当您单击搜索图标，清除图标或按Enter键时触发的回调函数
</summary>
    </member>
    <member name="P:AntDesign.Select.Internal.SelectOptionItem`2.SelectedTagRef">
      <summary v="r6r8j" i="0">
仅由<see cref="T:AntDesign.Select.Internal.SelectContent`2" />使用的ElementRef
对于选定的模式 = 多个和MaxTagCount = 响应
</summary>
    </member>
    <member name="P:AntDesign.Select.Internal.SelectSuffixIcon`2.ShowSearchIcon">
      <summary v="1mzP4W" i="0">
是否在单一模式下显示搜索输入。
</summary>
    </member>
    <member name="P:AntDesign.Select.LabelTemplateItem`2.Ref">
      <summary v="3v0RLn" i="0">
已返回DOM元素的ElementRef引用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.Bordered">
      <summary v="3MXGxp" i="0">
切换边框样式。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DataSource">
      <summary v="3vflFW" i="0">
此组件的数据源。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DataSourceEqualityComparer">
      <summary v="2AEbcd" i="0">
将在数据源更改期间使用的EqualityComparer
检测。如果未设置比较器，则为默认值。Net将是
使用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DefaultActiveFirstOption">
      <summary v="gQ3Lr" i="0">
激活第一个未停用的项目。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DefaultValue">
      <summary v="f4vCE" i="0">
在Mode = default时使用-在初始化期间以及在表单中按下重置按钮时使用该值。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DisabledName">
      <summary v="4Y7Gl5" i="0">
要用作禁用指示器的属性的名称。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DisabledPredicate">
      <summary v="ksaX5" i="0">
指定禁用选项的谓词
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DropdownMatchSelectWidth">
      <summary v="3jo742" i="0">
将匹配淹没宽度:
-for boolean: true-在下拉列表中包含最宽的项目
-对于字符串: 与值 (例如: &ldquo;256px”)
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DropdownMaxWidth">
      <summary v="1LaV7G" i="0">
不允许下拉宽度在这里值 (例如 &ldquo;768px”) 上增长
</summary>
    </member>
    <member name="P:AntDesign.Select`2.EnableVirtualization">
      <summary v="39WGkE" i="0">
无论是否启用虚拟化功能，仅适用于。NET 5及以上
</summary>
    </member>
    <member name="P:AntDesign.Select`2.GroupName">
      <summary v="35WDeN" i="0">
要用作组指示符的属性的名称。
如果设置了该值，则会成组显示条目。
使用其他SortByGroup和SortByLabel。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.IgnoreItemChanges">
      <summary v="419yAi" i="0">
是用来提高速度的。如果您希望更改标签名称，
组名称或禁用的指示器，禁用此属性。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.IsGroupingEnabled">
      <summary v="23rvdX" i="0">
指示是否使用GroupName。当此值为True时，SelectOptions将以组模式呈现。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ItemTemplate">
      <summary v="3q66H2" i="0">
用于自定义项样式。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.LabelProperty">
      <summary v="3Tbo9L" i="0">
指定选项对象中的label属性。如果使用此属性，则不应使用 <see cref="!:LabelName" /></summary>
    </member>
    <member name="P:AntDesign.Select`2.NotFoundContent">
      <summary v="3ITps3" i="0">
指定当没有结果匹配时要显示的内容。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnBlur">
      <summary v="3D7tWb" i="0">
当模糊时调用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnCreateCustomTag">
      <summary v="3KnduO" i="0">
在创建自定义标记时调用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnDataSourceChanged">
      <summary v="3DoqQL" i="0">
当数据源更改时调用。从null到<see cref="T:System.Collections.Generic.IEnumerable`1" />，
从<see cref="T:System.Collections.Generic.IEnumerable`1" />到 <see cref="T:System.Collections.Generic.IEnumerable`1" />
或从<see cref="T:System.Collections.Generic.IEnumerable`1" />到null。
如果<see cref="T:System.Collections.Generic.IEnumerable`1" />中的值发生更改，它不会触发。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnDropdownVisibleChange">
      <summary v="QTkZe" i="0">
当dropdown可见性更改时调用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnSearch">
      <summary v="1JqXvj" i="0">
输入更改时触发的回调函数。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ShowArrowIcon">
      <summary v="3T7UEw" i="0">
是否显示下拉箭头
</summary>
    </member>
    <member name="P:AntDesign.Select`2.TokenSeparators">
      <summary v="2uDnIP" i="0">
定义哪些字符将被视为新创建标记的令牌分隔符。
仅使用键盘创建新标签时非常有用。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.Value">
      <summary v="4UcFXa" i="0">
获取或设置选定的值。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ValueChanged">
      <summary v="1koZkv" i="0">
用于双向绑定。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ValueProperty">
      <summary v="2FBrf9" i="0">
指定选项对象中的value属性。如果使用此属性，则不应使用 <see cref="!:ValueName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AccessKey">
      <summary v="290XqI" i="0">
accesskey全局属性。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ActiveOption">
      <summary v="3ReKb8" i="0">
当前活动 (突出显示) 选项。
它不必等于选定的选项。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AllowClear">
      <summary v="4g3Xf1" i="0">
显示清除按钮。不起作用，如果<see cref="P:AntDesign.AntInputComponentBase`1.Value" />默认类型
也在<see cref="T:AntDesign.SelectOption`2" />列表中，
除非与<see cref="P:AntDesign.SelectBase`2.ValueOnClear" />一起使用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AutoClearSearchValue">
      <summary v="4LMxuO" i="0">
是否在选择项目时清除当前搜索。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
覆盖调整策略 (例如，当浏览器调整大小发生时)
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.CustomTagLabelToValue">
      <summary v="3EMaK3" i="0">
将自定义标记 (字符串) 转换为TItemValue类型。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.DefaultValues">
      <summary v="2J5DPu" i="0">
当Mode = multiple | 标签时使用-在初始化期间以及在表单中按下重置按钮时使用这些值。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Disabled">
      <summary v="2bl4pp" i="0">
选择组件是否已禁用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.DropdownRender">
      <summary v="4Zzqb3" i="0">
自定义下拉内容。上下文是原始内容。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.EnableSearch">
      <summary v="2naqqM" i="0">
指示搜索功能是否处于活动状态。模式标记始终为true。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.HasValue">
      <summary v="4VVb1k" i="0">
确定SelectOptions是否具有任何选定项
</summary>
      <returns v="2R5twB" i="0">如果SelectOptions具有任何选定项，则为true，否则为false</returns>
    </member>
    <member name="P:AntDesign.SelectBase`2.HideSelected">
      <summary v="4AwoTD" i="0">
在选定项目时隐藏选定项目。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.IsSearchEnabled">
      <summary v="2ABzzv" i="0">
返回用户是否可以输入模式来搜索匹配项
</summary>
      <returns v="3ORAAp" i="0">如果已启用搜索，则为true</returns>
    </member>
    <member name="P:AntDesign.SelectBase`2.ItemLabel">
      <summary v="4Yg7SF" i="0">
指定选项对象中的label属性。如果使用此属性，则不应使用 <see cref="P:AntDesign.SelectBase`2.LabelName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ItemValue">
      <summary v="1CAphC" i="0">
指定选项对象中的value属性。如果使用此属性，则不应使用 <see cref="P:AntDesign.SelectBase`2.ValueName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelInValue">
      <summary v="1U3ymK" i="0">
是否在value中嵌入label，将value的格式从TItemValue转换为string (JSON)
例如 {"value": TItemValue，"label": "Label value"}
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelName">
      <summary v="3AwSrr" i="0">
要用于标签的属性的名称。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelTemplate">
      <summary v="hwEOh" i="0">
用于自定义标签样式。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LastValueBeforeReset">
      <summary v="44YdO2" i="0">
当在SelectOptionItems中找不到新设置的值时，将其重置为
默认值。此属性保留重置前的值。可能需要
(例如，当同时设置新值时
由于添加了新的SelectOption，但设置了组件中的值
在创建新的SelectOptionItem之前)。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Loading">
      <summary v="3cOuxj" i="0">
显示加载指示器。你必须自己写加载逻辑。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagCount">
      <summary v="3GSRJr" i="0">
要显示的最大标记数。响应将牺牲渲染性能。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagPlaceholder">
      <summary v="3mQAeT" i="0">
用于隐藏标记的占位符。如果与ResponsiveTag.Responsive一起使用，请实现您自己的处理逻辑。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagTextLength">
      <summary v="3C8N89" i="0">
标签的长度 (字符数)。
仅适用于Mode = "multiple" 或Mode = "tags"
</summary>
      <value>
            The maximum length of the tag text.
            </value>
    </member>
    <member name="P:AntDesign.SelectBase`2.Mode">
      <summary v="3S2B5T" i="0">
设置选择模式-默认 | 多个 | 标签
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnClearSelected">
      <summary v="14UtFb" i="0">
当用户清除选择时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnFocus">
      <summary v="1ERQAl" i="0">
焦点时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnMouseEnter">
      <summary v="46zJaG" i="0">
当鼠标进入时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnMouseLeave">
      <summary v="ninB2" i="0">
当鼠标离开时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnSelectedItemChanged">
      <summary v="2ittuq" i="0">
当选定项更改时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnSelectedItemsChanged">
      <summary v="g9Onl" i="0">
当选定项更改时调用。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Open">
      <summary v="2tPov4" i="0">
控制下拉菜单的打开状态。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Placeholder">
      <summary v="4QgNG1" i="0">
选择的占位符。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.PopupContainerSelector">
      <summary v="2FFcRl" i="0">
使用此来修复覆盖问题，例如 # arec
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.PrefixIcon">
      <summary v="YZqdW" i="0">
自定义前缀图标。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SearchDebounceMilliseconds">
      <summary v="2lpe12" i="0">
延迟搜索输入事件的处理，直到用户停止
键入预定的时间。默认为250毫秒。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SelectOptions">
      <summary v="2msqsT" i="0">
用于手动渲染选择选项。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ShowSearchIcon">
      <summary v="1mzP4W" i="0">
是否在单一模式下显示搜索输入。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortByGroup">
      <summary v="35WDeN" i="0">
要用作组指示符的属性的名称。
如果设置了该值，则会成组显示条目。
使用其他SortByGroup和SortByLabel。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortByLabel">
      <summary v="2TkxTE" i="0">
按标签值对项目进行排序。无 | 升序 | 降序
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortedSelectOptionItems">
      <summary v="2ME8BB" i="0">
SelectOptionItems的排序列表
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SuffixIcon">
      <summary v="20vubH" i="0">
自定义后缀图标。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueChanged">
      <summary v="1koZkv" i="0">
用于双向绑定。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueName">
      <summary v="1eRofc" i="0">
要用于值的属性的名称。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueOnClear">
      <summary v="3t8E6Y" i="0">
当按下清除按钮时，值将设置为
无论在ValueOnClear中设置了什么
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Values">
      <summary v="38zUL6" i="0">
获取或设置选定的值。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValuesChanged">
      <summary v="1koZkv" i="0">
用于双向绑定。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Disabled">
      <summary v="zh3il" i="0">
禁用此选项
仅当直接创建SelectOption时才应使用参数。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Label">
      <summary v="44K7nB" i="0">
选择此选项后选择的标签
仅当直接创建SelectOption时才应使用参数。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Value">
      <summary v="2QHMVs" i="0">
选择此选项后的Select值
仅当直接创建SelectOption时才应使用参数。
</summary>
    </member>
    <member name="P:AntDesign.Sider.Trigger">
      <summary v="1wXYCU" i="0">
当触发器为null时，'OnCollapse' 不会在 'Collapsed' 更改后调用。
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Avatar">
      <summary v="30BLfE" i="0">
是否显示头像占位图
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Paragraph">
      <summary v="4CRksF" i="0">
是否显示段落占位图
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Title">
      <summary v="iORgL" i="0">
是否显示标题占位图
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.DefaultValue">
      <summary v="3Dmrok" i="0">
slider的默认值。当<see cref="P:AntDesign.Slider`1.Range" />为false时，使用number，否则，使用 [number，number]
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Disabled">
      <summary v="vRGcV" i="0">
如果为true，则滑块将不可交互
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Dots">
      <summary v="3aNKAY" i="0">
拇指是否只能在刻度上拖动
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.GetTooltipPopupContainer">
      <summary v="1HMa3g" i="0">
工具提示的DOM容器，默认行为是在body中创建一个div元素。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Included">
      <summary v="2gasHt" i="0">
不为null时<see cref="P:AntDesign.Slider`1.Marks" />生效，true表示包含，false表示协调
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Marks">
      <summary v="3CLKnZ" i="0">
滑块的刻度标记，键的类型必须是数字，并且必须在封闭间隔 [min，max] 中，每个标记都可以声明自己的样式
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Max">
      <summary v="4PpL6k" i="0">
滑块可以滑动到的最大值
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Min">
      <summary v="4F0VRd" i="0">
滑块可以滑动到的最小值
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.OnAfterChange">
      <summary v="pI4j4" i="0">
触发onmouseup时触发。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.OnChange">
      <summary v="2m7PQ6" i="0">
当用户更改滑块的值时触发的回调函数。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.TooltipPlacement">
      <summary v="1muwp0" i="0">
设置工具提示显示位置。参考工具提示
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Value">
      <summary v="yoUC3" i="0">
获取或设置输入的值。这应该与双向绑定一起使用。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.Slider`1.Vertical">
      <summary v="1XK2I0" i="0">
如果为true，滑块将是垂直的。
</summary>
    </member>
    <member name="P:AntDesign.Space.Align">
      <summary v="3RqhIi" i="0">
开始 | 结束 | 中心 | 基线
</summary>
    </member>
    <member name="P:AntDesign.Spin.Size">
      <summary v="78EEm" i="0">
小 | 默认 | 大
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Prefix">
      <summary v="40wKuF" i="0">
设置数值的前缀
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Suffix">
      <summary v="3cvVXk" i="0">
设置数值的后缀
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Title">
      <summary v="6Azy8" i="0">
数值的标题
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Value">
      <summary v="4KtQ9J" i="0">
数值内容
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.ValueStyle">
      <summary v="14cxCL" i="0">
设置数值的样式
</summary>
    </member>
    <member name="P:AntDesign.Switch.Control">
      <summary v="n71vy" i="0">
开关的状态完全取决于用户，不再
根据点击事件自动更改数据。
</summary>
    </member>
    <member name="P:AntDesign.Table`1.DefaultExpandMaxLevel">
      <summary v="1EN01t" i="0">
使用DefaultExpandAllRows时的最大展开级别。
当树记录具有循环引用时，此属性用于避免无限循环。
默认值为4。
</summary>
    </member>
    <member name="P:AntDesign.Table`1.EnableVirtualization">
      <summary v="39WGkE" i="0">
无论是否启用虚拟化功能，仅适用于。NET 5及以上
</summary>
    </member>
    <member name="P:AntDesign.Table`1.PaginationPosition">
      <summary v="hyz7X" i="0">
顶部 | 顶部中心 | 顶部右侧 | 底部左侧 | 底部中心 | 底部右侧
</summary>
    </member>
    <member name="P:AntDesign.Table`1.Resizable">
      <summary v="3IDB7H" i="0">
启用可调整大小的列
</summary>
    </member>
    <member name="P:AntDesign.Table`1.SelectedRows">
      <summary v="2mLBpB" i="0">
跨页选定的行
</summary>
    </member>
    <member name="P:AntDesign.TableModels.RowData`1.Children">
      <summary v="3jUogV" i="0">
保存子行的状态
</summary>
    </member>
    <member name="P:AntDesign.TabPane.ForceRender">
      <summary v="2Cvjf8" i="0">
强制呈现选项卡中的内容，而不是在单击选项卡后延迟呈现
</summary>
    </member>
    <member name="P:AntDesign.TabPane.Key">
      <summary v="2YYIS2" i="0">
TabPane的密钥
</summary>
    </member>
    <member name="P:AntDesign.TabPane.Tab">
      <summary v="8N7Wf" i="0">
在<see cref="T:AntDesign.TabPane" />的头部显示文本
</summary>
    </member>
    <member name="P:AntDesign.Tabs.ActiveKey">
      <summary v="2FY5Zq" i="0">
当前<see cref="T:AntDesign.TabPane" />的 <see cref="P:AntDesign.TabPane.Key" /></summary>
    </member>
    <member name="P:AntDesign.Tabs.Animated">
      <summary v="2fNQfe" i="0">
是否使用动画更改选项卡。仅在 <see cref="P:AntDesign.Tabs.TabPosition" />= <see cref="F:AntDesign.TabPosition.Top" />或<see cref="F:AntDesign.TabPosition.Bottom" />时有效</summary>
    </member>
    <member name="P:AntDesign.Tabs.DefaultActiveKey">
      <summary v="CcZho" i="0">
初始活动<see cref="T:AntDesign.TabPane" />的 <see cref="P:AntDesign.TabPane.Key" />(如果未设置<see cref="P:AntDesign.Tabs.ActiveKey" />)
</summary>
    </member>
    <member name="P:AntDesign.Tabs.HideAdd">
      <summary v="3x3txU" i="0">
隐藏加号图标或不。仅在 <see cref="P:AntDesign.Tabs.Type" />= <see cref="F:AntDesign.TabType.EditableCard" />时有效</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnChange">
      <summary v="ozKGD" i="0">
更改活动选项卡时执行的回调
</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnClose">
      <summary v="24p9uY" i="0">
选项卡关闭时的回调
</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnEdit">
      <summary v="2pplmx" i="0">
添加或删除选项卡时执行的回调。仅在 <see cref="P:AntDesign.Tabs.Type" />= <see cref="F:AntDesign.TabType.EditableCard" />时有效</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnTabClick">
      <summary v="nzs2r" i="0">
单击选项卡时执行的回调
</summary>
    </member>
    <member name="P:AntDesign.Tabs.RenderTabBar">
      <summary v="4bb92P" i="0">
替换TabBar
</summary>
    </member>
    <member name="P:AntDesign.Tabs.Size">
      <summary v="2uRSg3" i="0">
预设标签栏大小
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarClass">
      <summary v="3e35Zi" i="0">
标签栏css类
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarExtraContent">
      <summary v="3x7TO1" i="0">
标签栏中的额外内容
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarGutter">
      <summary v="2R1oV0" i="0">
制表符之间的间隙
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarStyle">
      <summary v="3aIVwY" i="0">
选项卡栏样式对象
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabPosition">
      <summary v="4ceKgX" i="0">
制表符的位置
</summary>
    </member>
    <member name="P:AntDesign.Tabs.Type">
      <summary v="sK3mA" i="0">
制表符的基本样式
</summary>
    </member>
    <member name="P:AntDesign.Tag.Checkable">
      <summary v="4SrypX" i="0">
是否可以检查标签
</summary>
    </member>
    <member name="P:AntDesign.Tag.Checked">
      <summary v="420tmQ" i="0">
标记的检查状态
</summary>
    </member>
    <member name="P:AntDesign.Tag.CheckedChanged">
      <summary v="1VfqF2" i="0">
选中/取消选中标签时执行的回调
</summary>
    </member>
    <member name="P:AntDesign.Tag.ChildContent">
      <summary v="4FUS9X" i="0">
标签内容
</summary>
    </member>
    <member name="P:AntDesign.Tag.Closable">
      <summary v="E9gms" i="0">
标签是否可以关闭
</summary>
    </member>
    <member name="P:AntDesign.Tag.Color">
      <summary v="2JUVUq" i="0">
标签颜色。可以是预定义的颜色 (字符串)
或十六进制颜色。
</summary>
    </member>
    <member name="P:AntDesign.Tag.Icon">
      <summary v="21J6lk" i="0">
设置标签的图标
</summary>
    </member>
    <member name="P:AntDesign.Tag.IconTheme">
      <summary v="3RjsZn" i="0">
'fill' | 'outline' | 'twotone';
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClick">
      <summary v="3I8uAB" i="0">
单击标记时执行的回调 (不调用
单击关闭图标时)。
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClose">
      <summary v="2cb9Pq" i="0">
标签关闭时执行的回调
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClosing">
      <summary v="3vb75u" i="0">
在真正关闭之前触发，可以防止关闭
</summary>
    </member>
    <member name="P:AntDesign.Tag.Visible">
      <summary v="1Wdmg" i="0">
标签是否关闭
</summary>
    </member>
    <member name="P:AntDesign.TemplateComponentBase`1.Options">
      <summary v="11Cl1m" i="0">
允许您从外部传入模板的选项
</summary>
    </member>
    <member name="P:AntDesign.TextArea.AutoSize">
      <summary v="bWvi3" i="0">
将根据内容调整 (增大或缩小) &ldquo;textarea”。
可以与 &ldquo;maxrows” 和 &ldquo;minrows” 一起工作。
将textarea HTML元素的调整大小特性设置为: none。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.DefaultToEmptyString">
      <summary v="1OUfFJ" i="0">
当 &ldquo;false” 时，当内容为空时，值将设置为 &ldquo;null'
或空白。当 &ldquo;true” 时，值将设置为空字符串。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.MaxRows">
      <summary v="eoMTf" i="0">
'TextArea' 将允许增长，但它会在可见时停止
行 = MaxRows (不会进一步增长)。
默认值 = uint.MaxValue
</summary>
    </member>
    <member name="P:AntDesign.TextArea.MinRows">
      <summary v="T6VLX" i="0">
'TextArea' 将允许缩小，但它将在可见时停止
行 = MinRows (不会进一步缩小)。
默认值 = DEFAULT_MIN_ROWS = 1
</summary>
    </member>
    <member name="P:AntDesign.TextArea.OnResize">
      <summary v="41j1op" i="0">
大小更改时回调
</summary>
    </member>
    <member name="P:AntDesign.TextArea.Rows">
      <summary v="A2xJ8" i="0">
设置以行数表示的TextArea的高度。
默认值为2。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.Value">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.Timeline.Mode">
      <summary v="2SBVs1" i="0">
'左' | '替代' | '右'
</summary>
    </member>
    <member name="P:AntDesign.Transfer.ListStyle">
      <summary v="Hovrn" i="0">
用于呈现传输列的自定义CSS样式
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.BlockNode">
      <summary v="1C1tz" i="0">
treeNode是否填充剩余的水平空间
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Checkable">
      <summary v="2AZD7w" i="0">
在节点前添加复选框
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckableExpression">
      <summary v="rEuK6" i="0">
指定返回可检查节点的方法
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckedKeys">
      <summary v="2X1ZjM" i="0">
选中的键
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckedKeysChanged">
      <summary v="14s0ey" i="0">
@ bind-CheckedKeys
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckOnClickNode">
      <summary v="1ewR9Z" i="0">
如果可检查，请通过单击TreeNodeTitle选中或取消选中节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckStrictly">
      <summary v="42UEkh" i="0">
精确检查treeNode; 父treeNode和子treeNode不关联
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ChildNodes">
      <summary v="1SoIAs" i="0">
树childnodes
初始化节点时添加值
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ChildrenExpression">
      <summary v="1a94kF" i="0">
指定返回子节点的方法
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DataSource">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.DefaultCheckedKeys">
      <summary v="18LgiI" i="0">
指定默认选中的treenode的键
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandAll">
      <summary v="2oK5An" i="0">
默认情况下展开所有树节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandedKeys">
      <summary v="2sJkXY" i="0">
默认展开指定的树节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandParent">
      <summary v="lOqhO" i="0">
默认情况下展开父节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DisableCheckKeys">
      <summary v="1cxA3L" i="0">
禁用节点复选框
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Disabled">
      <summary v="1QaL60" i="0">
树已禁用
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DisabledExpression">
      <summary v="4QpUNh" i="0">
指定返回禁用节点的方法
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Draggable">
      <summary v="1IFV7v" i="0">
节点是否允许拖放
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DragItem">
      <summary v="2APWtc" i="0">
当前拖拽项
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ExpandedKeys">
      <summary v="4d5ThB" i="0">
(受控) 展开指定的树节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ExpandOnClickNode">
      <summary v="1DJafz" i="0">
通过单击treenodeditle展开或折叠节点
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IconExpression">
      <summary v="37B3eq" i="0">
指定用于返回节点图标的方法。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IndentTemplate">
      <summary v="3FAxcU" i="0">
缩进模板
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IsLeafExpression">
      <summary v="3OYLNx" i="0">
指定一个方法，该方法返回表达式是否为叶节点。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.KeyExpression">
      <summary v="3F1pUh" i="0">
指定返回节点的键的方法。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.MatchedStyle">
      <summary v="3XV05o" i="0">
搜索匹配的文本样式
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Multiple">
      <summary v="2dQlNQ" i="0">
允许选择多个treenode
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnCheck">
      <summary v="8TDXd" i="0">
已检查树节点回调
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnClick">
      <summary v="3qs9fw" i="0">
单击树节点回调
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnContextMenu">
      <summary v="27GI7h" i="0">
右键单击树节点回调
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDblClick">
      <summary v="uIvkf" i="0">
双击节点回调
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragEnd">
      <summary v="1L8CiD" i="0">
拖放结束回调
</summary>
      <remarks>this callback method must be set</remarks>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragEnter">
      <summary v="2O4Pxh" i="0">
当拖放到可释放目标时调用
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragLeave">
      <summary v="1dobxG" i="0">
从可释放目标拖放时调用
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragStart">
      <summary v="31ndc9" i="0">
当拖放开始时调用
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDrop">
      <summary v="1yoUYO" i="0">
拖放成功时触发
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnExpandChanged">
      <summary v="2pqvwr" i="0">
单击展开树节点图标以回叫
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnNodeLoadDelayAsync">
      <summary v="3A2c9f" i="0">
延迟加载回调
</summary>
      <remarks>You must use async and the return type is Task, otherwise you may experience load lag and display problems</remarks>
    </member>
    <member name="P:AntDesign.Tree`1.SearchValue">
      <summary v="3gNRzP" i="0">
搜索值
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Selectable">
      <summary v="1x7lyW" i="0">
是否可以选择
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedData">
      <summary v="2vGOEn" i="0">
@ bing-SelectedData
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedDatas">
      <summary v="M11OA" i="0">
选定的数据集
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKey">
      <summary v="3KNPSJ" i="0">
@ bind-SelectedKey
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKeyChanged">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKeys">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.SelectedNode">
      <summary v="1nxXOb" i="0">
@ bind-SelectedNode
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedNodes">
      <summary v="23S8go" i="0">
所选节点的集合
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowExpand">
      <summary v="T2Gv1" i="0">
在节点前显示展开图标
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowIcon">
      <summary v="33jgCa" i="0">
显示treeNode图标图标
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowLeafIcon">
      <summary v="32TlPX" i="0">
显示子叶图标
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowLine">
      <summary v="2Gh5TZ" i="0">
显示一条连接线
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SwitcherIcon">
      <summary v="3bRdwq" i="0">
特定的图标类型的切换器
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SwitcherIconTemplate">
      <summary v="4OLQVz" i="0">
自定义切换图标模板
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleExpression">
      <summary v="17Cqdr" i="0">
指定返回节点文本的方法。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleIconTemplate">
      <summary v="2cC9bk" i="0">
自定义图标模板
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleTemplate">
      <summary v="a0sZ5" i="0">
自定义页眉模板
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.DropBelow">
      <summary v="34DM5g" i="0">
是否将拖动的节点作为同级 (下面) 或作为目标节点的子级放置。
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.OriginalEvent">
      <summary v="15L2Au" i="0">
原生事件
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.TargetNode">
      <summary v="1F0Y2X" i="0">
目标节点
</summary>
    </member>
    <member name="P:AntDesign.TreeIndent`1.SelfNode">
      <summary v="4bZ677" i="0">
当前节点
</summary>
    </member>
    <member name="P:AntDesign.TreeIndent`1.TreeComponent">
      <summary v="1uvHBZ" i="0">
根树
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Checked">
      <summary v="1ZPUcx" i="0">
是否检查TreeNode
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DisableCheckbox">
      <summary v="2pFfjr" i="0">
禁用复选框
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Disabled">
      <summary v="2mtrZP" i="0">
禁用状态受制于父节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DragTarget">
      <summary v="2I6Teb" i="0">
是否释放目标
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DragTargetBottom">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.Expanded">
      <summary v="1dJKzH" i="0">
是否展开节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.HasChildMatched">
      <summary v="2XEPG2" i="0">
子节点存在满足搜索条件，所以夫节点也需要显示
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.HasChildNodes">
      <summary v="4es4zi" i="0">
子节点是否存在
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Icon">
      <summary v="f80m3" i="0">
节点前面的图标
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.IsLastNode">
      <summary v="4cJ424" i="0">
确定它是否是同一级别节点中的最后一个节点。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.IsLeaf">
      <summary v="3cKGhc" i="0">
是否为叶节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Key">
      <summary v="25YQXT" i="0">
指定当前节点的唯一标识符名称。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Loading">
      <summary v="3cafGE" i="0">
加载状态是否为异步 (影响展开图标的显示)
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Matched">
      <summary v="sRjSt" i="0">
标题是否包含SearchValue(搜索使用)
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.NodeIndex">
      <summary v="40g1H9" i="0">
在父节点的子节点列表中记录索引。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Nodes">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.ParentNode">
      <summary v="3xV3Wk" i="0">
上一级节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.RealDisplay">
      <summary v="1jnI3j" i="0">
真正的展开状态，只要路径上有一个展开的节点，那么下面的所有折叠
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Selected">
      <summary v="3XEjb8" i="0">
选择或未选择
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.SwitcherClose">
      <summary v="iICRj" i="0">
切换器关闭
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.SwitcherOpen">
      <summary v="TpcNo" i="0">
切换器已打开
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.TargetContainer">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树控件本身
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.TreeLevel">
      <summary v="1c26WG" i="0">
当前节点级别
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeCheckbox`1.SelfNode">
      <summary v="4bZ677" i="0">
当前节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeCheckbox`1.TreeComponent">
      <summary v="1uvHBZ" i="0">
根树
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherClose">
      <summary v="3ur2B7" i="0">
节点是否处于关闭状态
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherOpen">
      <summary v="2iaKt5" i="0">
节点是否处于展开状态
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.SelfNode">
      <summary v="zQzEv" i="0">
当前节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树控件本身
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeTitle`1.SelfNode">
      <summary v="zQzEv" i="0">
当前节点
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeTitle`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树控件本身
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.CheckableExpression">
      <summary v="rEuK6" i="0">
指定返回可检查节点的方法
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ChildrenExpression">
      <summary v="1a94kF" i="0">
指定返回子节点的方法
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.DisabledExpression">
      <summary v="4QpUNh" i="0">
指定返回禁用节点的方法
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ExpandedKeys">
      <summary v="4d5ThB" i="0">
(受控) 展开指定的树节点
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.IconExpression">
      <summary v="37B3eq" i="0">
指定用于返回节点图标的方法。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.IsLeafExpression">
      <summary v="3OYLNx" i="0">
指定一个方法，该方法返回表达式是否为叶节点。
</summary>) == args.Node.Key).FirstOrDefault();
        </member>
    <member name="P:AntDesign.TreeSelect`2.KeyExpression">
      <summary v="3F1pUh" i="0">
指定返回节点的键的方法。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ShowCheckedStrategy">
      <summary v="3JoB00" i="0">
指定当TreeCheckable为true且treecheckstricly为false时如何显示检查的值
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ShowIcon">
      <summary v="33jgCa" i="0">
显示treeNode图标图标
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TitleExpression">
      <summary v="17Cqdr" i="0">
指定返回节点文本的方法。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TitleIconTemplate">
      <summary v="2cC9bk" i="0">
自定义图标模板
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TreeCheckStrictly">
      <summary v="42UEkh" i="0">
精确检查treeNode; 父treeNode和子treeNode不关联
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TreeComponent">
      <summary v="4SG0pP" i="0">
树控件本身
</summary>
    </member>
    <member name="T:AntDesign.Alert">
      <summary v="lrPn5" i="0">
用于反馈的警报组件。
</summary>
    </member>
    <member name="T:AntDesign.AntInputComponentBase`1">
      <summary v="4IyV3t" i="0">
可选地支持<see cref="P:AntDesign.AntInputComponentBase`1.EditContext" />的任何输入控件的基类。
参考: https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs
</summary>
      <typeparam name="TValue" v="KpCZe" i="0">输入值的自然类型</typeparam>
    </member>
    <member name="T:AntDesign.Badge">
      <summary v="2Rq7Zo" i="0">
UI元素的小数值或状态描述符。
</summary>
    </member>
    <member name="T:AntDesign.BadgeRibbon">
      <summary v="2Rq7Zo" i="0">
UI元素的小数值或状态描述符。
</summary>
    </member>
    <member name="T:AntDesign.BreadcrumbOption">
      <summary v="3CaXYE" i="0">
目前没有使用。计划未来的发展。
</summary>
    </member>
    <member name="T:AntDesign.ButtonProps">
      <summary v="1jRKjS" i="0">
按钮道具
</summary>
    </member>
    <member name="T:AntDesign.CloseEventArgs`1">
      <summary v="qxMDq" i="0">
可用于有条件地阻止关闭事件
</summary>
      <typeparam name="T" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Color">
      <summary v="1eFGx0" i="0">
Ant设计颜色: https:// Ant.Design/docs/spec/colors
</summary>
    </member>
    <member name="T:AntDesign.Confirm">
      <summary v="3MOCfz" i="0">
DOT不直接使用Confirm，
请使用ModalService或ConfirmService创建确认对话框
</summary>
    </member>
    <member name="T:AntDesign.ConfirmButtonOptions">
      <summary v="29ac0n" i="0">
配置确认按钮的属性
</summary>
    </member>
    <member name="T:AntDesign.ConfirmButtons">
      <summary v="4A7aQN" i="0">
确认页脚按钮类型
</summary>
    </member>
    <member name="T:AntDesign.ConfirmIcon">
      <summary v="4btyuR" i="0">
确认图标类型
</summary>
    </member>
    <member name="T:AntDesign.ConfirmLocale">
      <summary v="1p1KyL" i="0">
确认对话框区域设置
</summary>
    </member>
    <member name="T:AntDesign.ConfirmOptions">
      <summary v="1kUbEo" i="0">
确认对话框选项
</summary>
    </member>
    <member name="T:AntDesign.ConfirmRef">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ConfirmRef`1">
      <summary v="30SDzd" i="0">
具有返回值的ConfirmRef
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ConfirmResult">
      <summary v="1E9RxE" i="0">
单击哪个确认按钮
</summary>
    </member>
    <member name="T:AntDesign.ConfirmService">
      <summary v="4bavRW" i="0">
显示一个简单的确认对话框，如Windows的MessageBox，它与ModalService不同。ModalService只能创建好-取消确认对话框并返回ConfirmRef，但ConfirmService返回ConfirmResult
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCode`1">
      <summary v="2QfH9f" i="0">
提供两个参数值的哈希比较
</summary>
      <typeparam name="TParameter" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeExtensions">
      <summary v="25Bj9r" i="0">
提供组件参数的HashCode计算等功能
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider">
      <summary v="4U8Dt8" i="0">
HashCode提供程序
<para>它用于计算参数值的HashCode</para><para>集合类型计算每个元素的HashCode，
其他类型只返回由对象的默认GetHashCode方法引发的值
</para>，<para>为了考虑反射性能，复杂模型不会拆解和计算其属性的HashCode，因此建议模型重写GetHashCode方法本身</para></summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.DictionaryHashCodeProvider">
      <summary v="ogIOV" i="0">
字典类型的哈希提供程序
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.EnumerableHashCodeProvider">
      <summary v="1U8TI8" i="0">
IEnumerable类型的哈希提供程序
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.OtherHashCodeProvider">
      <summary v="OKreE" i="0">
其他类型的哈希提供程序
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.ParameterDescriptor`1">
      <summary v="3IE49e" i="0">
表示组件的参数描述符
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Dialog">
      <summary v="3kcfun" i="0">
对话框仅控制组件的显示或隐藏，
元素不会从DOM树中删除
</summary>
    </member>
    <member name="T:AntDesign.DialogOptions">
      <summary v="4BPXAm" i="0">
对话框选项
</summary>
    </member>
    <member name="T:AntDesign.DialogOptionsBase">
      <summary v="342PtQ" i="0">
ModalOptions，confirmotions和DialogOptions基类
</summary>
    </member>
    <member name="T:AntDesign.DialogWrapper">
      <summary v="3kvY2G" i="0">
可以在DOM树中存在很长时间的组件，除非您主动销毁它
</summary>
    </member>
    <member name="T:AntDesign.EventUtil">
      <summary v="1Qq0jo" i="0">
避免将事件重新呈现给Blazor组件。(纯事件处理程序)
<para>
作者: SteveSandersonMS，来自<see href="https://gist.github.com/SteveSandersonMS/8a19d8e992f127bb2d2a315ec6c5a373" />。
</para><para>
问题:<seealso href="https://github.com/dotnet/aspnetcore/issues/18919#issuecomment-735969441" />。
</para></summary>
    </member>
    <member name="T:AntDesign.FeedbackComponent`1">
      <summary v="1wTQkB" i="0">
反馈组件
</summary>
      <typeparam name="TComponentOptions" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackComponent`2">
      <summary v="1wTQkB" i="0">
反馈组件
</summary>
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackRefBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackRefWithOkCancelBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.IFeedbackRef">
      <summary v="4GzNez" i="0">
使用打开和关闭方法的组件参考
</summary>
    </member>
    <member name="T:AntDesign.Input`1">
      <summary v="1GfhnE" i="0">
输入类型组件的基类。
</summary>
    </member>
    <member name="T:AntDesign.IOkCancelRef">
      <summary v="23dkGA" i="0">
使用好和取消方法的组件引用
</summary>
    </member>
    <member name="T:AntDesign.IOkCancelRef`1">
      <summary v="4VqRkO" i="0">
组件 &lt;&gt; 引用好和取消方法
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.MessageService">
      <summary v="46UWFn" i="0">
消息服务
</summary>
    </member>
    <member name="T:AntDesign.Modal">
      <summary v="4eCJHq" i="0">
模态对话框
</summary>
    </member>
    <member name="T:AntDesign.ModalCancelFooter">
      <summary v="3rqwQJ" i="0">
模态页脚组件
</summary>
    </member>
    <member name="T:AntDesign.ModalFooter">
      <summary v="3rqwQJ" i="0">
模态页脚组件
</summary>
    </member>
    <member name="T:AntDesign.ModalLocale">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ModalOkFooter">
      <summary v="3rqwQJ" i="0">
模态页脚组件
</summary>
    </member>
    <member name="T:AntDesign.ModalOptions">
      <summary v="33zzV5" i="0">
模式对话框的选项
</summary>
    </member>
    <member name="T:AntDesign.ModalRef">
      <summary v="3g66il" i="0">
模态实例的参考
</summary>
    </member>
    <member name="T:AntDesign.ModalRef`1">
      <summary v="obMVl" i="0">
具有返回值的ModalRef
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ModalService">
      <summary v="17Ulp2" i="0">
创建并打开模式对话框
</summary>
    </member>
    <member name="T:AntDesign.NotificationBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.NotificationGlobalConfig">
      <summary v="1hOMBL" i="0">
AntNotification全局配置
</summary>
    </member>
    <member name="T:AntDesign.NotificationRef">
      <summary v="1vLyd3" i="0">
NotificationRef
</summary>
    </member>
    <member name="T:AntDesign.NotificationService">
      <summary v="SPIyy" i="0">
AntNotification服务
</summary>
    </member>
    <member name="T:AntDesign.RangePickerDefaults">
      <summary v="38wVtM" i="0">
评估应将哪些值插入到PickerValues (每个日期
选择器将专注于第一次显示时)。
</summary>
    </member>
    <member name="T:AntDesign.RerenderStrategy">
      <summary v="2FJ4wP" i="0">
重新渲染策略
</summary>
    </member>
    <member name="T:AntDesign.ReuseTabs">
      <summary v="2UMBIG" i="0">
在应用程序中重复使用多个页面组件
</summary>
    </member>
    <member name="T:AntDesign.Select.Internal.SelectOptionItem`2">
      <summary v="1X6flt" i="0">
内部使用的SelectOption的数据模型。
</summary>
      <typeparam name="TItemValue" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Table.Internal.TItemProxy">
      <summary v="2auhJN" i="0">
此类用于通过DispatchProxy创建接口的实例
</summary>
    </member>
    <member name="T:AntDesign.TableModels.RowData">
      <summary v="2VK43F" i="0">
保存特定于行的所有数据，例如是否扩展行。
有关特定于项而不是行的所有属性，请参见<see cref="P:AntDesign.TableModels.RowData.TableDataItem" />。
</summary>
    </member>
    <member name="T:AntDesign.TableModels.RowData`1">
      <inheritdoc />
    </member>
    <member name="T:AntDesign.TableModels.TableDataItem">
      <summary v="4IsL8v" i="0">
保存表中项目的属性。
对于表中的每个项目都是唯一的 (例如，即使项目显示多次，
将只有一个<see cref="T:AntDesign.TableModels.TableDataItem" />。)
因此，具有相同项目的所有行将同时被选中/取消选中。
<br />
有关特定于行的数据，请参见<see cref="T:AntDesign.TableModels.RowData" />。
</summary>
    </member>
    <member name="T:AntDesign.TableModels.TableDataItem`1">
      <inheritdoc />
    </member>
    <member name="T:AntDesign.TemplateComponentBase`1">
      <summary v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
    </member>
  </members>
</doc>