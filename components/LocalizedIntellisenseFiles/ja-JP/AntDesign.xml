<?xml version="1.0"?>
<doc>
  <assembly>
    <name>AntDesign</name>
  </assembly>
  <members>
    <member name="E:AntDesign.NotificationConfig.OnClick">
      <summary v="42pkAh" i="0">
数数は、通知时になります。
</summary>
    </member>
    <member name="E:AntDesign.NotificationConfig.OnClose">
      <summary v="11YvOG" i="0">
通知関闭时回通过
</summary>
    </member>
    <member name="F:AntDesign.Alert._isClosed">
      <summary v="yW8vK" i="0">
コンポーネントが閉じているかどうかを示します。
</summary>
    </member>
    <member name="F:AntDesign.Alert._isClosing">
      <summary v="1CUgJ3" i="0">
コンポーネントを閉じる直前に、このインジケーターを閉じたアニメーションを表示するように設定します。
</summary>
    </member>
    <member name="F:AntDesign.AutoComplete`1._optionDataItems">
      <summary v="3hlfJJ" i="0">
列表示集
リストデータ収集
</summary>
    </member>
    <member name="F:AntDesign.AutoComplete`1._options">
      <summary v="3QtkWg" i="0">
指定列定分集
バインドされたデータソース収集の一覧表示
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Closed">
      <summary v="2lNNDv" i="0">
一関闭経时、过去一次OnAfterRender/OnAfterRenderAsync、成成态となった。
OnAfterRender/OnAfterRenderAsyncを閉じるときに一度経験すると、この状態になります
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Closing">
      <summary v="1Mk8P4" i="0">
指定パラメーター指定指定中設置、指定指定者指定中設置
パラメータープロパティに設定するために使用され、コンポーネントが閉じていることを示します。
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Destroyed">
      <summary v="4HjwoW" i="0">
一次OnAfterRender、一次成長形
OnAfterRender/OnAfterRenderAsyncが破壊中に1回経験されると、この状態になります
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Destroying">
      <summary v="10HgBd" i="0">
指定パラメーターの指定された中央配置、指定された設定
パラメータ属性に設定するために使用され、コンポーネントが定期的に破壊されていることを示します。
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Inited">
      <summary v="1e7sQF" i="0">
组织的な一次的な
コンポーネントの初期化完了
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Initing">
      <summary v="2Dnf11" i="0">
组织的に
進行中のコンポーネントの初期化
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Opened">
      <summary v="1V4YNr" i="0">
一打開時过一一OnAfterRender/OnAfterRenderAsync、成成状態
コンポーネントが開いたときにOnAfterRender/OnAfterRenderAsyncを一度経験すると、この状態になります。
</summary>
    </member>
    <member name="F:AntDesign.ComponentStatus.Opening">
      <summary v="1WRA1H" i="0">
指定パラメーターの指定指定位置、指定指定位置の指定位置、指定位置の指定位置の指定位置
パラメータープロパティで設定するために使用され、コンポーネントが初めてレンダリングされることを示します。
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.AbortRetryIgnore">
      <summary v="3dHrPd" i="0">
3つのボタン: 中止、再試行、無視
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.OK">
      <summary v="3t6Etb" i="0">
[OK] ボタンのみ
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.OKCancel">
      <summary v="4UZPqN" i="0">
2つのボタン: OKとキャンセル
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.RetryCancel">
      <summary v="2JNCgQ" i="0">
2つのボタン: 再試行とキャンセル
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.YesNo">
      <summary v="4WMXxD" i="0">
2つのボタン: はいおよびいいえ
</summary>
    </member>
    <member name="F:AntDesign.ConfirmButtons.YesNoCancel">
      <summary v="3CuxQc" i="0">
3つのボタン: はい、いいえ、キャンセル
</summary>
    </member>
    <member name="F:AntDesign.Core.HashCodes.ParameterDescriptor`1.Descriptors">
      <summary v="3jJwQt" i="0">
コンポーネントのすべてのパラメータの説明を取得します。
</summary>
    </member>
    <member name="F:AntDesign.Dialog._dialogMouseDown">
      <summary v="2mDnNT" i="0">
チェックはダイアログをクリックします
</summary>
    </member>
    <member name="F:AntDesign.Dialog._element">
      <summary v="2lsUtt" i="0">
ダイアログルートコンテナ
</summary>
    </member>
    <member name="F:AntDesign.Dialog._sentinelStart">
      <summary v="enVVW" i="0">
TABキーボード制御
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultCloseIcon">
      <summary v="W8kIQ" i="0">
デフォルトのダイアログ閉じるアイコン
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultFooter">
      <summary v="T4rRh" i="0">
デフォルトのモーダルフッター
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultHeader">
      <summary v="2Y2SUn" i="0">
デフォルトのモーダルヘッダー
</summary>
    </member>
    <member name="F:AntDesign.DialogOptionsBase.DefaultMaximizeIcon">
      <summary v="W8kIQ" i="0">
デフォルトのダイアログ閉じるアイコン
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAndClear">
      <summary v="1w7dgS" i="0">
フォーカスすると、コンテンツはクリアされます
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAndSelectAll">
      <summary v="1zmt3n" i="0">
フォーカスすると、コンテンツが選択されます
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAtFirst">
      <summary v="3yAl94" i="0">
フォーカスすると、カーソルは最初の文字に移動します
</summary>
    </member>
    <member name="F:AntDesign.FocusBehavior.FocusAtLast">
      <summary v="2IX3yV" i="0">
フォーカスすると、カーソルは最後の文字に移動します
これはデフォルトの動作です。
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.None">
      <summary v="4NnUqv" i="0">
Noneに設定すると、フォームは必要なステータスに関係なく、フィールドごとにインジケーターを表示しません。
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.Optional">
      <summary v="3P3eBz" i="0">
[オプション] に設定すると、フォームにはオプションフィールドの横にインジケーターが表示されます。
</summary>
    </member>
    <member name="F:AntDesign.FormRequiredMark.Required">
      <summary v="1UZY2b" i="0">
[必須] に設定すると、フォームには必須フィールドの横にインジケーターが表示されます。
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Complex">
      <summary v="pWX6P" i="0">
デフォルトモードとルールモードの両方を使用する
同时使用デフォルトの和ルール式
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Default">
      <summary v="4686Sm" i="0">
Blazorの検証モード。 モデルフィールドにvalidateAttributesを追加する
Blazor的検式、既存のモデル段上検式
</summary>
    </member>
    <member name="F:AntDesign.FormValidateMode.Rules">
      <summary v="4erxc3" i="0">
FormItemでルールを設定する
FormItem上の设计ルール数
</summary>
    </member>
    <member name="F:AntDesign.Internal.Overlay._isReloading">
      <summary v="3wcE9I" i="0">
ページがリフレッシュされていることを示します
</summary>
    </member>
    <member name="F:AntDesign.Rate._currentValue">
      <summary v="3qqeGZ" i="0">
時前星量選択的星量
現在選択されている星の数
</summary>
    </member>
    <member name="F:AntDesign.Rate._hasHalf">
      <summary v="2fqpId" i="0">
半选
半分の選択を許可するかどうか
</summary>
    </member>
    <member name="F:AntDesign.Rate._hoverValue">
      <summary v="dbFU7" i="0">
。
マウスでホバリングしたときのカーソル位置までの左端からの星の数。
</summary>
    </member>
    <member name="F:AntDesign.Rate._isFocused">
      <summary v="3ALEeG" i="0">

入力フォーカスを取得するためのウィーター。
</summary>
    </member>
    <member name="F:AntDesign.Rate._valueWasSet">
      <summary v="4T5P25" i="0">
値が変更されたかどうかを示します。 存在する場合はDefaultValueへの再設定を回避する必要があります。
</summary>
    </member>
    <member name="F:AntDesign.RerenderStrategy.Always">
      <summary v="BjYee" i="0">
常に再送信する
</summary>
    </member>
    <member name="F:AntDesign.RerenderStrategy.ParametersHashCodeChanged">
      <summary v="W9Mkm" i="0">
コンポーネントのパラメータ値のいずれかが変更された場合にのみレンダリング
</summary>
    </member>
    <member name="F:AntDesign.Select.Internal.SelectContent`2._isReloading">
      <summary v="3wcE9I" i="0">
ページがリフレッシュされていることを示します
</summary>
    </member>
    <member name="F:AntDesign.Select`2._dataSourceItemShallowCopyMehtod">
      <summary v="2dLgj3" i="0">
MethodInfoには、添付されたMemberwiseCloneが保護されます
メソッドを使用します。 その保護レベルのために、それはアクセスされなければなりません
反射を使用して。 それは世代の間に使用されます
DataSourceの浅いコピー (DataSourceの新しいリスト)
各アイテムのコピーが浅いアイテム)。
</summary>
    </member>
    <member name="F:AntDesign.SelectBase`2._maxTagCount">
      <summary v="v23JS" i="0">
タグの長さ (文字数)。
モード = "multiple" またはモード = "tags" のみ
</summary>
      <value>
                The maximum length of the tag text.
            </value>
    </member>
    <member name="F:AntDesign.SelectOption`2._itemSet">
      <summary v="3XJgl6" i="0">
SelectOptionのアイテム
パラメータは、SelectOptionが直接作成された場合にのみ使用してください。
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._isTipFormatterDefault">
      <summary v="30Azba" i="0">
スライダーはその値をtipFormatterに渡し、その値をTooltipに表示します
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._range">
      <summary v="34jy3B" i="0">
デュアル親指モード
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._reverse">
      <summary v="4bs5mi" i="0">
コンポーネントを逆にする
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._step">
      <summary v="7DciJ" i="0">
スライダーが値をステップスルーできる粒度。 0より大きくなければならず、 (<see cref="P:AntDesign.Slider`1.Max" />-<see cref="P:AntDesign.Slider`1.Min" />)。 <see cref="P:AntDesign.Slider`1.Marks" />Nullなし、<see cref="P:AntDesign.Slider`1.Step" />Nullにすることができます。
</summary>
    </member>
    <member name="F:AntDesign.Slider`1._tooltipVisible">
      <summary v="FnJHc" i="0">
Trueの場合、ツールチップは常に表示されるか、ドラッグまたはホバリングしても表示されません。
</summary>
    </member>
    <member name="F:AntDesign.Table`1._isReloading">
      <summary v="3wcE9I" i="0">
ページがリフレッシュされていることを示します
</summary>
    </member>
    <member name="F:AntDesign.TextArea._isReloading">
      <summary v="3wcE9I" i="0">
ページがリフレッシュされていることを示します
</summary>
    </member>
    <member name="F:AntDesign.Tree`1._allNodes">
      <summary v="XXSU2" i="0">
すべてのノード
</summary>
    </member>
    <member name="F:AntDesign.Tree`1._checkedNodes">
      <summary v="1Z7yRm" i="0">
すべてのチェック済みノード
</summary>
    </member>
    <member name="F:AntDesign.TreeNodeTitle`1._dragTargetClientX">
      <summary v="0000" i="0" />
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.InScroll">
      <summary v="2mhd7P" i="0">
存在する
ドキュメント境界は、オーバーレイを再配置する必要がある場合に計算に使用される境界です。
したがって、オーバーレイがビューポートの外にある場合でも、オーバーレイが表示される限り
はドキュメントの境界を「オーバーフロー」しません。
</summary>
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.InView">
      <summary v="2HCzIU" i="0">
可视认可视认定式 (可视认定式)
デフォルトでは、ビューポートの境界は、オーバーレイの場合に計算に使用される境界です。
は完全に表示されます。
ビューポートで常に完全に表示されるように、オーバーレイをフィットさせようとします。
したがって、オーバーレイがビューポートの外側にある場合 (「オーバーフロー」) 、再配置計算が実行されます
試みられる。
</summary>
    </member>
    <member name="F:AntDesign.TriggerBoundaryAdjustMode.None">
      <summary v="2a2qbd" i="0">
自动调整
自動調整しない
</summary>
    </member>
    <member name="M:AntDesign.Alert.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="seeMo" i="0">
クローズコールバックを処理します。
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Alert.OnInitialized">
      <summary v="ajhia" i="0">
スタートアップコード。
</summary>
    </member>
    <member name="M:AntDesign.Alert.SetClassMap">
      <summary v="45aP6Q" i="0">
デフォルトのクラスを設定します。
</summary>
    </member>
    <member name="M:AntDesign.AntComponentBase.BlurAsync(Microsoft.AspNetCore.Components.ElementReference)">
      <summary v="1Df4hk" i="0">
標準ぼかし。 JS interopを使用します。
</summary>
      <param name="target" v="4QgwiP" i="0">フォーカスを受け取る要素。</param>
    </member>
    <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,AntDesign.FocusBehavior,System.Boolean)">
      <summary v="zIr6D" i="0">
行動に焦点を合わせます。 行動は、ある要素に対してのみ機能します
HTMLInputElementまたはHTMLTextAreaElement それ以外の場合は集中するだけです。
</summary>
      <param name="target" v="4QgwiP" i="0">フォーカスを受け取る要素。</param>
      <param name="behavior" v="4euOKD" i="0">焦点を絞った要素の行動</param>
      <param name="preventScroll" v="2zL7A" i="0">フォーカスされた要素にスクロールするかどうか</param>
    </member>
    <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
      <summary v="3oHKS9" i="0">
標準フォーカス。 Net5からは、ElementReferenceでBlazor拡張メソッドを使用します。
以前は、Net5 JSとまったく同じように実装されたJSを使用しています。
</summary>
      <param name="target" v="4QgwiP" i="0">フォーカスを受け取る要素。</param>
      <param name="preventScroll" v="2zL7A" i="0">フォーカスされた要素にスクロールするかどうか</param>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.#ctor">
      <summary v="7iYge" i="0">
のインスタンスを作成します。<see cref="T:Microsoft.AspNetCore.Components.Forms.InputBase`1" />を参照してください。
</summary>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.FormatValueAsString(`0)">
      <summary v="2Mhrl9" i="0">
値を文字列としてフォーマットします。 派生クラスはこれをオーバーライドして、<see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString" />を参照してください。
</summary>
      <param name="value" v="26kDud" i="0">フォーマットする値。</param>
      <returns v="1AaSv2" i="0">値の文字列表現。</returns>
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnCurrentValueChange(`0)">
      <summary v="1OUvUw" i="0">
このメソッドが呼び出されると、ValueとCurrentValueが変更され、ValueChangedがトリガーされたため、外側のバインド値が変更されます。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnValueChange(`0)">
      <summary v="oF6Fx" i="0">
このメソッドが呼び出された場合、Valueは変更されているだけですが、ValueChangedはトリガーされないため、外側のバインド値は変更されません。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.OnValueChangeAsync(`0)">
      <summary v="oF6Fx" i="0">
このメソッドが呼び出された場合、Valueは変更されているだけですが、ValueChangedはトリガーされないため、外側のバインド値は変更されません。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.AntInputComponentBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
      <summary v="4eJg98" i="0">
文字列を解析して、のインスタンスを作成します。を参照してください。 派生クラスはこれをオーバーライドして方法を変更できます
<see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString" />着信値を解釈します。
<typeparamref name="TValue" /></summary>
      <param name="value" v="3C8L8R" i="0">解析される文字列の値。</param>
      <param name="result" v="2OSvxq" i="0">のインスタンスです。を参照してください。<typeparamref name="TValue" /></param>
      <param name="validationErrorMessage" v="1lxpYC" i="0">値を解析できなかった場合は、検証エラーメッセージを提供します。</param>
      <returns v="22lm7E" i="0">値を解析できる場合はtrueです。そうでない場合はfalse。</returns>
    </member>
    <member name="M:AntDesign.AutoComplete`1.ClosePanel">
      <summary v="1AK2s7" i="0">
関閉会板
パネルを閉じる
</summary>
    </member>
    <member name="M:AntDesign.AutoComplete`1.OpenPanel">
      <summary v="PETmG" i="0">
打开面板
オープンパネル
</summary>
    </member>
    <member name="M:AntDesign.AutoCompleteOption.CalcSelected">
      <summary v="15MAgK" i="0">
算出値の计算値の计算値は、
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Badge.OnInitialized">
      <summary v="1cE7i0" i="0">
スタートアップコード
</summary>
    </member>
    <member name="M:AntDesign.Badge.SetClassMap">
      <summary v="K1vic" i="0">
デフォルトのCSSクラスを設定します。
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.OnInitialized">
      <summary v="1cE7i0" i="0">
スタートアップコード
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.OnParametersSet">
      <summary v="3bianQ" i="0">
パラメーターが設定されるたびに実行されます。
</summary>
    </member>
    <member name="M:AntDesign.BadgeRibbon.SetClassMap">
      <summary v="K1vic" i="0">
デフォルトのCSSクラスを設定します。
</summary>
    </member>
    <member name="M:AntDesign.Cascader.CascaderOnBlur">
      <summary v="4QW9aB" i="0">
入/点 (点)
</summary>
    </member>
    <member name="M:AntDesign.Cascader.ClearSelected">
      <summary v="EYuLQ" i="0">
清の选択の项
</summary>
    </member>
    <member name="M:AntDesign.Cascader.GetNodeByValue(System.Collections.Generic.IEnumerable{AntDesign.CascaderNode},System.String)">
      <summary v="2me3yv" i="0">
指定された値に基づいてノードを取得します。
</summary>
      <param name="list" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.InitCascaderNodeState(System.Collections.Generic.List{AntDesign.CascaderNode},AntDesign.CascaderNode,System.Int32,System.Boolean)">
      <summary v="JTgDE" i="0">
ノードの初期化 (Level, ParentNode)
</summary>
      <param name="list" v="0000" i="0" />
      <param name="parentNode" v="0000" i="0" />
      <param name="level" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.InputOnToggle">
      <summary v="JoEYk" i="0">
入 (示/)
</summary>
    </member>
    <member name="M:AntDesign.Cascader.NodeOnClick(AntDesign.CascaderNode)">
      <summary v="4Y7NQo" i="0">
下节约
</summary>
      <param name="node" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.NodeOnMouseOver(AntDesign.CascaderNode)">
      <summary v="3PeI3Q" i="0">
下节约
</summary>
      <param name="node" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.NodesOnMouseOut">
      <summary v="4P5oXL" i="0">
出
</summary>
    </member>
    <member name="M:AntDesign.Cascader.NodesOnMouseOver">
      <summary v="2UJTjQ" i="0">
入
</summary>
    </member>
    <member name="M:AntDesign.Cascader.ProcessParentAndDefault">
      <summary v="fSFSs" i="0">
オプションの更新後、親ノードとデフォルトを処理します。
</summary>
    </member>
    <member name="M:AntDesign.Cascader.RefreshDisplayText">
      <summary v="4TItSt" i="0">
表示テキストを再構築する
</summary>
    </member>
    <member name="M:AntDesign.Cascader.RefreshNodeValue(System.String)">
      <summary v="23wDCv" i="0">
選択した値を更新する
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetDefaultValue(System.String)">
      <summary v="4bhYmD" i="0">
デフォルト値の設定
</summary>
      <param name="defaultValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetSelectedNode(AntDesign.CascaderNode,AntDesign.SelectedTypeEnum)">
      <summary v="1yanOb" i="0">
選択したノード
</summary>
      <param name="cascaderNode" v="0000" i="0" />
      <param name="selectedType" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetSelectedNodeWithParent(AntDesign.CascaderNode,System.Collections.Generic.List{AntDesign.CascaderNode}@)">
      <summary v="4cw9N0" i="0">
すべての親ノードを選択するように設定する
</summary>
      <param name="node" v="0000" i="0" />
      <param name="list" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Cascader.SetValue(System.String)">
      <summary v="4LHGMk" i="0">
バインディング値の設定
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.CheckboxGroup`1.OnCheckboxChange(AntDesign.Checkbox,System.Boolean)">
      <summary v="12407g" i="0">
[Checkbox change] のときに呼び出されます。
</summary>
      <param name="checkbox" v="RRWM4" i="0">チェックボックス。</param>
      <param name="invokeOnChange" v="2gshfC" i="0">変更イベントに向けて出発するかどうかのフラグ。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.Dispose(System.Boolean)">
      <summary v="JOrKd" i="0">
イベントの登録解除
</summary>
      <param name="disposing" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmClose(AntDesign.ConfirmRef)">
      <summary v="29ltvo" i="0">
[Confirm] ダイアログを破棄
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmCloseAll">
      <summary v="3stjhf" i="0">
[確認] ダイアログをすべて破棄
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmOpen(AntDesign.ConfirmRef)">
      <summary v="4Ttvme" i="0">
[確認] ダイアログを作成して開く
</summary>
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmRemove(AntDesign.ConfirmRef)">
      <summary v="2hkOM7" i="0">
DOMから削除するダイアログを確認した後、 _ confirmRefsから削除します。
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnConfirmUpdate(AntDesign.ConfirmRef)">
      <summary v="2Hw32B" i="0">
[確認] ダイアログの更新
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComfirmContainer.OnInitialized">
      <summary v="2AGfwn" i="0">
登録イベント
</summary>
    </member>
    <member name="M:AntDesign.ComponentStatusExt.Is(AntDesign.ComponentStatus,AntDesign.ComponentStatus)">
      <summary v="1aMoDL" i="0">
リターンは、<paramref name="componentStatus" /><paramref name="status" /></summary>
      <param name="componentStatus" v="0000" i="0" />
      <param name="status" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsClose(AntDesign.ComponentStatus)">
      <summary v="4f8eFK" i="0">
ComponentStatus.ClosingまたはComponentStatus.Closedですか?
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsNotOpen(AntDesign.ComponentStatus)">
      <summary v="37QzBT" i="0">
ComponentStatus.Openingではなく、ComponentStatusではありません。オープン
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ComponentStatusExt.IsOpen(AntDesign.ComponentStatus)">
      <summary v="3YviB6" i="0">
ComponentStatusです。オープンまたはComponentStatus.オープン
</summary>
      <param name="componentStatus" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Confirm.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Confirm.OnInitializedAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmOptions.BuildButtonsDefaultOptions">
      <summary v="N7VQ8" i="0">
ボタンのデフォルトオプションを設定する
</summary>
    </member>
    <member name="M:AntDesign.ConfirmRef.CloseAsync">
      <summary v="w8anv" i="0">
Close Confirmダイアログ
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.OpenAsync">
      <summary v="4ME4b" i="0">
[確認] ダイアログを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync">
      <summary v="3cDh69" i="0">
更新Visible = trueのダイアログ設定の確認
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync(AntDesign.ConfirmOptions)">
      <summary v="1aknzh" i="0">
新しいConfirmOptionsでConfirmダイアログ設定を更新する
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmRef`1.CancelAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ConfirmRef`1.OkAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon,AntDesign.ConfirmButtonOptions,System.Nullable{AntDesign.ConfirmAutoFocusButton})">
      <summary v="3S6wbj" i="0">
WindowsのMessageBoxのような確認ダイアログを表示する
</summary>
      <param name="content" v="4eHUMp" i="0">ダイアログの内容</param>
      <param name="title" v="2qim70" i="0">ダイアログのタイトル</param>
      <param name="confirmButtons" v="4OkTic" i="0">ダイアログのボタン</param>
      <param name="confirmIcon" v="4E5rut" i="0">ダイアログのアイコン</param>
      <param name="options" v="30j200" i="0">ダイアログの設定オプション</param>
      <param name="autoFocusButton" v="2g6u5L" i="0">Autofocusボタン</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon)">
      <summary v="3S6wbj" i="0">
WindowsのMessageBoxのような確認ダイアログを表示する
</summary>
      <param name="content" v="4eHUMp" i="0">ダイアログの内容</param>
      <param name="title" v="2qim70" i="0">ダイアログのタイトル</param>
      <param name="confirmButtons" v="4OkTic" i="0">ダイアログのボタン</param>
      <param name="confirmIcon" v="4E5rut" i="0">ダイアログのアイコン</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Extensions.ArrayExtensions.Scroll``1(``0[],System.Int32)">
      <summary v="KDoZN" i="0">
要素を左にスクロールする
</summary>
      <typeparam name="T" v="0000" i="0" />
      <param name="sourceArray" v="0000" i="0" />
      <param name="offset" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.DataConversionExtensions.Convert``2(``0)">
      <summary v="kkCNA" i="0">
ジェネリック型TFromを指定されたTTo型に変換します。
</summary>
      <typeparam name="TFrom" v="0000" i="0" />
      <typeparam name="TTo" v="0000" i="0" />
      <param name="fromValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.HttpClientExtensions.GetEncoding(System.Net.Http.HttpContent)">
      <summary v="1hf85j" i="0">
エンコード情報を取得する<see cref="T:System.Net.Http.HttpContent" /></summary>
      <param name="httpContent" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.core.Extensions.HttpClientExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
      <summary v="Vs5WG" i="0">
バイナリ配列として読み取り、指定されたエンコーディングに変換します。
</summary>
      <param name="httpContent" v="0000" i="0" />
      <param name="dstEncoding" v="3gsAdT" i="0">ターゲットエンコーディング</param>
      <exception cref="T:System.ArgumentException" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCode`1.GetHashCode(`0)">
      <summary v="lh0fV" i="0">
パラメータのハッシュ値を計算する
</summary>
      <param name="parameter" v="3HK7tg" i="0">パラメーター</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCode`1.HashCodeEquals(`0,`0)">
      <summary v="277aqd" i="0">
2つのパラメータ値のハッシュが等しいかどうかを計算する
</summary>
      <param name="parameter1" v="30MREE" i="0">パラメータ1</param>
      <param name="parameter2" v="YZiuF" i="0">パラメータ2</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeExtensions.GetParametersHashCode``1(``0)">
      <summary v="4PHukz" i="0">
すべてのパラメーターのHashCodeを計算する
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <param name="component" v="4TC8iJ" i="0">コンポーネント</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.Create(System.Type)">
      <summary v="4SPSAV" i="0">
パラメーターに適切なハッシュプロバイダーを作成します。
</summary>
      <param name="parameterType" v="4I5cph" i="0">パラメータタイプ</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.GetHashCode(System.Object)">
      <summary v="4Vme4X" i="0">
パラメータ値のハッシュ値を取得します。
</summary>
      <param name="parameter" v="4I5cph" i="0">パラメータタイプ</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
      <summary v="24e72M" i="0">
コンポーネントのパラメータ记述子
</summary>
      <param name="property" v="33iWJQ" i="0">対応型</param>
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.CreateGetFunc(System.Reflection.PropertyInfo)">
      <summary v="2h7DUq" i="0">
プロパティのgetデリゲートを作成する
</summary>
      <param name="property" v="2UyZk2" i="0">プロパティ</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.GetValueHashCode(`0)">
      <summary v="13vswS" i="0">
パラメータ値のハッシュを返します。
</summary>
      <param name="component" v="1I629k" i="0">组织</param>
      <exception cref="T:System.NotSupportedException" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.IsEventCallBack(System.Reflection.PropertyInfo)">
      <summary v="4WeCE2" i="0">
EventCallback型かどうかを確認する
</summary>
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.Formatter.ToPercentWithoutBlank(System.Double)">
      <summary v="8T4Rw" i="0">
WASMモードでは、ダブルナンバーをパーセンテージにフォーマットすると、ナンバーと % の間に空白が表示されます。「35.00% 」
空白スペースを避けるために、代わりにこのメソッドを使用します
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.Formatter`1.ParseSpanTimeFormatString(System.String)">
      <summary v="2DFOjP" i="0">
他の文字をフォーマット文字列で解析します。
</summary>
      <remarks>refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings#other-characters</remarks>
      <param name="format" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet(System.Object,System.String)">
      <summary v="3qsIng" i="0">
パスによるメンバー値の取得
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``1(System.Object,System.String)">
      <summary v="3qsIng" i="0">
パスによるメンバー値の取得
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``2(``0,System.String)">
      <summary v="3qsIng" i="0">
パスによるメンバー値の取得
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault(System.Object,System.String)">
      <summary v="4a1HWG" i="0">
パスでnullaableメンバー値を取得すると、すべての例外がキャッチされ、nullが返されます。
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``1(System.Object,System.String)">
      <summary v="4a1HWG" i="0">
パスでnullaableメンバー値を取得すると、すべての例外がキャッチされ、nullが返されます。
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``2(``0,System.String)">
      <summary v="4a1HWG" i="0">
パスでnullaableメンバー値を取得すると、すべての例外がキャッチされ、nullが返されます。
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet(System.Object,System.String,System.Object)">
      <summary v="3EPTh0" i="0">
パスによるメンバー値の設定
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``1(System.Object,System.String,``0)">
      <summary v="3EPTh0" i="0">
パスによるメンバー値の設定
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``2(``0,System.String,``1)">
      <summary v="3EPTh0" i="0">
パスによるメンバー値の設定
</summary>
      <param name="item" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <typeparam name="TITem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="IEM4X" i="0">
Get値デリゲートを取得します。デリゲートのタイプはと:<br />
'Func&lt;TItem, TValue&gt;':= Typeof (TItem) 、= Typeof (TValue) 、= Falseです。<br />
'Func&lt;object, TValue&gt;':= Typeof (オブジェクト),= Typeof (TValue) 、= Falseです。<br />
'Func&lt;object, object&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト),= Falseです。<br />
'Func&lt;TItem、TValue?&gt;':= Typeof (TItem) 、= Typeof (TValue) 、= Trueです。<br />
'Func&lt;object, TValue?&gt;':= Typeof (オブジェクト),= Typeof (TValue) 、= Trueです。<br />
'Func&lt;object, object?&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト),= Trueです。<br /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="243k0x" i="0">アクセスオブジェクトのタイプ</param>
      <param name="path" v="31OaeH" i="0">文字列パス</param>
      <param name="paramType" v="1lMs0o" i="0">アイテムをオブジェクトとして渡す場合は、trueに設定します。</param>
      <param name="valueType" v="RS5c9" i="0">オブジェクトとして値を取得する場合は、trueに設定します。</param>
      <param name="checkNull" v="3hhVUM" i="0">Trueの場合、デリゲートはパスがnullであり、戻り値またはデフォルト値ではないことを確認します。戻り値の型がValueTypeの場合、デリゲートはNullable&lt;T&gt; を返します。
Falseの場合、デリゲートはnullではないパスをチェックしないため、パスにnull値が含まれているか、キーが見つからない場合、例外がスローされます。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type)">
      <summary v="2EGHXe" i="0">
Get valueデリゲートを取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``1(System.String,System.Type)">
      <summary v="2EGHXe" i="0">
Get valueデリゲートを取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``2(System.String)">
      <summary v="2EGHXe" i="0">
Get valueデリゲートを取得する
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault(System.String,System.Type)">
      <summary v="3V8rsK" i="0">
取得nullable値デリゲート
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``1(System.String,System.Type)">
      <summary v="3V8rsK" i="0">
取得nullable値デリゲート
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``2(System.String)">
      <summary v="3V8rsK" i="0">
取得nullable値デリゲート
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetExpression(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="4XJufI" i="0">
Get値式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="paramType" v="0000" i="0" />
      <param name="valueType" v="0000" i="0" />
      <param name="checkNull" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type,System.Type,System.Type,System.Boolean)">
      <summary v="TEvn8" i="0">
を取得すると、ラムダ式の型はと:<br />
'式 &lt;Func&lt;TItem、TValue&gt;&gt;':= Typeof (TItem) 、= Typeof (TValue) 、= Falseです。<br />
'式 &lt;Func&lt;object, TValue&gt;&gt;':= Typeof (オブジェクト),= Typeof (TValue) 、= Falseです。<br />
'式 &lt;Func&lt;object, object&gt;&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト),= Falseです。<br />
'式 &lt;Func&lt;TItem、TValue?&gt;&gt;':= Typeof (TItem) 、= Typeof (TValue) 、= Trueです。<br />
'式 &lt;Func&lt;object, TValue ?&gt;&gt;':= Typeof (オブジェクト),= Typeof (TValue) 、= Trueです。<br />
'式 &lt;Func&lt;object, object ?&gt;&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト),= Trueです。<br /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="checkNull" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="243k0x" i="0">アクセスオブジェクトのタイプ</param>
      <param name="path" v="31OaeH" i="0">文字列パス</param>
      <param name="paramType" v="1lMs0o" i="0">アイテムをオブジェクトとして渡す場合は、trueに設定します。</param>
      <param name="valueType" v="RS5c9" i="0">オブジェクトとして値を取得する場合は、trueに設定します。</param>
      <param name="checkNull" v="3hhVUM" i="0">Trueの場合、デリゲートはパスがnullであり、戻り値またはデフォルト値ではないことを確認します。戻り値の型がValueTypeの場合、デリゲートはNullable&lt;T&gt; を返します。
Falseの場合、デリゲートはnullではないパスをチェックしないため、パスにnull値が含まれているか、キーが見つからない場合、例外がスローされます。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type)">
      <summary v="l9gOr" i="0">
Get値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``1(System.String,System.Type)">
      <summary v="l9gOr" i="0">
Get値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``2(System.String)">
      <summary v="l9gOr" i="0">
Get値ラムダ式を取得する
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault(System.String,System.Type)">
      <summary v="5YTrN" i="0">
Nullable値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``1(System.String,System.Type)">
      <summary v="5YTrN" i="0">
Nullable値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``2(System.String)">
      <summary v="5YTrN" i="0">
Nullable値ラムダ式を取得する
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type,System.Type,System.Type)">
      <summary v="247ukh" i="0">
設定値のデリゲートを取得すると、デリゲートのタイプはと:<br />
'アクション &lt;TItem、TValue&gt;':= Typeof (TItem) 、= Typeof (TValue)。<br />
'Action&lt;object, TValue&gt;':= Typeof (オブジェクト),= Typeof (TValue)。<br />
'Action&lt;object, object&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト)<br /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="3KAWC" i="0">アイテムのタイプ</param>
      <param name="path" v="1tDgZj" i="0">メンバーパス文字列</param>
      <param name="paramType" v="3EPEMR" i="0">着信オブジェクトのタイプ</param>
      <param name="valueType" v="4S22WK" i="0">割り当てオブジェクトのタイプ</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type)">
      <summary v="1tIQdL" i="0">
設定値のデリゲートを取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``1(System.String,System.Type)">
      <summary v="1tIQdL" i="0">
設定値のデリゲートを取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``2(System.String)">
      <summary v="1tIQdL" i="0">
設定値のデリゲートを取得する
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetExpression(System.String,System.Type,System.Type,System.Type)">
      <summary v="2YPZv4" i="0">
セット値式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <param name="paramType" v="0000" i="0" />
      <param name="valueType" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type,System.Type,System.Type)">
      <summary v="4MOdQj" i="0">
設定値のラムダ式を取得します。ラムダ式の型はと:<br />
'表現 &lt;アクション &lt;TItem、TValue&gt;&gt;':= Typeof (TItem) 、= Typeof (TValue)。<br />
'式 &lt;アクション &lt;オブジェクト、TValue&gt;&gt;':= Typeof (オブジェクト),= Typeof (TValue)。<br />
'式 &lt;アクション &lt;オブジェクト、オブジェクト&gt;&gt;':= Typeof (オブジェクト),= Typeof (オブジェクト)<br /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="paramType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /><paramref name="valueType" /></summary>
      <param name="itemType" v="3KAWC" i="0">アイテムのタイプ</param>
      <param name="path" v="1tDgZj" i="0">メンバーパス文字列</param>
      <param name="paramType" v="3EPEMR" i="0">着信オブジェクトのタイプ</param>
      <param name="valueType" v="4S22WK" i="0">割り当てオブジェクトのタイプ</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type)">
      <summary v="132T86" i="0">
設定値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``1(System.String,System.Type)">
      <summary v="132T86" i="0">
設定値ラムダ式を取得する
</summary>
      <param name="itemType" v="0000" i="0" />
      <param name="path" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``2(System.String)">
      <summary v="132T86" i="0">
設定値ラムダ式を取得する
</summary>
      <param name="path" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
      <typeparam name="TValue" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="3kkUvI" i="0">
C.小道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetPropertyOrNull(System.Linq.Expressions.Expression,System.String)">
      <summary v="1RqOfF" i="0">
C?。小道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.GetRootParameterExpression(System.Linq.Expressions.Expression)">
      <summary v="2GqtB8" i="0">
式は次のようになります。ParameterExpression-&gt;MemberExpression1-&gt;MemberExpression2. ..,
「Expression」のルートがParameterExpressionでない場合、これはnullを返します。
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsClass(System.Linq.Expressions.Expression)">
      <summary v="1fYDYr" i="0">
式を確認します。型はクラス、そうでない場合はスローと例外です。
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsNullableTypeOrThrow(System.Linq.Expressions.Expression)">
      <summary v="4ElDLn" i="0">
式を確認します。タイプはNullable&lt;T&gt; で、そうでない場合はスローと例外
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsValueType(System.Linq.Expressions.Expression)">
      <summary v="Ty4KO" i="0">
式を確認します。タイプはValueTypeであり、Nullable&lt;T&gt; ではありません。そうでない場合は、スローと例外
</summary>
      <param name="expression" v="0000" i="0" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="2TjE8o" i="0">
NV!。値。提案、おそらく値なしのInvalidOperationException
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetPropOrNull(System.Linq.Expressions.Expression,System.String)">
      <summary v="1x7cZa" i="0">
NV?。値。小道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValue(System.Linq.Expressions.Expression)">
      <summary v="1rT0TK" i="0">
NV!。値、おそらく値なしのInvalidOperationException
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValueOrNull(System.Linq.Expressions.Expression)">
      <summary v="373AOg" i="0">
NV?。価値
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ParseIndexAccess(System.String)">
      <summary v="1CTdtF" i="0">
プロパティ文字列にインデックス操作があるかどうかを確認し、式を解析します。
</summary>
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.TryConvertToNullable(System.Linq.Expressions.Expression)">
      <summary v="1TR7Jh" i="0">
式の型をNullable型に変換してみてください。NullableでないValueTypeのみを変換できます。
</summary>
      <param name="expression" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ValueTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
      <summary v="4BMgnr" i="0">
V.小道具
</summary>
      <param name="expression" v="0000" i="0" />
      <param name="property" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddDaysSafely(System.DateTime,System.Int32)">
      <summary v="tyQe5" i="0">
System System System System System
関数によるAddDaysは、System.ArgumentOutOfRangeExceptionをスローすることはありません
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddMonthsSafely(System.DateTime,System.Int32)">
      <summary v="2eg2rN" i="0">
System System System System System System System
関数によるAddMonthsは、System.ArgumentOutOfRangeExceptionを投げることはありません
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.AddYearsSafely(System.DateTime,System.Int32)">
      <summary v="31u7rC" i="0">
System System System System System System
関数によるAddYearsは、System.ArgumentOutOfRangeExceptionを投げることはありません
</summary>
      <param name="currentDate" v="0000" i="0" />
      <param name="value" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfDay(System.DateTime)">
      <summary v="rYvKV" i="0">
たとえば、currentDateTimeが2020-01-04 05:34:55の場合:
次の日付shoubleは2021-01-05 00:00:00、それは次の日の開始日です
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfDecade(System.DateTime)">
      <summary v="1kzAtL" i="0">
たとえば、
CurrentDateTimeが2020-01-04 05:34:55の場合:
次の日付shoubleは2030-01-01 00:00:00、それは次の10年の開始日です

CurrentDateTimeが2023-01-04 05:34:55の場合:
次の日付shoubleは2030-01-01 00:00:00、それは次の10年の開始日です

CurrentDateTimeが2018-01-04 05:34:55の場合:
次の日付shouble be 2020-01-01 00:00:00、それは次の10年の開始日です
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfMonth(System.DateTime)">
      <summary v="1z1IDD" i="0">
たとえば、currentDateTimeが2020-01-04 05:34:55の場合:
次の日付shouble be 2020-02-01 00:00:00、それは来月の開始日です
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfQuarter(System.DateTime)">
      <summary v="3VCB6e" i="0">
たとえば、currentDateTimeが2020-01-04 05:34:55の場合:
次の日付shouble be 2020-04-01 00:00:00、それは2020年の次の四半期の開始日です
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DateHelper.GetNextStartDateOfYear(System.DateTime)">
      <summary v="33tvDc" i="0">
たとえば、currentDateTimeが2020-01-04 05:34:55の場合:
次の日付shoubleは2021-01-01 00:00:00、それは来年の開始日です
</summary>
      <param name="date" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePicker`1.GetIndexValue(System.Int32)">
      <summary v="29wd8z" i="0">
ピッカーの値を取得する
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="15XtPd" i="0">
キーボードキーが入力要素内で押されなくなった場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
      <param name="e" v="19uVqq" i="0">入力要素内で押されたキー (組み合わせ) が含まれています</param>
    </member>
    <member name="M:AntDesign.DatePickerBase`1.ChangePickerValue(System.DateTime,System.Nullable{System.Int32})">
      <summary v="4PBJQR" i="0">
ピッカーに表示される日付を変更します。
</summary>
      <param name="date" v="2tF8nX" i="0">保存する新しい日付。</param>
      <param name="index" v="4P8AAT" i="0">入力ボックスのインデックス (0 = inputStartおよび1 = inputEnd) (RangePickerのみ)</param>
    </member>
    <member name="M:AntDesign.DatePickerBase`1.ChangeValue(System.DateTime,System.Int32,System.Boolean)">
      <summary v="2WHZEZ" i="0">
修数
</summary>
      <param name="value" v="0000" i="0" />
      <param name="index" v="0000" i="0" />
      <param name="closeDropdown" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DatePickerBase`1.GetIndexPickerValue(System.Int32)">
      <summary v="wsrBf" i="0">
PickerValue by pickerインデックスを取得します。 インデックスはピッカーパネルを指すことに注意してください
テキストを入力しないでください。 RangePickerの場合、2つの入力が2つのパネルを生成します。
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DayOfWeekHelper.GetDiffForDayOfWeek(System.DayOfWeek)">
      <summary v="2AmivX" i="0">
週の正しい最初の日を取得するために開始日に追加する必要がある日数を返します。
</summary>
      <param name="firstDayOfWeek" v="2NXrGl" i="0">現在のロケールで定義されている週の初日。</param>
      <returns v="4ZXel1" i="0">日のdiff。</returns>
    </member>
    <member name="M:AntDesign.Dialog.AppendToContainer">
      <summary v="rD7kr" i="0">
ボディへのappend
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.CleanShowAnimationAsync">
      <summary v="2e9XUW" i="0">
Clear ant-model enter classを使用すると、user-selectが無効になります。
詳細は、スタイル/mixins/modal-mask.lessを参照してください。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.GetStyle">
      <summary v="449EWV" i="0">
Ant-モーダルスタイル
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.Hide">
      <summary v="B1FcK" i="0">
アニメーションを介してダイアログを非表示にする
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.IsShow">
      <summary v="4TzPoA" i="0">
ダイアログが表示されているかどうかを判断する
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="isFirst" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnCloserClick">
      <summary v="wH6uH" i="0">
Closer (X) クリックイベント
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="1oMDd3" i="0">
タブとESCのキーイベントを聴く
</summary>
      <param name="e" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnMaxBtnClick">
      <summary v="wH6uH" i="0">
Closer (X) クリックイベント
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.OnParametersSetAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.Show">
      <summary v="3EGs1m" i="0">
アニメーションを介してダイアログを表示
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dialog.TryResetModalStyle">
      <summary v="1O67Zt" i="0">
モーダルがドラッグ可能な場合は、最初のショーと同様の位置スタイルをリセットします
</summary>
    </member>
    <member name="M:AntDesign.DialogWrapper.DestroyAsync">
      <summary v="1InHPh" i="0">
DOMツリーからコンポーネントを破壊する
</summary>
    </member>
    <member name="M:AntDesign.DialogWrapper.OnAfterRenderAsync(System.Boolean)">
      <summary v="0000" i="0" />
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DialogWrapper.OnParametersSetAsync">
      <summary v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.CloseClick">
      <summary v="41qy8P" i="0">
Closerがクリックされたときにトリガーされる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.HandleClose(System.Boolean)">
      <summary v="ydVZ5" i="0">
閉じる後のクリーンアップ
</summary>
      <param name="isChangeByParamater" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Drawer.MaskClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="3dYfV8" i="0">
マスクがクリックされたときにトリガーされる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnClose(AntDesign.DrawerRef)">
      <summary v="3VEoDU" i="0">
引き出しを閉じる
</summary>
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnCreate(AntDesign.DrawerRef)">
      <summary v="1IAQRb" i="0">
引き出しを作成して開く
</summary>
    </member>
    <member name="M:AntDesign.DrawerContainer.DrawerService_OnUpdateEvent(AntDesign.DrawerRef)">
      <summary v="3xcPb5" i="0">
引き出しを更新
</summary>
      <param name="drawerRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.CloseAsync">
      <summary v="w8anv" i="0">
Close Confirmダイアログ
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.OpenAsync">
      <summary v="4ME4b" i="0">
[確認] ダイアログを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.UpdateConfigAsync">
      <summary v="3cDh69" i="0">
更新Visible = trueのダイアログ設定の確認
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef.UpdateConfigAsync(AntDesign.DrawerOptions)">
      <summary v="1aknzh" i="0">
新しいConfirmOptionsでConfirmダイアログ設定を更新する
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerRef`1.CloseAsync(`0)">
      <summary v="1fh4wR" i="0">
関闭会
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerService.CreateAsync(AntDesign.DrawerOptions)">
      <summary v="4COGsK" i="0">
結果なしでシンプルな引き出しを作成して開く
</summary>
      <param name="options" v="4Co7ip" i="0">引き出しオプション</param>
      <returns v="4dM9xE" i="0">引き出しの参考</returns>
    </member>
    <member name="M:AntDesign.DrawerService.CreateAsync``3(AntDesign.DrawerOptions,``1)">
      <summary v="3xw7KV" i="0">
テンプレートで引き出しを作成して開きます
</summary>
      <typeparam name="TComponent" v="zYcLf" i="0">DrawerTemplateの実装のタイプ</typeparam>
      <typeparam name="TComponentOptions" v="70Cl2" i="0">
      </typeparam>
      <typeparam name="TResult" v="22qdCS" i="0">戻り値のタイプ</typeparam>
      <param name="config" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <returns v="4dM9xE" i="0">引き出しの参考</returns>
    </member>
    <member name="M:AntDesign.DrawerService.CreateDialogAsync``3(AntDesign.DrawerOptions,``1)">
      <summary v="3IA0Sy" i="0">
引き出しを作成して開く
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DrawerService.UpdateAsync(AntDesign.DrawerRef)">
      <summary v="1KxX7p" i="0">
引き出しを更新する
</summary>
      <param name="drawerRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Dropdown.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="uNBE4" i="0">
トリガークリックを処理します。
</summary>
      <param name="args" v="2rN4Oq" i="0">MouseEventArgs</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.DropdownButton.OnAfterRenderAsync(System.Boolean)">
      <summary v="li9fM" i="0">
オーバーレイトリガーをラッピング要素に取り付けるように強制します。
右ボタン。 右ボタンを包む必要があり、
オーバーレイが最初の子を探しているので
オーバーレイの位置を計算するためのオーバーレイトリガーの要素。
右のボタンがトリガーだった場合、その最初の子
はアイコン/省略記号で、オーバーレイは
高すぎるレンダリング。
</summary>
      <param name="firstRender" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.EnumerableExtensions.AddIf``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
      <summary v="39Zky1" i="0">
条件がtrueのときにアイテムにアイテムを追加する
</summary>
      <typeparam name="T" v="0000" i="0" />
      <param name="items" v="0000" i="0" />
      <param name="condition" v="0000" i="0" />
      <param name="item" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="ne9hr" i="0">
キャンセルボタンがトリガーされたときにコールバックします。これを使用して、終了をキャンセルできます。
时回回をキャンセル,可来取関を闭じます。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.CloseFeedbackAsync">
      <summary v="MRcJX" i="0">
ユーザーがボタンを介してテンプレートを閉じることができるように

</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2P1DPD" i="0">
OKボタンがトリガーされたときにコールバックします。これを使用して、終了をキャンセルできます。
可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="ne9hr" i="0">
キャンセルボタンがトリガーされたときにコールバックします。これを使用して、終了をキャンセルできます。
时回回をキャンセル,可来取関を闭じます。
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2P1DPD" i="0">
OKボタンがトリガーされたときにコールバックします。これを使用して、終了をキャンセルできます。
可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.CloseAsync">
      <summary v="2ZRDin" i="0">
フィードバックコンポーネントを閉じるだけで、OkAsyncまたはOkCancelをトリガーしません
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.OpenAsync">
      <summary v="17W1IJ" i="0">
ちょうど近いフィードバックコンポーネントを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefBase.UpdateConfigAsync">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.FeedbackRefWithOkCancelBase.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2goXMY" i="0">
[キャンセル] ボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FeedbackRefWithOkCancelBase.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2chA2T" i="0">
[OK] ボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.FormItem.GetRulesFromAttributes">
      <summary v="3N16ij" i="0">
ロケール検証メッセージテンプレートを使用するためのFormValidationRuleへのtansform属性
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.HtmlRenderer.HandleException(System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.IFeedbackRef.CloseAsync">
      <summary v="2ZRDin" i="0">
フィードバックコンポーネントを閉じるだけで、OkAsyncまたはOkCancelをトリガーしません
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IFeedbackRef.OpenAsync">
      <summary v="21ZJm2" i="0">
コンポーネントを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IFeedbackRef.UpdateConfigAsync">
      <summary v="YyiiH" i="0">
コンポーネントの更新
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IForm.Reset">
      <summary v="8JhiC" i="0">
すべてのフィールドの値と検証メッセージをリセットします。
</summary>
    </member>
    <member name="M:AntDesign.IForm.SetValidationMessages(System.String,System.String[])">
      <summary v="1QWtyN" i="0">
特定のフィールドの検証メッセージを設定します。
</summary>
      <param name="field" v="0000" i="0" />
      <param name="errorMessages" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IForm.Submit">
      <summary v="1o8vxt" i="0">
すべてのフィールドが有効である間に「OnFinish」をトリガーし、それ以外の場合は「OnFinishFaled」をトリガーします。
</summary>
    </member>
    <member name="M:AntDesign.IForm.Validate">
      <summary v="1O3Irc" i="0">
すべてのフィールドを検証します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IModalTemplate.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="HOT19" i="0">
キャンセルボタンがトリガーされたときにコールバック
可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="1st9il" i="0">
OKボタンがトリガーされたときにコールバック
可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="HOT19" i="0">
キャンセルボタンがトリガーされたときにコールバック
可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
    </member>
    <member name="M:AntDesign.IModalTemplate.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="11XfcB" i="0">
OKボタンがトリガーされたときにコールバック
定定数時的に
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Input`1.Blur">
      <summary v="2TivqD" i="0">
入力要素からフォーカスを削除します。
</summary>
    </member>
    <member name="M:AntDesign.Input`1.Focus(AntDesign.FocusBehavior,System.Boolean)">
      <summary v="2TJZHv" i="0">
オプションの動作で入力コンポーネントの動作に焦点を当てます。
</summary>
      <param name="behavior" v="3ckSUH" i="0">Enum: AntDesign.FocusBehavior</param>
      <param name="preventScroll" v="mJzFU" i="0">Trueの場合、フォーカスを受け取る要素はスクロールされません。</param>
    </member>
    <member name="M:AntDesign.Input`1.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <summary v="2rohGm" i="0">
ユーザーがコンテンツを追加/削除したときに呼び出される
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
      <summary v="1YS4Nn" i="0">
常にtrueを返します。入力文字列が無効な場合はresult = default、入力文字列がnullまたは空の場合はresult = DefaultValue
</summary>
      <param name="value" v="0000" i="0" />
      <param name="result" v="0000" i="0" />
      <param name="validationErrorMessage" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.InputPassword.Focus(AntDesign.FocusBehavior,System.Boolean)">
      <summary v="BBLs9" i="0">
オプションの動作でInputPasswordコンポーネントの動作に焦点を当てます。
Wasmに必要な特別な行動。
</summary>
      <param name="behavior" v="3ckSUH" i="0">Enum: AntDesign.FocusBehavior</param>
      <param name="preventScroll" v="mJzFU" i="0">Trueの場合、フォーカスを受け取る要素はスクロールされません。</param>
    </member>
    <member name="M:AntDesign.Internal.DateTimeInputMaskConverter.Convert(System.String,System.String)">
      <summary v="1qVqcd" i="0">
文字列値をマスクに変換する
</summary>
      <param name="value" v="0000" i="0" />
      <param name="mask" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.IsHiding">
      <summary v="4zx3a" i="0">
オーバーレイが完全に非表示になると、IsPopupはtrueを返します
オーバーレイが非表示 (非表示アニメーションの再生) の場合、IsPopupはfalseを返し、IsHidingはtrueを返します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.UpdateChildState(AntDesign.Internal.Overlay,System.Boolean)">
      <summary v="4HGtC6" i="0">
任意の子オーバーレイショーまたは非表示がある場合に設定
子供が表示されている場合、オーバーレイは非表示になりません
</summary>
      <param name="child" v="0000" i="0" />
      <param name="isChildOverlayShow" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.Overlay.WaitFor(System.Func{System.Boolean},System.Int32,System.Int32)">
      <summary v="WmAnP" i="0">
述語が真になるまで、または述語が真になるまで、特定のミリ秒ごとにチェック述語をプローブします。
Probingsの数が尽きます。
</summary>
      <param name="check" v="DTHnp" i="0">待機後に毎回実行される述語TimeInMilisecondsPerProbingが通過します。</param>
      <param name="probings" v="3vA775" i="0">プロービングの最大数。 この数に達した後、方法は終了する。</param>
      <param name="waitTimeInMilisecondsPerProbing" v="3rKbiP" i="0">各プロービングの間にどれくらい待つか。</param>
      <returns v="VAeqQ" i="0">タスク</returns>
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.Close">
      <summary v="2KR58q" i="0">
オーバーレイを隠します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.IsOverlayShow">
      <summary v="2Ggocw" i="0">
オーバーレイが現在表示されているかどうかを確認します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="uNBE4" i="0">
トリガークリックを処理します。
</summary>
      <param name="args" v="2rN4Oq" i="0">MouseEventArgs</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.OnMouseUp(System.Text.Json.JsonElement)">
      <summary v="4XMUqd" i="0">
ドキュメント上のマウスアップ
</summary>
      <param name="element" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Internal.OverlayTrigger.SetVisible(System.Boolean)">
      <summary v="3vKfxn" i="0">
オーバーレイの可視性を切り替えます。
</summary>
      <param name="visible" v="P3osx" i="0">Boolean: 可視性true/false</param>
    </member>
    <member name="M:AntDesign.IOkCancelRef.CancelAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="2qxEww" i="0">
トリガーキャンセルボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef.OkAsync(AntDesign.ModalClosingEventArgs)">
      <summary v="1AzDVn" i="0">
トリガーOKボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef`1.CancelAsync(`0)">
      <summary v="2qxEww" i="0">
トリガーキャンセルボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.IOkCancelRef`1.OkAsync(`0)">
      <summary v="1AzDVn" i="0">
トリガーOKボタンクリック
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.MenuHelper.EqualsHrefExactlyOrIfTrailingSlashAdded(System.String,System.String)">
      <summary v="45QEiW" i="0">
平等のために2つのURIを比較し、オプションのトレーリングスラッシュを説明します。
</summary>
      <param name="currentUriAbsolute" v="2FTHGm" i="0">現在の場所の絶対URI。</param>
      <param name="hrefAbsolute" v="2oqpNf" i="0">比較する絶対URI。</param>
      <returns v="0721d" i="0">URIが等しい場合、または現在のURIに後続のスラッシュを追加すると、URIが等しくなる場合はtrueです。それ以外の場合は、falseです。</returns>
    </member>
    <member name="M:AntDesign.MenuHelper.IsStrictlyPrefixWithSeparator(System.String,System.String)">
      <summary v="21TnT1" i="0">
文字列値が厳密に別の文字列のプレフィックスであるかどうかを決定します。
</summary>
      <param name="value" v="4Mj5B9" i="0">チェックする文字列の値。</param>
      <param name="prefix" v="3FK6u0" i="0">チェックするプレフィックス。</param>
      <returns v="kserR" i="0">値がプレフィックスの後に区切り文字が続く場合はtrue、そうでない場合はfalseです。</returns>
    </member>
    <member name="M:AntDesign.MenuHelper.ShouldMatch(Microsoft.AspNetCore.Components.Routing.NavLinkMatch,System.String,System.String)">
      <summary v="2Yuawe" i="0">
指定された一致基準に基づいて、現在のURIが指定されたURIと一致するかどうかを決定します。
</summary>
      <param name="match" v="1c2o8O" i="0">一致基準 (正確またはプレフィックス)。</param>
      <param name="currentUriAbsolute" v="2FTHGm" i="0">現在の場所の絶対URI。</param>
      <param name="hrefAbsolute" v="21c5Xn" i="0">照合する絶対URI。</param>
      <returns v="eIoT1" i="0">基準に基づいてURIが一致する場合はtrue、そうでない場合はfalseです。</returns>
    </member>
    <member name="M:AntDesign.MenuLink.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.MenuLink.OnInitialized">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.MenuLink.OnParametersSet">
      <inheritdoc />
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalClosingEventArgs.Reject">
      <summary v="1weYjX" i="0">
モーダルを閉じることを拒否します。
</summary>
    </member>
    <member name="M:AntDesign.ModalRef.CloseAsync">
      <summary v="1C3EuD" i="0">
モーダルダイアログを閉じる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.OpenAsync">
      <summary v="4ej4FH" i="0">
モーダルダイアログを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.SetConfirmLoading(System.Boolean)">
      <summary v="3rjfxG" i="0">
確認ボタンの読み込み状態を設定する
</summary>
      <param name="loading" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef.UpdateConfigAsync">
      <summary v="3HSUvR" i="0">
モーダルの更新
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalRef`1.CancelAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalRef`1.OkAsync(`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.ModalService.CheckConfirmOptionsIsNull(AntDesign.ConfirmOptions)">
      <summary v="ceR4u" i="0">
チェック確認オプションがnull
</summary>
      <param name="options" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CloseModalAsync(AntDesign.ModalRef)">
      <summary v="32KVPZ" i="0">
モーダルダイアログを閉じる
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Confirm(AntDesign.ConfirmOptions)">
      <summary v="446RlY" i="0">
[OK-Cancel Confirm] ダイアログを作成して開く
</summary>
      <param name="props" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.ConfirmAsync(AntDesign.ConfirmOptions)">
      <summary v="4GLQTQ" i="0">
[OK-Cancel Confirm] ダイアログを作成して開き、
OKボタンがクリックされたかどうかを示すbool値を返します
</summary>
      <param name="props" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateAsync(AntDesign.ConfirmOptions)">
      <summary v="mEobg" i="0">
OKを作成して開く-非同期の確認をキャンセル
</summary>
      <param name="config" v="VWReJ" i="0">オプション</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateAsync``3(AntDesign.ConfirmOptions,``1)">
      <summary v="ozXdH" i="0">
テンプレートを作成して開く [確認] ダイアログ
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateConfirmAsync(AntDesign.ConfirmOptions)">
      <summary v="mEobg" i="0">
OKを作成して開く-非同期の確認をキャンセル
</summary>
      <param name="config" v="VWReJ" i="0">オプション</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateConfirmAsync``3(AntDesign.ConfirmOptions,``1)">
      <summary v="ozXdH" i="0">
テンプレートを作成して開く [確認] ダイアログ
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="config" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
モーダルを作成して開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``1(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
モーダルを作成して開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``2(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
テンプレートを使用してモーダルを作成して開く
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <param name="options" v="tybuH" i="0">モーダルオプション</param>
      <param name="componentOptions" v="3DQjZ" i="0">テンプレートcompoenntのオプションを設定する</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModal``3(AntDesign.ModalOptions,``1)">
      <summary v="BZBpW" i="0">
テンプレートコンポーネントを使用してModalを作成して開く
</summary>
      <typeparam name="TComponent" v="32TQtz" i="0">テンプレートコンポーネントのタイプ。</typeparam>
      <typeparam name="TComponentOptions" v="1r24BW" i="0">テンプレートコンポーネントオプションのタイプ。</typeparam>
      <typeparam name="TResult" v="3XbXsR" i="0">テンプレートコンポーネントから返される結果。</typeparam>
      <param name="options" v="tybuH" i="0">モーダルオプション</param>
      <param name="componentOptions" v="3DQjZ" i="0">テンプレートcompoenntのオプションを設定する</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
モーダルを作成して開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``1(AntDesign.ModalOptions)">
      <summary v="2CcdBC" i="0">
モーダルを作成して開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``2(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
テンプレートを使用してモーダルを作成して開く
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateModalAsync``3(AntDesign.ModalOptions,``1)">
      <summary v="UuMrr" i="0">
テンプレートを使用してモーダルを作成して開く
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
      <param name="options" v="0000" i="0" />
      <param name="componentOptions" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync(AntDesign.ModalRef)">
      <summary v="2bOTQb" i="0">
モーダルダイアログを作成または開く
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync``1(AntDesign.ModalRef{``0})">
      <summary v="2bOTQb" i="0">
モーダルダイアログを作成または開く
</summary>
      <param name="modalRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Destroy(AntDesign.ConfirmRef)">
      <summary v="3tfjt5" i="0">
[確認] ダイアログを閉じる
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyAll">
      <summary v="1pE5wT" i="0">
すべての [確認] ダイアログを閉じる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyAllConfirmAsync">
      <summary v="1pE5wT" i="0">
すべての [確認] ダイアログを閉じる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.DestroyConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="2arRzl" i="0">
[確認] ダイアログを閉じる
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Error(AntDesign.ConfirmOptions)">
      <summary v="2ux7xK" i="0">
[OK-キャンセル] [エラー] アイコンを使用して [確認] ダイアログを作成して開く
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.ErrorAsync(AntDesign.ConfirmOptions)">
      <summary v="2Qy7Ap" i="0">
[OK-キャンセル] [エラー] アイコンを使用して [確認] ダイアログを作成して開き、
OKボタンがクリックされたかどうかを示すbool値を返します
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Info(AntDesign.ConfirmOptions)">
      <summary v="2Ho26k" i="0">
[OK-Cancel Confirm] ダイアログをinfoアイコンで作成して開く
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.InfoAsync(AntDesign.ConfirmOptions)">
      <summary v="4m1YE" i="0">
[OK-Cancel Confirm] ダイアログを情報アイコンで作成して開き、
OKボタンがクリックされたかどうかを示すbool値を返します
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.OpenConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="1l2VTY" i="0">
[確認] ダイアログを開く
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Success(AntDesign.ConfirmOptions)">
      <summary v="33yL7U" i="0">
成功アイコンでOK-Cancel Confirmダイアログを作成して開く
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.SuccessAsync(AntDesign.ConfirmOptions)">
      <summary v="4blYzC" i="0">
成功アイコンを使用してOK-Cancel Confirmダイアログを作成して開き、
OKボタンがクリックされたかどうかを示すbool値を返します
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.System#IDisposable#Dispose">
      <summary v="2VmIAJ" i="0">
インターフェイスIDisposableの実装
</summary>
    </member>
    <member name="M:AntDesign.ModalService.Update(AntDesign.ConfirmRef)">
      <summary v="1NFloI" i="0">
更新Visible = trueの確認
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.UpdateConfirmAsync(AntDesign.ConfirmRef)">
      <summary v="1NFloI" i="0">
更新Visible = trueの確認
</summary>
      <param name="confirmRef" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.Warning(AntDesign.ConfirmOptions)">
      <summary v="fbH97" i="0">
[OK-キャンセル] [警告] アイコンを使用して [確認] ダイアログを作成して開く
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ModalService.WarningAsync(AntDesign.ConfirmOptions)">
      <summary v="3rhIU9" i="0">
警告アイコンを使用してOK-Cancel Confirmダイアログを作成して開き、
OKボタンがクリックされたかどうかを示すbool値を返します
</summary>
      <param name="options" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Notification.Config(AntDesign.NotificationGlobalConfig)">
      <summary v="1is6NV" i="0">
グローバル設定の変更
</summary>
      <param name="defaultConfig" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.CloseAsync">
      <summary v="4UcOnP" i="0">
通知ボックスを閉じる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.OpenAsync">
      <summary v="4SH2nV" i="0">
通知ボックスを開く
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync">
      <summary v="3tSEAT" i="0">
Configプロパティを変更したら、通知ボックスを更新します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
      <summary v="1mHuoq" i="0">
通知ボックスの説明とメッセージを更新する
</summary>
      <param name="description" v="0000" i="0" />
      <param name="message" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
      <summary v="2kVQOh" i="0">
通知ボックスの説明を更新する
</summary>
      <param name="description" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Close(System.String)">
      <summary v="3jolhi" i="0">
キーによるクローズ通知
</summary>
      <param name="key" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.CreateRefAsync(AntDesign.NotificationConfig)">
      <summary v="2Bc7tH" i="0">
開かずにNotificationRefを作成するだけです
</summary>
      <param name="config" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Destroy">
      <summary v="39Brkl" i="0">
すべての通知ボックスを破壊する
</summary>
    </member>
    <member name="M:AntDesign.NotificationService.Error(AntDesign.NotificationConfig)">
      <summary v="xrKET" i="0">
NotificationType.Errorスタイルで通知ボックスを開く
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Info(AntDesign.NotificationConfig)">
      <summary v="pEMCC" i="0">
NotificationType.Infoスタイルで通知ボックスを開く
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Open(AntDesign.NotificationConfig)">
      <summary v="3MKyC" i="0">
通知ボックスを開く
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Success(AntDesign.NotificationConfig)">
      <summary v="4DfMLQ" i="0">
NotificationType.Successスタイルで通知ボックスを開く
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.UpdateAsync(System.String,OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},System.Nullable{OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment}})">
      <summary v="3C21Nn" i="0">
存在した通知ボックスを更新する
</summary>
      <param name="key" v="0000" i="0" />
      <param name="description" v="0000" i="0" />
      <param name="message" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Warn(AntDesign.NotificationConfig)">
      <summary v="bXGWQ" i="0">
警告方法に相当
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.NotificationService.Warning(AntDesign.NotificationConfig)">
      <summary v="2FtkJD" i="0">
NotificationType.Warningスタイルで通知ボックスを開く
</summary>
      <param name="config" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Pagination.GetItemIcon(Microsoft.AspNetCore.Components.RenderFragment{AntDesign.PaginationItemRenderContext},System.String)">
      <summary v="yaMOW" i="0">
レンダリングする必要がある計算されたアイコンノード。
</summary>
      <param name="icon" v="0000" i="0" />
      <param name="label" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.RangePicker`1.GetIndexValue(System.Int32)">
      <summary v="3Nl0wm" i="0">
ピッカーインデックスで値を取得する
</summary>
      <param name="index" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.RangePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Int32)">
      <summary v="15XtPd" i="0">
キーボードキーが入力要素内で押されなくなった場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
      <param name="e" v="19uVqq" i="0">入力要素内で押されたキー (組み合わせ) が含まれています</param>
      <param name="index" v="3EB8uv" i="0">ピッカーインデックス-開始日は0、終了日は1を参照します</param>
    </member>
    <member name="M:AntDesign.RangePicker`1.OnValueChange(`0)">
      <summary v="3fp1oJ" i="0">
値の変更を処理します。
値が変更されると、PickerValuesはそれらの新しい値を指す必要があります
または値が渡されなかった場合は現在の日付。
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseAll">
      <summary v="DxSPd" i="0">
閉じるか、ピン留めされていないすべてのページを閉じる
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseCurrent">
      <summary v="4fGDon" i="0">
現在のページを閉じる
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CloseOther(System.String)">
      <summary v="1AstJw" i="0">
指定されたキーを持つページを除くすべてのページを閉じる
</summary>
      <param name="key" v="41HRQc" i="0">指定されたページのキー</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.ClosePage(System.String)">
      <summary v="2DgLqm" i="0">
指定されたキーに対応するページを閉じる
</summary>
      <param name="key" v="41HRQc" i="0">指定されたページのキー</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
      <summary v="1ZV1GJ" i="0">
ナビゲーションなしでタブを作成すると、タブがクリックされるまでページは実際にはレンダリングされません
</summary>
      <param name="pageUrl" v="cpmkn" i="0">ターゲットページのURL</param>
      <param name="titleTemplate" v="40GSf5" i="0">タブのタイトルショー</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,System.String)">
      <summary v="1ZV1GJ" i="0">
ナビゲーションなしでタブを作成すると、タブがクリックされるまでページは実際にはレンダリングされません
</summary>
      <param name="pageUrl" v="cpmkn" i="0">ターゲットページのURL</param>
      <param name="title" v="40GSf5" i="0">タブのタイトルショー</param>
    </member>
    <member name="M:AntDesign.ReuseTabsService.GetAllAssembly">
      <summary v="49IvX1" i="0">
取得所有者の集まり
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.ReloadPage">
      <summary v="3tT3nA" i="0">
現在のページをリロード
</summary>
    </member>
    <member name="M:AntDesign.ReuseTabsService.ReloadPage(System.String)">
      <summary v="OXxMk" i="0">
指定されたキーに対応するページをリロードする
</summary>
      <param name="key" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.ReuseTabsService.ScanReuseTabsPageAttribute">
      <summary v="XkbND" i="0">
特集ReuseTabsPageAttribute特异性
</summary>
    </member>
    <member name="M:AntDesign.Select.Internal.SelectContent`2.GetFirstItemMaxWidth">
      <summary v="43hQcz" i="0">
どのアイテムもオーバーフローする可能性があります。 最初のアイテムの場合、そこにあるとき
SelectContent内の他の要素 (プレフィックス、サフィックス、クリアbtnなど) です。
デフォルトのMaxWidthはSelectContentを強制的に拡大します。 MaxWidthの変更
あふれているアイテムを1行に収めることができます。
TODO: 相対単位を使用する
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.AllOptionsHidden">
      <summary v="40RjGr" i="0">
SelectOptionsリストのすべてのエントリに対してパラメータIsHiddenがtrueに設定されている場合はTrueを返します。
</summary>
      <returns v="2q84ZY" i="0">すべてのアイテムがIsHidden(true) に設定されている場合はtrue</returns>
    </member>
    <member name="M:AntDesign.Select`2.AppendLabelValue(System.String)">
      <summary v="1bSAjX" i="0">
タグモードでラベルアイテムを追加する
</summary>
      <param name="label" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.CreateDeleteSelectOptions">
      <summary v="44SoRK" i="0">
データソースが変更されたときにSelectOptionを作成または削除する
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ElementScrollIntoViewAsync(Microsoft.AspNetCore.Components.ElementReference)">
      <summary v="wAgqW" i="0">
JavaScript経由でアイテムにスクロールします。
</summary>
      <param name="element" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.EvaluateValueChangedOutsideComponent(AntDesign.Select.Internal.SelectOptionItem{`0,`1},`0)">
      <summary v="4NsNUd" i="0">
Bind-Valueがコンポーネントの外部で変更された場合、コンポーネント
選択したアイテムは、渡された新しい値に応じて再選択する必要があります。
</summary>
      <param name="optionItem" v="lDKGf" i="0">選択されたオプションアイテム。</param>
      <param name="value" v="2kKYpM" i="0">選択したオプションアイテムの値。</param>
    </member>
    <member name="M:AntDesign.Select`2.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <summary v="4V1spf" i="0">
Input要素の値がキーボードによって変更された場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
      <param name="e" v="1BvLkq" i="0">入力要素の値を含む</param>
    </member>
    <member name="M:AntDesign.Select`2.OnKeyDownAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="2Eypjm" i="0">
Input要素内でキーが押された場合、メソッドはEventCallback経由で呼び出されます。
このメソッドは、ユーザーがTABを押してトラフ要素をサイクルする場合にTABイベントを取得するために使用されます。
TABが受信されると、オーバーレイは閉じられ、入力要素はぼやけます。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.OnKeyUpAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
      <summary v="15XtPd" i="0">
キーボードキーが入力要素内で押されなくなった場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
      <param name="e" v="19uVqq" i="0">入力要素内で押されたキー (組み合わせ) が含まれています</param>
    </member>
    <member name="M:AntDesign.Select`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4XvNPB" i="0">
ユーザーがタグの閉じるアイコンをクリックした場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ProcessSelectedSelectOptions">
      <summary v="4g8hNe" i="0">
ChildElement SelectOptionsが使用されている場合にのみ使用されます。
Initalizationの後でアイテムがこのプロセスを実行します
が追加され、選択されたものとしてもマークされます。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.ResetValue">
      <summary v="cEne8" i="0">
フォームリセットメソッドによって呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.ScrollToFirstSelectedItemAsync">
      <summary v="OQdQR" i="0">
最初に選択したアイテムを検索し、他のすべてのアイテムについてIsActiveをFalseに設定し、JavaScript経由でscrollIntoView関数を呼び出します。
この方法は、オーバーレイを開いた後、最初に選択されたアイテムにスクロールするために使用される。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetClassMap">
      <summary v="RBCbP" i="0">
CSSクラスを设定してビジュアルスタイルを変更する
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetDefaultActiveFirstItemAsync">
      <summary v="1b9LQT" i="0">
DefaultActiveFirstItemがTrueの場合、IsDisabled(True) でない最初のアイテムが選択されたとおりに設定されます。
アイテムがない場合は、クリアメソッドに戻ります。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetDropdownStyleAsync">
      <summary v="1rNbax" i="0">
Ref (JSInvoke) のBoundingClientRectを取得し、min-widthとwidthをpxで設定します。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetInitialValuesAsync">
      <summary v="nJ8su" i="0">
初期化後の初期値を設定します。メソッドは1回だけ呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.SetInputBlurAsync">
      <summary v="2BVDnI" i="0">
Focusedプロパティがtrueかどうかを確認します。Focusedプロパティをfalseに設定し、
スタイルとDOMを介して入力要素をぼかします。 また、OnBlurアクションを呼び出します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Select`2.TrySetDefaultValueAsync">
      <summary v="2yMz2T" i="0">
値がnull (デフォルト) の場合にOnAfterRenderAsyncによって呼び出されるメソッド
DefaultValueは値を持つか、DefaultActiveFirstItemはTrueです。
</summary>
    </member>
    <member name="M:AntDesign.Select`2.TrySetDefaultValuesAsync">
      <summary v="3y6E36" i="0">
値がnull (デフォルト) の場合にOnAfterRenderAsyncによって呼び出されるメソッド
DefaultValuesは値を持つか、DefaultActiveFirstItemはTrueです。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.ClearSelectedAsync">
      <summary v="38H8Nv" i="0">
SelectValueプロパティをクリアし、双方向バインディングを介してnull (デフォルト) 値を送り返します。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.CloseAsync">
      <summary v="1jx2FJ" i="0">
オーバーレイを閉じる
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.CreateSelectOptionItem(System.String,System.Boolean)">
      <summary v="4s4PA" i="0">
選択オプションアイテムを作成します。 主に新しいタグを作成することを目的としているため、IsAddedTagはtrueにハードコードされています。
</summary>
      <param name="label" v="HyC3F" i="0">渡されたラベルに基づく作成</param>
      <param name="isActive" v="47SihR" i="0">に設定されている場合<c>True</c>[アクティブ] です。</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.EvaluateValuesChangedOutsideComponent(System.Collections.Generic.IEnumerable{`0})">
      <summary v="1z9pAS" i="0">
Bind-値がコンポーネントの外部で変更された場合、コンポーネント
選択したアイテムは、渡された新しい値に従って再選択する必要があります。
TODO :( Perf) ハッシュを使用して、渡された値が現在選択されている値と異なるかどうかを識別することを検討してください。
</summary>
      <param name="values" v="2odFbD" i="0">選択する必要がある値。</param>
    </member>
    <member name="M:AntDesign.SelectBase`2.InvokeOnSelectedItemChanged(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="3K1S7F" i="0">
コードの重複を減らすためにValuesChangedとOnSelectedItemsChangedを呼び出す別の方法。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputBlurAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
      <summary v="4p4QI" i="0">
Input要素がフォーカスを失った場合、メソッドはEventCallBack経由で呼び出されます
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputClearClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="1sG09T" i="0">
メソッドは、ユーザーがInput要素内のClearアイコンをクリックした後、EventCallBack経由で呼び出されます。
すべてのアイテムのIsSelectedプロパティとIsHiddenプロパティをFalseに設定します。 オーバーレイ位置を更新します。
SelectModeはタグまたは複数です。 OnClearSelectedアクションを呼び出します。 値をデフォルトに設定します。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnInputFocusAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
      <summary v="22mu2d" i="0">
Input要素がフォーカスを取得した場合、メソッドはEventCallBack経由で呼び出されます
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4XvNPB" i="0">
ユーザーがタグの閉じるアイコンをクリックした場合、メソッドはEventCallBack経由で呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.OnValuesChangeAsync(System.Collections.Generic.IEnumerable{`0})">
      <summary v="4VfcuR" i="0">
メソッドは、 @ bind-Valuesの値が2方向バインディングによって変更された場合、毎回呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.ResetValue">
      <summary v="cEne8" i="0">
フォームリセットメソッドによって呼び出されます。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.SetInputBlurAsync">
      <summary v="2BVDnI" i="0">
Focusedプロパティがtrueかどうかを確認します。Focusedプロパティをfalseに設定し、
スタイルとDOMを介して入力要素をぼかします。 また、OnBlurアクションを呼び出します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.SelectBase`2.SetInputFocusAsync">
      <summary v="Rq9hv" i="0">
FocusedプロパティがFalseかどうかを確認します。Focusedプロパティをtrueに設定し、
スタイルを設定し、DOM経由で入力要素にフォーカスを設定します。 また、OnFocusアクションを呼び出します。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.SetValueAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
      <summary v="4JZajd" i="0">
このメソッドは、ユーザーがマウスまたはキーボードでアイテムを選択/選択解除するたびに呼び出されます。
この関数の外でIsSelectedプロパティを変更しないでください。
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.UnhideSelectOptions">
      <summary v="1znG6K" i="0">
すべての選択オプションを非表示にします。ただし、<see cref="P:AntDesign.SelectBase`2.HideSelected" />はtrue
</summary>
    </member>
    <member name="M:AntDesign.SelectBase`2.UpdateOverlayPositionAsync">
      <summary v="4VAGyk" i="0">
位置を更新するには、オーバーレイに通知します。
</summary>
    </member>
    <member name="M:AntDesign.Table`1.AntDesign#ITable#OnColumnInitialized">
      <summary v="3j8YuV" i="0">
このメソッドは、すべての列が設定されたときに呼び出されます
</summary>
    </member>
    <member name="M:AntDesign.Table`1.AntDesign#ITable#RebuildColumns(System.Boolean)">
      <summary v="1lzzz9" i="0">
列の変更ごとに、4回再送信する必要があります
<br />1.を呼び出した後に変更された列があることを認識するために一度再レンダリングする<see cref="M:AntDesign.Table`1.OnParametersSet" />、空のChildContentをトリガーします。
<br />2.を呼び出した後、空のChildContentに対して1回再レンダリングします。<see cref="M:AntDesign.ITable.RebuildColumns(System.Boolean)" />配信元コンテンツを再構築するためのレンダリングをトリガーします。
<br />3.を呼び出した後、列を再構築するために再レンダリングします。<see cref="M:AntDesign.Table`1.OnAfterRenderAsync(System.Boolean)" />列の準備ができたら、ロードデータのレンダリングをトリガーします。
<br />4.を呼び出した後、データをリロードするための再レンダリング<see cref="M:AntDesign.Table`1.OnColumnInitialized" /></summary>
      <param name="add" v="4duF5f" i="0">列が追加/削除されているかどうか</param>
      <remarks>
            lifecycle process: columns was changed -&gt; render#1(true) -&gt; column add/dispose -&gt; call rebuild(call render#2) -&gt; render#2(true) -&gt; OnAfterRenderAsync#2 (call render#3) -&gt; render#3(true)
            -&gt; OnColumnInitialized call render#4 -&gt; OnAfterRenderAsync#4 -&gt; OnAfterRenderAsync#3 -&gt; OnAfterRenderAsync#1 (the last 2 steps are duplicated and useless)
            </remarks>
      <returns v="3rKED9" i="0">再建を開始するかどうか</returns>
    </member>
    <member name="M:AntDesign.Table`1.ClearSelectedRows">
      <summary v="1OT3qB" i="0">
現在のページの選択された行をクリア
</summary>
    </member>
    <member name="M:AntDesign.Table`1.InvokeDataSourceHasChanged">
      <summary v="0pX44" i="0">
テーブルの状態を更新するためにデータソースが変更された後、このメソッドを呼び出します。
</summary>
            Make the method protected to allow derived classes to call it.
        </member>
    <member name="M:AntDesign.Table`1.SelectAll">
      <summary v="1zOBwL" i="0">
現在のページのすべての行を選択します
</summary>
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(`0)">
      <summary v="20O0Av" i="0">
アイテムを1つ選択
</summary>
      <param name="item" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.ICollection{System.String})">
      <summary v="ZRvp2" i="0">
ご利用ください<see cref="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})" />可能であれば、代わりに
仮想化が有効になっている場合、このメソッドは非表示の行からアイテムを正しく選択しません。
</summary>
    </member>
    <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})">
      <summary v="31oGTq" i="0">
選択したすべてのアイテムを設定する
</summary>
      <param name="items" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Table`1.UnselectAll">
      <summary v="4ITSSv" i="0">
現在のページのすべての行を選択解除する
</summary>
    </member>
    <member name="M:AntDesign.TableModels.QueryModel`1.GetFilterExpression">
      <summary v="2TdfGV" i="0">
Entity FrameworkのようなORMの現在のフィルター式を取得します。
また、データソースで式を実行することで、フィルタリングされたデータを取得できます。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TableModels.SortModel`1.Compare(`0,`0)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.Tabs.AddTabPane(AntDesign.TabPane)">
      <summary v="2lX08c" i="0">
追加<see cref="T:AntDesign.TabPane" /><see cref="T:AntDesign.Tabs" /></summary>
      <param name="tabPane" v="1YkHnc" i="0">追加するAntTabPane</param>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exception cref="T:System.ArgumentException">An AntTabPane with the same key already exists</exception>
    </member>
    <member name="M:AntDesign.TextArea.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:AntDesign.Tree`1.AddChildNode(AntDesign.TreeNode{`0})">
      <summary v="1A85p0" i="0">
ノードの追加
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.CollapseAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="4cORof" i="0">
すべてのノードを崩壊させる
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.DeselectAll">
      <summary v="3ZRxKG" i="0">
すべての選択を解除
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.ExpandAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="gV1mk" i="0">
すべてのノードを拡張
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="eypyL" i="0">
ノードを探す
</summary>
      <param name="predicate" v="3xQfy6" i="0">プレディケート</param>
      <param name="recursive" v="DgcMI" i="0">再帰的な検索</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.GetNode(System.String)">
      <summary v="3HcUYe" i="0">
キーからTreeNodeを取得する
</summary>
      <param name="key" v="1LwHKs" i="0">キー</param>
    </member>
    <member name="M:AntDesign.Tree`1.TriggerOnSelect(AntDesign.TreeNode{`0})">
      <summary v="Z97NP" i="0">
イベントOnSelectをトリガーする
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.TriggerOnUnselect(AntDesign.TreeNode{`0})">
      <summary v="3ttz41" i="0">
イベントOnUnselectをトリガーする
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.Tree`1.UncheckAll">
      <summary v="4fGZnq" i="0">
すべてのノードのチェックを解除
</summary>
    </member>
    <member name="M:AntDesign.Tree`1.UpdateSelectedKeys">
      <summary v="4Ddxug" i="0">
バインディングデータの更新
</summary>
    </member>
    <member name="M:AntDesign.TreeIndent`1.GetParentNode(AntDesign.TreeNode{`0},System.Int32)">
      <summary v="21vmtR" i="0">
特定のレベルの親ノードを見つけるには
</summary>
      <param name="node" v="0000" i="0" />
      <param name="level" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddChildNode(`0)">
      <summary v="4Woj0Y" i="0">
子ノードの追加
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddNextNode(`0)">
      <summary v="4UcvGu" i="0">
ノードの次にノードを追加する
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddNode(AntDesign.TreeNode{`0})">
      <summary v="11Ldf2" i="0">
親ノードにノードを追加
</summary>
      <param name="treeNode" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.AddPreviousNode(`0)">
      <summary v="1chHuB" i="0">
ノードの前にノードを追加する
</summary>
      <param name="dataItem" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.CollapseAll">
      <summary v="0InAm" i="0">
すべての子ノードを崩壊させる
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.Downgrade">
      <summary v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.DragMoveDown(AntDesign.TreeNode{`0})">
      <summary v="24tZuq" i="0">
ターゲットの下部にドラッグアンドドロップ
</summary>
      <param name="treeNode" v="3w3ozB" i="0">目标</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.DragMoveInto(AntDesign.TreeNode{`0})">
      <summary v="2DcpoU" i="0">
子ノードへのドラッグアンドドロップ
</summary>
      <param name="treeNode" v="3w3ozB" i="0">目标</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.Expand(System.Boolean)">
      <summary v="1Mpf35" i="0">
ノードを拡張します。
</summary>
      <param name="expanded" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.ExpandAll">
      <summary v="34qmuW" i="0">
すべての子ノードを拡張
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
      <summary v="3HXbN3" i="0">
ノードを見つける
</summary>
      <param name="predicate" v="3xQfy6" i="0">プレディケート</param>
      <param name="recursive" v="DgcMI" i="0">再帰的な検索</param>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentChildDataItems">
      <summary v="2YwfqR" i="0">
得上上上上集集合
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentChildNodes">
      <summary v="1kSesi" i="0">
親ノードの子を取得します。
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.GetParentNodes">
      <summary v="2gK1NO" i="0">
親データセットの取得
</summary>
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveDown">
      <summary v="3BRJY8" i="0">
ノードを下に移動する
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveInto(AntDesign.TreeNode{`0})">
      <summary v="1U6xDN" i="0">
ノードが子ノードに移動します。
</summary>
      <param name="treeNode" v="4IISiB" i="0">ターゲットノード</param>
    </member>
    <member name="M:AntDesign.TreeNode`1.MoveUp">
      <summary v="2ZOqfQ" i="0">
ノードを上に移動する
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.OnCheckBoxClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="2xEXWN" i="0">
選択ボックスがクリックされたときにトリガーされる
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.OnSwitcherClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="3iMt4O" i="0">
ノードスイッチ
</summary>
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.OpenPropagation(System.Boolean)">
      <summary v="4fa8eR" i="0">
拡大した両親
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.Remove">
      <summary v="sd5wW" i="0">
削除
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.RemoveNode">
      <summary v="dGVDZ" i="0">
現在のノードを削除する
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.SetChecked(System.Boolean)">
      <summary v="1BDNpt" i="0">
チェックボックスの状態を設定する
</summary>
      <param name="check" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetChildChecked(AntDesign.TreeNode{`0},System.Boolean,System.Boolean,System.Boolean)">
      <summary v="1UnxiI" i="0">
子ノードのチェックボックスのステータスを設定します。
</summary>
      <param name="subnode" v="0000" i="0" />
      <param name="check" v="0000" i="0" />
      <param name="isManual" v="0000" i="0" />
      <param name="forceRecursive" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetParentTargetContainer(System.Boolean)">
      <summary v="bQvqo" i="0">
ドラッグアンドドロップのターゲットノードコンテナーを設定します。
</summary>
    </member>
    <member name="M:AntDesign.TreeNode`1.SetSelected(System.Boolean)">
      <summary v="x0QNF" i="0">
選択状態の設定
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SetTargetBottom(System.Boolean)">
      <summary v="1VAIex" i="0">
ターゲット位置を解放するノードを設定します
</summary>
      <param name="value" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.SwitchAllNodes(AntDesign.TreeNode{`0},System.Boolean)">
      <summary v="3aHy9v" i="0">
节约展示开関の闭
</summary>
      <param name="node" v="0000" i="0" />
      <param name="expanded" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.UpdateCheckState(System.Nullable{System.Boolean})">
      <summary v="9fWzk" i="0">
チェックステータスの更新
</summary>
      <param name="halfChecked" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNode`1.Upgrade">
      <summary v="12yZbC" i="0">
ノードのアップグレード
</summary>
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDblClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
      <summary v="0000" i="0" />
      <param name="args" v="0000" i="0" />
      <returns v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnd(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="9faGh" i="0">
終了をドラッグ
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnter(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragLeave(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="1uwlgW" i="0">
ターゲットを解放する
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragOver(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="2qw6tf" i="0">
ターゲットがOffsetXの距離を超えて右に移動した場合、子として扱うことができます
</summary>
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="M:AntDesign.TreeNodeTitle`1.OnDrop(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
      <summary v="0000" i="0" />
      <param name="e" v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Affix.OffsetBottom">
      <summary v="1bVteV" i="0">
ビューポートの下部からのオフセット (ピクセル単位)
</summary>
    </member>
    <member name="P:AntDesign.Affix.OffsetTop">
      <summary v="2aj1Wk" i="0">
ビューポートの上部からのオフセット (ピクセル単位)
</summary>
    </member>
    <member name="P:AntDesign.Alert.AfterClose">
      <summary v="1HTYuL" i="0">
閉じるアニメーションが終了したときに呼び出される
</summary>
    </member>
    <member name="P:AntDesign.Alert.Banner">
      <summary v="1rzYJy" i="0">
バナーとして表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Alert.ChildContent">
      <summary v="3ll9iq" i="0">
追加コンテンツ
</summary>
    </member>
    <member name="P:AntDesign.Alert.Closable">
      <summary v="h5EMt" i="0">
アラートを閉じることができるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Alert.CloseText">
      <summary v="29NGpS" i="0">
テキストを閉じて表示する
</summary>
    </member>
    <member name="P:AntDesign.Alert.Description">
      <summary v="3xZDj2" i="0">
アラートの追加コンテンツ
</summary>
    </member>
    <member name="P:AntDesign.Alert.Icon">
      <summary v="rqvuO" i="0">
カスタムアイコン、showIconが真のときに効果的
</summary>
    </member>
    <member name="P:AntDesign.Alert.IconType">
      <summary v="4EXXPV" i="0">
表示するアイコン。
</summary>
    </member>
    <member name="P:AntDesign.Alert.Message">
      <summary v="3ySxVB" i="0">
アラートの内容
</summary>
    </member>
    <member name="P:AntDesign.Alert.OnClose">
      <summary v="3qPRmi" i="0">
アラートが閉じられたときのコールバック。
</summary>
    </member>
    <member name="P:AntDesign.Alert.ShowIcon">
      <summary v="2CtP65" i="0">
アイコンを表示するかどうか。
</summary>
    </member>
    <member name="P:AntDesign.Alert.Type">
      <summary v="4TLMol" i="0">
アラートスタイルのタイプ、オプション: 成功、情報、警告、エラー
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Affix">
      <summary v="G5LeF" i="0">
アンカーの固定モード
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Bounds">
      <summary v="2ba1Sf" i="0">
アンカーエリアの境界距離
</summary>
    </member>
    <member name="P:AntDesign.Anchor.GetContainer">
      <summary v="2yuhxT" i="0">
スクロールコンテナ
</summary>
    </member>
    <member name="P:AntDesign.Anchor.GetCurrentAnchor">
      <summary v="4JAkIk" i="0">
アンカーハイライトをカスタマイズする
</summary>
    </member>
    <member name="P:AntDesign.Anchor.Key">
      <summary v="13ppKL" i="0">
キーが変更されたときにリンクリストを更新するために使用されます。
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OffsetBottom">
      <summary v="4gFv5O" i="0">
スクロールの位置を計算するときに下からオフセットするピクセル
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OffsetTop">
      <summary v="1vMGhz" i="0">
スクロールの位置を計算するときに上からオフセットするピクセル
</summary>
    </member>
    <member name="P:AntDesign.Anchor.OnClick">
      <summary v="4N09j8" i="0">
クリックイベントを処理するようにハンドラーを設定する
</summary>
    </member>
    <member name="P:AntDesign.Anchor.ShowInkInFixed">
      <summary v="11ujva" i="0">
固定モードでインクボールを表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Anchor.TargetOffset">
      <summary v="39FgZF" i="0">
アンカースクロールオフセット、デフォルトは<see cref="P:AntDesign.Anchor.OffsetTop" /></summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Href">
      <summary v="3zX1xf" i="0">
ハイパーリンクのターゲット
</summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Target">
      <summary v="278vCU" i="0">
リンクされたURLを表示する場所を指定します
</summary>
    </member>
    <member name="P:AntDesign.AnchorLink.Title">
      <summary v="y1NoB" i="0">
ハイパーリンクの内容
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Class">
      <summary v="1PA7jq" i="0">
DOM要素の1つ以上のクラス名を指定します。
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Ref">
      <summary v="3v0RLn" i="0">
DOM要素に対して返されたElementRef参照。
</summary>
    </member>
    <member name="P:AntDesign.AntDomComponentBase.Style">
      <summary v="34unoz" i="0">
DOM要素のインラインスタイルを指定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputBoolComponentBase.CheckedChanged">
      <summary v="3VLzSp" i="0">
バインドされたチェック済み値を更新するコールバックを取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.AdditionalAttributes">
      <summary v="3jnG2N" i="0">
作成された要素に適用される追加の属性のコレクションを取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CultureInfo">
      <summary v="OrqPJ" i="0">
文字列を値に、値を文字列に変換するときに使用される文化
InputNumberコンポーネントに役立ちます。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CurrentValue">
      <summary v="4WBLIM" i="0">
入力の現在の値を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString">
      <summary v="DJ3yY" i="0">
文字列として表される入力の現在の値を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.EditContext">
      <summary v="3o9jfY" i="0">
関連する<see cref="P:AntDesign.AntInputComponentBase`1.EditContext" />を参照してください。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.FieldIdentifier">
      <summary v="4LejCf" i="0">
取得します。<see cref="P:AntDesign.AntInputComponentBase`1.FieldIdentifier" />バインドされた値に対して
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.NameAttributeValue">
      <summary v="2QEQYC" i="0">
入力の "name" 属性に使用される値を取得します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.Size">
      <summary v="P25m2" i="0">
入力ボックスのサイズ。 注: フォームのコンテキストでは、
「Large」サイズが使用されます。 利用可能: 「大」「デフォルト」「小」
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.Value">
      <summary v="yoUC3" i="0">
入力の値を取得または設定します。 これは双方向バインディングで使用する必要があります。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.ValueChanged">
      <summary v="1XH9uJ" i="0">
バインドされた値を更新するコールバックを取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AntInputComponentBase`1.ValueExpression">
      <summary v="iOY7r" i="0">
バインドされた値を識別する式を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.ActiveValue">
      <summary v="3fAvMK" i="0">
高 (参照)
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.AllowFilter">
      <summary v="24Ovzi" i="0">
過
フィルタリングを許可
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.AutoCompleteOptions">
      <summary v="13tbuq" i="0">
列表示集合
オブジェクトコレクションの一覧表示
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.BoundaryAdjustMode">
      <summary v="KChSv" i="0">
オーバーレイ調整戦略 (たとえば、ブラウザのサイズ変更が行われている場合)。 チェック
詳細はenum。
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.CompareWith">
      <summary v="3JD1Kz" i="0">
、
コントラスト、2つのオブジェクトが同じかどうかを比較するために使用
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.FilterExpression">
      <summary v="3yC7cw" i="0">
过酸化表示达式
フィルター式
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionDataItems">
      <summary v="2DAw7L" i="0">

リストデータアイテム形式のデータソースをバインドする
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionFormat">
      <summary v="3nrqPc" i="0">
指定指定: 可自定义格
フォーマットオプション、表示形式をカスタマイズできます
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OptionTemplate">
      <summary v="1nOobb" i="0">
選択式
オプションテンプレート
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.OverlayTemplate">
      <summary v="4Xek7P" i="0">
有选択式
すべてのオプションテンプレート
</summary>
    </member>
    <member name="P:AntDesign.AutoComplete`1.SelectedItem">
      <summary v="1eV7pf" i="0">
选択的な项
</summary>
    </member>
    <member name="P:AntDesign.Avatar.Overflow">
      <summary v="XJk6e" i="0">
グループ最大数以上
</summary>
    </member>
    <member name="P:AntDesign.BackTop.TargetSelector">
      <summary v="3UmJzr" i="0">
「」を実行します。
</summary>
    </member>
    <member name="P:AntDesign.Badge.ChildContent">
      <summary v="3K0w9c" i="0">
このアイテムを包みます。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Color">
      <summary v="3hwCN6" i="0">
バッジステータスドットの色をカスタマイズします。 このパラメータを使用すると、バッジがステータスドットになります。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Count">
      <summary v="3xDbds" i="0">
バッジに表示する番号
</summary>
    </member>
    <member name="P:AntDesign.Badge.CountTemplate">
      <summary v="3mO9Ri" i="0">
カウントの代わりに表示するテンプレート
</summary>
    </member>
    <member name="P:AntDesign.Badge.Dot">
      <summary v="2fwY3p" i="0">
カウントの代わりにドットを表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Badge.Offset">
      <summary v="2TKOcL" i="0">
バッジドットのオフセットを設定します (左、上)
</summary>
    </member>
    <member name="P:AntDesign.Badge.OverflowCount">
      <summary v="4wMP5" i="0">
表示する最大数
</summary>
    </member>
    <member name="P:AntDesign.Badge.PresetColor">
      <summary v="48RxSA" i="0">
バッジステータスドットをプリセット色に設定します。 このパラメータを使用すると、バッジがステータスドットになります。
</summary>
    </member>
    <member name="P:AntDesign.Badge.ShowZero">
      <summary v="An9Bu" i="0">
カウントがゼロのときにバッジを表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Badge.Size">
      <summary v="2hUVCd" i="0">
バッジのサイズ
</summary>
    </member>
    <member name="P:AntDesign.Badge.Status">
      <summary v="2SAJpA" i="0">
バッジドットをステータスカラーに設定します。 このパラメータを使用すると、バッジがステータスドットになります。
</summary>
    </member>
    <member name="P:AntDesign.Badge.Text">
      <summary v="mNMHX" i="0">
ステータスドットの横にある表示テキスト
</summary>
    </member>
    <member name="P:AntDesign.Badge.Title">
      <summary v="GmAt5" i="0">
バッジの上にホバリングするときに表示するテキスト。 Countの値のデフォルト
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.ChildContent">
      <summary v="3K0w9c" i="0">
このアイテムを包みます。
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Color">
      <summary v="45tQm" i="0">
リボン色をカスタマイズ
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Placement">
      <summary v="1w1VYs" i="0">
リボンの配置を設定します。
</summary>
    </member>
    <member name="P:AntDesign.BadgeRibbon.Text">
      <summary v="2umtFr" i="0">
リボンのテキスト内容を設定します。
</summary>
    </member>
    <member name="P:AntDesign.Breadcrumb.Separator">
      <summary v="1HcP2j" i="0">
カスタムセパレータ
</summary>
    </member>
    <member name="P:AntDesign.Button.AriaLabel">
      <summary v="3lc7zV" i="0">
Aria-label属性の値を設定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Block">
      <summary v="4dlKNJ" i="0">
ボタンの幅を親の幅に合わせるオプション
</summary>
    </member>
    <member name="P:AntDesign.Button.ChildContent">
      <summary v="2ZM4UH" i="0">
ボタンの内容。
</summary>
    </member>
    <member name="P:AntDesign.Button.Color">
      <summary v="Zhn2Z" i="0">
ボタンの色を设定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Danger">
      <summary v="38p6E3" i="0">
ボタンの危険状態を設定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Disabled">
      <summary v="2k5NmL" i="0">
「ボタン」が無効かどうか。
</summary>
    </member>
    <member name="P:AntDesign.Button.Ghost">
      <summary v="Sd2qi" i="0">
背景を透明にし、テキストとボーダーの色を反転します
</summary>
    </member>
    <member name="P:AntDesign.Button.HtmlType">
      <summary v="RzH3K" i="0">
ボタン要素の元のhtmlタイプを設定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Icon">
      <summary v="WDN78" i="0">
ボタンのアイコンコンポーネントを設定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Loading">
      <summary v="3cOuxj" i="0">
ローディングインジケータを表示します。 ロードロジックを自分で書く必要があります。
</summary>
    </member>
    <member name="P:AntDesign.Button.NoSpanWrap">
      <summary v="4UYg0o" i="0">
&lt;Span&gt; でラップしない
</summary>
    </member>
    <member name="P:AntDesign.Button.OnClick">
      <summary v="2T2oFB" i="0">
「ボタン」がクリックされたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Button.OnClickStopPropagation">
      <summary v="QjNIe" i="0">
ボタンをクリックしたときにイベントを伝播しないでください。
</summary>
    </member>
    <member name="P:AntDesign.Button.Shape">
      <summary v="4PnLWH" i="0">
ボタンの形状を設定できます: 'circle' | 'round' または 'null' (デフォルトは長方形)。
</summary>
    </member>
    <member name="P:AntDesign.Button.Size">
      <summary v="P6T6U" i="0">
ボタンのサイズを设定します。
</summary>
    </member>
    <member name="P:AntDesign.Button.Type">
      <summary v="V9Agx" i="0">
ボタンのタイプ。
</summary>
    </member>
    <member name="P:AntDesign.Carousel.Autoplay">
      <summary v="4Zlm4r" i="0">
自動的にスクロールするかどうか
</summary>
    </member>
    <member name="P:AntDesign.Carousel.DotPosition">
      <summary v="44UFvq" i="0">
ドットの位置は、上、下、左または右のいずれかになります。<see cref="T:AntDesign.CarouselDotPosition" /></summary>
    </member>
    <member name="P:AntDesign.Carousel.Effect">
      <summary v="0D1WU" i="0">
移行効果、<see cref="T:AntDesign.CarouselEffect" /></summary>
    </member>
    <member name="P:AntDesign.Cascader.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
オーバーレイ調整戦略 (たとえば、ブラウザのサイズ変更が行われている場合)
</summary>
    </member>
    <member name="P:AntDesign.Cascader.OnChange">
      <summary v="4P1mUg" i="0">
代わりにSelectedNodeChangedを使用してください。
</summary>
    </member>
    <member name="P:AntDesign.CloseEventArgs`1.Cancel">
      <summary v="1g27YO" i="0">
Trueの場合、コンポーネントは閉じることができません。
</summary>
    </member>
    <member name="P:AntDesign.Collapse.Animation">
      <summary v="4N3BlR" i="0">
展開/崩壊アニメーションを有効にするかどうか
</summary>
    </member>
    <member name="P:AntDesign.Column`1.Filtered">
      <summary v="2XyWA9" i="0">
DataSourceがフィルタリングされているかどうか。 フィルターアイコンはtrueのときにアクティブになります。
</summary>
    </member>
    <member name="P:AntDesign.Column`1.OnFilter">
      <summary v="4e8Sfq" i="0">
フィルタリング時に行が表示されるかどうかを判断する関数
<para>
パラメータ1: フィルタアイテムの値
</para><para>
パラメータ2: 列の値
</para></summary>
    </member>
    <member name="P:AntDesign.Confirm.Config">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Confirm.ConfirmRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Confirm.OnRemove">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button1Props">
      <summary v="3uYyxi" i="0">
LTRレイアウトの左端ボタンのプロパティ
</summary>
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button2Props">
      <summary v="22oJ1V" i="0">
LTRレイアウトのセカンダリボタンのプロパティ
</summary>
    </member>
    <member name="P:AntDesign.ConfirmButtonOptions.Button3Props">
      <summary v="4QlFFO" i="0">
LTRレイアウトの3番目のボタンのプロパティ
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.AbortText">
      <summary v="4dymfT" i="0">
中止ボタンテキスト
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.CancelText">
      <summary v="3YxACC" i="0">
ボタンテキストをキャンセル
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.IgnoreText">
      <summary v="4CzbV2" i="0">
ボタンテキストを無視する
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.NoText">
      <summary v="1MTUhf" i="0">
ボタンテキストなし
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.OkText">
      <summary v="1kbJyX" i="0">
OKボタンテキスト
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.RetryText">
      <summary v="3UaGPH" i="0">
再試行ボタンのテキスト
</summary>
    </member>
    <member name="P:AntDesign.ConfirmLocale.YesText">
      <summary v="eXHQf" i="0">
[はい] ボタンのテキスト
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.AutoFocusButton">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button1Props">
      <summary v="3zpJsY" i="0">
LTRレイアウトの左端のボタン
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button1Text">
      <summary v="QZq7a" i="0">
LTRレイアウトの左端のボタンは、ConfirmLocaleをオーバーライドします
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button2Props">
      <summary v="2XllId" i="0">
左側の2番目のボタンはLTRレイアウトにあります
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button2Text">
      <summary v="2jO8Xs" i="0">
左側の2番目のボタンはLTRレイアウトにあり、ConfirmLocaleをオーバーライドします
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button3Props">
      <summary v="twE2H" i="0">
LTRレイアウトの右端のボタン
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Button3Text">
      <summary v="Y306A" i="0">
LTRレイアウトの右端のボタンは、ConfirmLocaleをオーバーライドします
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.CancelButtonProps">
      <summary v="3bEw4J" i="0">
OK-[確認] ダイアログのキャンセルボタンの小道具をキャンセルします。 Button2Propsに相当します。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.CancelText">
      <summary v="1TKAGv" i="0">
左ボタンの2番目の [キャンセル] ボタンの内容を設定する: [キャンセル] または [いいえ] ボタンをクリックすると、ConfirmLocaleがオーバーライドされます。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.ClassName">
      <summary v="4ZPZXD" i="0">
".Ant-modal" の要素のクラス名
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Content">
      <summary v="LVRKT" i="0">
チャイルドコンテンツ
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn1Text">
      <summary v="q3Wg3" i="0">
わかった
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn2Text">
      <summary v="1G3tB3" i="0">
キャンセル
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.DefaultBtn3Text">
      <summary v="3tdu1K" i="0">
無視する
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Icon">
      <summary v="34Ek9o" i="0">
左上のアイコンを確認
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Locale">
      <summary v="4ZCiPk" i="0">
ロケールの確認
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkButtonProps">
      <summary v="4fyyWA" i="0">
OK-[確認] ダイアログの [OK] ボタンの小道具をキャンセルします。 Button1Propsに相当します。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkCancel">
      <summary v="3FnioJ" i="0">
OKの [キャンセル] ボタンを表示-[確認をキャンセル] ダイアログを表示する
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkText">
      <summary v="1UJ85J" i="0">
左側のボタンの [OK] ボタンの内容を設定します。[OK] または [はい] ボタンで、ConfirmLocaleをオーバーライドします。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OkType">
      <summary v="hftSf" i="0">
左ボタンのOKボタンタイプを設定します: OKまたははいボタン
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OnCancel">
      <summary v="297oJB" i="0">
[OK-Cancel Confirm] ダイアログの場合、 [キャンセル] ボタンをクリックしたコールバック。
ModalServiceモードで作成されたConfirmでのみトリガーされます。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.OnOk">
      <summary v="WcOPM" i="0">
[OK-キャンセル] [確認] ダイアログの場合、 [OK] ボタンでコールバックをクリックします。
ModalServiceモードで作成されたConfirmでのみトリガーされます。
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Style">
      <summary v="4Bzv48" i="0">
を参照してください。 Ant-modal要素のスタイル
</summary>
    </member>
    <member name="P:AntDesign.ConfirmOptions.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ConfirmRef.Config">
      <summary v="1kUbEo" i="0">
ダイアログオプションの確認
</summary>
    </member>
    <member name="P:AntDesign.ConfirmRef.Service">
      <summary v="33W2aX" i="0">
ModalService
</summary>
    </member>
    <member name="P:AntDesign.ConfirmRef`1.OnCancel">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.ConfirmRef`1.OnOk">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.DatePickerBase`1.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
オーバーレイ調整戦略 (たとえば、ブラウザのサイズ変更が行われている場合)
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.ChangeOnClose">
      <summary v="2QN4Qc" i="0">
ぼかし後の入力値の保存
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.IsNullable">
      <summary v="1y4yhm" i="0">
TValueがnullable型の場合、情報を格納します。
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.OnClear">
      <summary v="2qqn9J" i="0">
クリアボタンをクリックしたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.DatePickerBase`1.Placement">
      <summary v="12BNeH" i="0">
選択ボックスがポップアップする位置
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.CalendarDateRender">
      <summary v="3GeJLc" i="0">
カレンダー用。DateCellRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.CalendarMonthCellRender">
      <summary v="1b4EGp" i="0">
カレンダー用MonthCellRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.DateRender">
      <summary v="1faJpx" i="0">
カレンダー用。DateFullCellRender、DatePicker.DateRender
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.IsShowTime">
      <summary v="3q0ltB" i="0">
DatePickerWithTimePanelでのみ使用
</summary>
    </member>
    <member name="P:AntDesign.DatePickerPanelBase`1.MonthCellRender">
      <summary v="1rnJ5M" i="0">
カレンダー用。MonthFullCellRender、DatePicker。MonthCellRender
</summary>
    </member>
    <member name="P:AntDesign.Dialog.SentinelStart">
      <summary v="1bBGgs" i="0">
タブスタートコントロールID
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.BodyStyle">
      <summary v="Bh4MH" i="0">
Ant-モーダル-ボディスタイル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ChildContent">
      <summary v="LVRKT" i="0">
チャイルドコンテンツ
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ClassName">
      <summary v="4ZPZXD" i="0">
".Ant-modal" の要素のクラス名
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Closable">
      <summary v="122WS7" i="0">
Show ant-modal-closer
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.CloseIcon">
      <summary v="1Bc5mm" i="0">
より近いアイコンRenderFragment、デフォルトは "X" です
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ConfirmLoading">
      <summary v="3IUGTG" i="0">
OKボタンの読み込み視覚効果を適用するかどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DefaultMaximized">
      <summary v="3BcFs7" i="0">
コンポーネントの初期化中にダイアログを最大化すると、最大値は無視されます。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DestroyOnClose">
      <summary v="45nYFl" i="0">
モーダルが閉じた後にDOMからモーダルを削除するかどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Draggable">
      <summary v="3zmBrO" i="0">
ドラガブルモーダル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.DragInViewport">
      <summary v="4eoCF0" i="0">
ビューポート内でのみドラッグアンドドロップ
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Footer">
      <summary v="3C0yk" i="0">
モーダルフッター
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.ForceRender">
      <summary v="KgRwM" i="0">
開く前にモーダルドームを強制的にレンダリングするかどうか。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Header">
      <summary v="2e3Pxq" i="0">
モーダルヘッダー
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.MaxBodyHeight">
      <summary v="2FuBJq" i="0">
最大モーダルボディコンテンツの高さ
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Maximizable">
      <summary v="4CJFl8" i="0">
ショーモーダル最大化ボタン
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
モーダルが通常の状態にあるときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnCancel">
      <summary v="297oJB" i="0">
[OK-Cancel Confirm] ダイアログの場合、 [キャンセル] ボタンをクリックしたコールバック。
ModalServiceモードで作成されたConfirmでのみトリガーされます。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnClosed">
      <summary v="2jjyi0" i="0">
ダイアログが閉じた後のトリガー
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.OnOk">
      <summary v="WcOPM" i="0">
[OK-キャンセル] [確認] ダイアログの場合、 [OK] ボタンでコールバックをクリックします。
ModalServiceモードで作成されたConfirmでのみトリガーされます。
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.Resizable">
      <summary v="1COtwc" i="0">
Resizable (水平方向のみ)
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
モーダルが最大化されたときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.DialogOptions.WrapClassName">
      <summary v="3xRJ9X" i="0">
モーダルダイアログのコンテナのクラス名
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.CancelButtonProps">
      <summary v="2Vf3Gr" i="0">
ボタンの小道具をキャンセル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.CancelText">
      <summary v="3qDtWd" i="0">
モーダルデフォルトのフッターキャンセルテキスト
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Centered">
      <summary v="1nfblX" i="0">
センター表示かどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.GetContainer">
      <summary v="1e0xvG" i="0">
モーダル親DOMを取得または設定する
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Keyboard">
      <summary v="4DS9c2" i="0">
サポートプレスescを閉じるかどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Mask">
      <summary v="4N1u35" i="0">
ショーマスクかどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.MaskClosable">
      <summary v="1DBAFK" i="0">
マスク (モーダルの外側の領域) をクリックしたときにモーダルダイアログを閉じるかどうか
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.MaskStyle">
      <summary v="vgNzt" i="0">
ダイアログのマスク要素のスタイル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkButtonProps">
      <summary v="3Ndw8d" i="0">
OKボタンの小道具
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkText">
      <summary v="2IMgZI" i="0">
[OK] ボタンのテキスト
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.OkType">
      <summary v="1XT62s" i="0">
OKボタンのボタンタイプ
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.PrefixCls">
      <summary v="3GXzUH" i="0">
クラス名のプレフィックス
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Rtl">
      <summary v="MHb3Z" i="0">
はRTL
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Title">
      <summary v="1gdKE7" i="0">
文字列のモーダルダイアログのタイトル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.TitleTemplate">
      <summary v="3OT4NB" i="0">
RenderFragmentのモーダルダイアログのタイトル
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.Width">
      <summary v="7XF2B" i="0">
モーダルダイアログの幅
</summary>
    </member>
    <member name="P:AntDesign.DialogOptionsBase.ZIndex">
      <summary v="10GCuH" i="0">
モーダルのzインデックス
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.ChildContent">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.Config">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.Dialog">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.DialogWrapper.OnAfterHide">
      <summary v="a7xve" i="0">
OnAfterRenderAsyncメソッドで表示されている場合のトリガー
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.OnAfterShow">
      <summary v="1VqOVh" i="0">
OnAfterRenderAsyncメソッドで表示がtrueの場合にトリガーされます
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.OnBeforeDestroy">
      <summary v="1w3viE" i="0">
DOMツリーからコンポーネントを破壊する前に。 そして、あなたはセットCancelEventArgsによって破壊をキャンセルすることができます。Cancel = true
</summary>
    </member>
    <member name="P:AntDesign.DialogWrapper.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Divider.Orientation">
      <summary v="2K2sRS" i="0">
'Left' | 'right' | 'center'
</summary>
    </member>
    <member name="P:AntDesign.Divider.Type">
      <summary v="2qbWzY" i="0">
'Horizontal' | 'vertical'
</summary>
    </member>
    <member name="P:AntDesign.Drawer.BodyStyle">
      <summary v="1sASnm" i="0">
        <para>
引き出しボディ式
</para>
        <para>
モーダルボディ要素のボディスタイル。 高さ、パディングなど。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Closable">
      <summary v="1fIsaV" i="0">
        <para>
上角的な閉閉
</para>
        <para>
[引き出し] ダイアログの右上に閉じる (x) ボタンが表示されているかどうか。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.HeaderStyle">
      <summary v="1Bz9Hy" i="0">
        <para>
引き出しヘッダー头
</para>
        <para>
モーダルヘッダー要素のヘッダースタイル。 高さ、パディングなど。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Height">
      <summary v="1VGvyG" i="0">
        <para>
高、当<see cref="P:AntDesign.Drawer.Placement" />用「上」「下」時生
</para>
        <para>
配置が「上」または「下」の場合のみ、引き出しダイアログの高さ。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Keyboard">
      <summary v="pHsEM" i="0">
        <para>
円円円円円円闭
</para>
        <para>
キーボードescオフをサポートするかどうか
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Mask">
      <summary v="31se3b" i="0">
        <para>

</para>
        <para>
マスクを表示するかどうか。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.MaskClosable">
      <summary v="41uooW" i="0">
        <para>
閉
</para>
        <para>
マスク (引き出しの外側の領域) をクリックして、引き出しを閉じるかどうか。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.MaskStyle">
      <summary v="1dtjUI" i="0">
        <para>
式
</para>
        <para>
引き出しのマスク要素のスタイル。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetTransform">
      <summary v="1ovClK" i="0">
设置引き出し式 (引出し式) 、后后期式 (オフセット)
</summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetX">
      <summary v="4SM4Ck" i="0">
        <para>
X轴方向的増加量 (X轴ほうほう的増加量 'left 'reft' right'yr') です。
</para>
        <para>
配置が「左」または「右」の場合のみ、X座標オフセット (px) です。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OffsetY">
      <summary v="2jVNIe" i="0">
        <para>
Y軸方向的 (Y軸方向的) 時
</para>
        <para>
配置が「トップ」または「ボトム」の場合のみ、Y座標オフセット (px) です。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OnClose">
      <summary v="1HSpIg" i="0">
        <para>
在関闭前回调查事业、在関闭先回调查事业<see cref="P:AntDesign.Drawer.Visible" />设计せfalse
</para>
        <para>
ユーザーがマスク、閉じるボタン、またはキャンセルボタンをクリックしたときに呼び出されるコールバックを指定します。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.OnOpen">
      <summary v="4aE0BV" i="0">
        <para>
引き出し打开前回调查事
</para>
        <para>
引き出しが表示される前に呼び出されるコールバックを指定する
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Placement">
      <summary v="2FjAtl" i="0">
        <para>
引出し的配置、字型配置、 "left" | "right" | "top" | "bottom"
</para>
        <para>
引き出しの配置、オプションは、左、上、右、下にすることができます
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Title">
      <summary v="2uiszR" i="0">
        <para>
标
</para>
        <para>
引き出しのタイトル。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.Transform">
      <summary v="oxkit" i="0">
设置引き出し式 (引出し式) オフセット (引出し式)
</summary>
    </member>
    <member name="P:AntDesign.Drawer.Visible">
      <summary v="4Gf60Q" i="0">
        <para>
引出し可见
</para>
        <para>
引き出しダイアログが表示されるかどうか。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.VisibleChanged">
      <summary v="Fls9t" i="0">
VisibleのEventCallbackトリガーが変更されました。
</summary>
    </member>
    <member name="P:AntDesign.Drawer.Width">
      <summary v="1CSOF0" i="0">
        <para>
度、度<see cref="P:AntDesign.Drawer.Placement" />用「左」「右」時生
</para>
        <para>
配置が「左」または「右」の場合のみ、引き出しダイアログの幅。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.WrapClassName">
      <summary v="tZAG7" i="0">
        <para>
ドローイングの话外器のタイプ名
</para>
        <para>
Drawerダイアログのコンテナのクラス名。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.Drawer.ZIndex">
      <summary v="3TOr6I" i="0">
        <para>
设置引き出し的z-index
</para>
        <para>
引き出しのzインデックス。
</para>
      </summary>
    </member>
    <member name="P:AntDesign.DrawerOpenEventArgs.Cancel">
      <summary v="3EbA1B" i="0">
「」をご利用ください。
結果: trueになりました。
イベントをキャンセルするかどうかを示す値を取得または設定します。
戻り値: イベントをキャンセルする場合はtrue、それ以外の場合はfalseです。
</summary>
    </member>
    <member name="P:AntDesign.DrawerOptions.Placement">
      <summary v="434MBO" i="0">
"Left" | "right" | "top" | "bottom"
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Block">
      <summary v="4dlKNJ" i="0">
ボタンの幅を親の幅に合わせるオプション
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsClass">
      <summary v="2JSYNV" i="0">
各ボタンのcssクラスを同じ文字列に設定できます
または別に。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsRender">
      <summary v="2CfA26" i="0">
完全にカスタマイズ可能なボタン。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.ButtonsStyle">
      <summary v="3pYu7U" i="0">
各ボタンのスタイルを同じ文字列に設定できます
または別に。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Danger">
      <summary v="EU9VT" i="0">
ボタンの危険状態を設定する
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Ghost">
      <summary v="x4g06" i="0">
複雑な背景、通常はホームページのある状況で使用されます。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Icon">
      <summary v="3hn7FB" i="0">
右にレンダリングされるアイコン
をクリックします。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Loading">
      <summary v="3zCufH" i="0">
読み込みアイコンが含まれるかどうかを示します。
Trueに設定すると、ドロップダウンはアクティブになりません。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Size">
      <summary v="qmBSM" i="0">
ボタンのサイズ。
</summary>
    </member>
    <member name="P:AntDesign.DropdownButton.Type">
      <summary v="485Sk2" i="0">
各ボタンのタイプを同じ文字列に設定できます
または別に。 AntDesign.ButtonTypeヘルパークラスを使用します。
</summary>
    </member>
    <member name="P:AntDesign.FeedbackComponent`1.FeedbackRef">
      <summary v="11Cl1m" i="0">
外部からテンプレートを渡すことができるオプション
</summary>
    </member>
    <member name="P:AntDesign.FeedbackComponent`1.OkCancelRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackComponent`2.OkCancelRefWithResult">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.AntDesign#IFeedbackRef#ModalTemplate">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.OnClose">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.FeedbackRefBase.OnOpen">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnCancel">
      <summary v="uSJz1" i="0">
キャンセルボタンまたはより近いクリック時に呼び出す
</summary>
    </member>
    <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnOk">
      <summary v="xi0GX" i="0">
[OK] ボタンをクリックしたときに呼び出す
</summary>
    </member>
    <member name="P:AntDesign.Flex.Align">
      <summary v="2At4GH" i="0">
横軸の方向に要素の位置合わせを設定します
参照align-アイテム https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
</summary>
    </member>
    <member name="P:AntDesign.Flex.Component">
      <summary v="243oNo" i="0">
カスタム要素タイプ
</summary>
    </member>
    <member name="P:AntDesign.Flex.FlexCss">
      <summary v="F363V" i="0">
Flex CSSの速記プロパティ
参照フレックス https://developer.mozilla.org/en-US/docs/Web/CSS/flex
</summary>
    </member>
    <member name="P:AntDesign.Flex.Gap">
      <summary v="Uut0G" i="0">
グリッド間のギャップを設定する
小さい | 中 | 大きい | 文字列 | 数
</summary>
    </member>
    <member name="P:AntDesign.Flex.Justify">
      <summary v="3zFpKI" i="0">
主轴の方向の要素の位置合わせを设定します
参照正当化-コンテンツ https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
</summary>
    </member>
    <member name="P:AntDesign.Flex.Vertical">
      <summary v="rxl5t" i="0">
フレックスの垂直方向は、flex-direction: columnを使用します。
</summary>
    </member>
    <member name="P:AntDesign.Flex.Wrap">
      <summary v="rE4AA" i="0">
要素を1行に表示するか、複数行に表示するかを設定する
参照フレックスラップ: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Autocomplete">
      <summary v="2cp7Sy" i="0">
入力要素がデフォルトでブラウザによって自動的に値を完了できるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Enhance">
      <summary v="vrllB" i="0">
有効にすると、ページを完全にリロードせずにフォーム送信が実行されます。 これは、フォームにデータエンハンスを追加することと同じです。
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Method">
      <summary v="36C0mf" i="0">
フォームの送信に使用されるHttpメソッド
</summary>
    </member>
    <member name="P:AntDesign.Form`1.Name">
      <summary v="1i6Jp4" i="0">
フォームハンドラー名を取得または設定します。 これは、サーバー側のエンドポイントに投稿するために必要です。
または、フォームインスタンスの取得に使用します。<see cref="T:AntDesign.FormProviderFinishEventArgs" />を参照してください。
</summary>
    </member>
    <member name="P:AntDesign.Form`1.RequiredMark">
      <summary v="0PrxO" i="0">
フォームに必要な/オプションのフィールドラベルが表示される方法を変更します。
<list type="bullet"><item>必須-必須フィールドをマークします</item><item>オプション-オプションフィールドをマークします</item><item>なし-必須/オプションに関係なく、フィールドをマークしません</item></list></summary>
    </member>
    <member name="P:AntDesign.Form`1.ValidateOnChange">
      <summary v="4Lbt9x" i="0">
コンポーネントの値が変更されたときに検証を有効にする
</summary>
    </member>
    <member name="P:AntDesign.FormItem.LabelStyle">
      <summary v="VhFGJ" i="0">
にのみ适用されるスタイル<label />要素を使用します。
LabelTemplateが設定されている場合は適用されません。
</summary>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.Definitions">
      <summary v="1ORrMe" i="0">
各列を定义するアクション
</summary>
      <param name="propertyName" v="3HDKAv" i="0">列をバインドするプロパティの名前。</param>
      <param name="column" v="3n42MC" i="0">列インスタンスは、具体的な列型に明示的にキャストする必要があります。</param>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.HideColumnsByName">
      <summary v="Ree44" i="0">
プロパティ名で列を非表示にします。
</summary>
    </member>
    <member name="P:AntDesign.GenerateColumns`1.Range">
      <summary v="3qtd4o" i="0">
表示する必要がある列の範囲を特定します。
</summary>
    </member>
    <member name="P:AntDesign.Icon.Theme">
      <summary v="3RjsZn" i="0">
'Fill' | 'outline' | 'twotone';
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.ModalTemplate">
      <summary v="BHg9M" i="0">
フィードバック内部コンポーネントのイベントを取得する
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.OnClose">
      <summary v="2JaQDk" i="0">
フィードバック終了
</summary>
    </member>
    <member name="P:AntDesign.IFeedbackRef.OnOpen">
      <summary v="49INqh" i="0">
フィードバックオープン
</summary>
    </member>
    <member name="P:AntDesign.IForm.EditContext">
      <summary v="z1gfH" i="0">
フォームから現在のEditContextを取得します。
</summary>
    </member>
    <member name="P:AntDesign.IForm.IsModified">
      <summary v="4RJ8hI" i="0">
フォームが変更されているかどうか。
</summary>
    </member>
    <member name="P:AntDesign.IForm.Model">
      <summary v="kFSC0" i="0">
フォームがバインドされているデータオブジェクト。
</summary>
    </member>
    <member name="P:AntDesign.IForm.Name">
      <summary v="zR1Ov" i="0">
フォームの名前。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AddOnAfter">
      <summary v="8vf60" i="0">
入力フィールドの後 (右側) に表示されるラベルテキスト。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AddOnBefore">
      <summary v="36H0rJ" i="0">
入力フィールドの前 (左側) に表示されるラベルテキスト。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AllowClear">
      <summary v="gEOSA" i="0">
クリアなアイコンで入力コンテンツを削除できるようにする
</summary>
    </member>
    <member name="P:AntDesign.Input`1.AutoComplete">
      <summary v="1aFWnI" i="0">
入力HTML要素のオートコンプリート属性を制御します。
デフォルト = true
</summary>
    </member>
    <member name="P:AntDesign.Input`1.BindOnInput">
      <summary v="2efoKI" i="0">
入力時に値を変更するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Bordered">
      <summary v="2zghRL" i="0">
ボーダースタイルがあるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Input`1.DebounceMilliseconds">
      <summary v="3QPF7H" i="0">
ユーザーが停止するまでKeyUpイベントの処理を遅らせる
所定の時間のタイピング。 デフォルトは250 msです。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.DefaultValue">
      <summary v="1t7Dcf" i="0">
初期入力コンテンツ
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Disabled">
      <summary v="2pb5l" i="0">
入力が無効かどうか。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.InputElementSuffixClass">
      <summary v="2XanWf" i="0">
入力要素クラスに追加されるCssクラス
最後のクラスエントリとして
</summary>
    </member>
    <member name="P:AntDesign.Input`1.MaxLength">
      <summary v="lftDP" i="0">
最大の長さ
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnBlur">
      <summary v="ZLSVg" i="0">
入力がフォーカスを失うときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnChange">
      <summary v="ptUEL" i="0">
コンテンツが変更されたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnClear">
      <summary v="3PGUwN" i="0">
「ClearIcon」をクリックしてコンテンツがクリアされたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnFocus">
      <summary v="44qPny" i="0">
入力がフォーカスを受け取ったときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnInput">
      <summary v="2OIWbo" i="0">
値が入力されたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnkeyDown">
      <summary v="3ksyLG" i="0">
キーが押されたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnkeyUp">
      <summary v="2t1JgE" i="0">
キーがリリースされたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnMouseUp">
      <summary v="1ZcYJf" i="0">
マウスボタンが解放されたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Input`1.OnPressEnter">
      <summary v="1KYPr0" i="0">
Enterキーが押されたときにトリガーされるコールバック関数
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Placeholder">
      <summary v="4Bbqr0" i="0">
入力フィールドの期待値を説明するプロンプト情報を提供する
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Prefix">
      <summary v="1gKiV2" i="0">
入力のプレフィックスアイコン。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.ReadOnly">
      <summary v="5klsi" i="0">
存在する場合、入力フィールドが読み取り専用であることを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.StopPropagation">
      <summary v="35yoCv" i="0">
Onclickおよびblurイベントの伝播を制御します。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Suffix">
      <summary v="e99Ci" i="0">
入力のサフィックスアイコン。
</summary>
    </member>
    <member name="P:AntDesign.Input`1.Type">
      <summary v="31w74n" i="0">
入力のタイプは以下を参照してください。MDN (type = 'textarea' の代わりに 'Input.TextArea' を使用)
</summary>
    </member>
    <member name="P:AntDesign.Input`1.WrapperStyle">
      <summary v="2dMr07" i="0">
ラッパーのCSSスタイルを設定します。 コンポーネントが表示されている場合に使用されます: プレフィックス/接尾辞
またはparamterセットがあります<seealso cref="P:AntDesign.Input`1.AllowClear" />またはコンポーネント用:<see cref="T:AntDesign.InputPassword" />
と<see cref="T:AntDesign.Search" />を参照してください。 これらの場合、html span要素が使用されます
HTML入力要素をラップします。
<seealso cref="P:AntDesign.Input`1.WrapperStyle" />はスパン要素で使用されます。
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.ChildContent">
      <summary v="42rJBC" i="0">
InputGroupによってラップされたコンテンツ。
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.Compact">
      <summary v="4LIr5D" i="0">
コンパクトスタイルを使用するかどうか
</summary>
    </member>
    <member name="P:AntDesign.InputGroup.Size">
      <summary v="46I7pX" i="0">
InputGroupのサイズは、含まれる入力フィールドのサイズを指定する。
利用可能: 大きいデフォルト小さい
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.IconRender">
      <summary v="4TMYeJ" i="0">
カスタムアイコンのレンダリング
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.ShowPassword">
      <summary v="2B8kH0" i="0">
パスワードを表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.InputPassword.VisibilityToggle">
      <summary v="1v25GF" i="0">
ショートグルボタンかどうか
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.HiddenMode">
      <summary v="3QUJQe" i="0">
デフォルトでは、オーバーレイがない場合、オーバーレイはコンテンツをレンダリングしません
活性化 (少なくとも1回表示)。 HiddenMode = trueの設定
レンダリングプロセスを通过します。
ユースケース: コンポーネントを選択します。<see cref="T:AntDesign.SimpleSelectOption" />または<see cref="T:AntDesign.SelectOption`2" />
HiddenMode = trueが必要なため、選択オプションが初期化され、
潜在的なデフォルトは適切にレンダリングできます。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.HorizontalOffset">
      <summary v="3vWYjR" i="0">
トリガーとオーバーレイ間の水平オフセット、デフォルトは4
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.ParentTrigger">
      <summary v="48SclE" i="0">
ネストされたオーバーレイ (たとえば、メニュー-&gt; サブメニュー) で使用されます。
トリガーは別のオーバーレイです。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.Trigger">
      <summary v="4bvUky" i="0">
オーバーレイをトリガーするコンポーネントを表示します。
</summary>
    </member>
    <member name="P:AntDesign.Internal.Overlay.VerticalOffset">
      <summary v="1HnpzC" i="0">
トリガーとオーバーレイ間の垂直オフセット、デフォルトは4
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.BoundaryAdjustMode">
      <summary v="KChSv" i="0">
オーバーレイ調整戦略 (たとえば、ブラウザのサイズ変更が行われている場合)。 チェック
詳細はenum。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.ChildContent">
      <summary v="1gMxc" i="0">
トリガー (リンク、ボタンなど)
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.ComplexAutoCloseAndVisible">
      <summary v="3UGtkY" i="0">

オートオフとVisibleコントロールの両方が閉じる
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Disabled">
      <summary v="2QRQsZ" i="0">
トリガーが無効かどうか。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.HiddenMode">
      <summary v="wznUH" i="0">
オーバーレイコンポーネントに転送されるプロパティ。 オーバーレイに相談する
より詳細な説明のためのプロパティ。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.InlineFlexMode">
      <summary v="1XN23m" i="0">
(Unboundでは使用されません) ラッピングdivスタイルを 'display: inline-flex;'に設定します。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.IsButton">
      <summary v="25Xeqt" i="0">
ボタンのように行動する: クリックしたときにOnClickを呼び出す
(OnClickDivがオーバーライドされ、baseを呼び出さない場合を除きます)。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnClick">
      <summary v="3d74MK" i="0">
Triggerがクリックされたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMaskClick">
      <summary v="ikdSq" i="0">
コールバック-トリガートリガーのOnMouseUpイベントに相当します。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseEnter">
      <summary v="35YiFL" i="0">
マウスがトリガー境界に入ったときのコールバック。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseLeave">
      <summary v="1VUc5I" i="0">
マウスがトリガー境界を離れるときのコールバック。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnOverlayHiding">
      <summary v="24gkPj" i="0">
オーバーレイが隠れているときのコールバック。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OnVisibleChange">
      <summary v="3buQek" i="0">
オーバーレイの可視性が変化しているときのコールバック。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Overlay">
      <summary v="2RFxLE" i="0">
オーバーレイコンテンツ (トリガーが有効になった後にレンダリングされるもの)
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayClassName">
      <summary v="3QEUgi" i="0">
Overlayコンテナカスタムcssクラス。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayEnterCls">
      <summary v="2LgbEv" i="0">
オーバーレイが表示されたときにオーバーレイに追加されたCssクラス。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayHiddenCls">
      <summary v="12iLR6" i="0">
オーバーレイが非表示のときにオーバーレイに追加されるCssクラス。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayLeaveCls">
      <summary v="1PwGmh" i="0">
オーバーレイが非表示のときにオーバーレイに追加されたCssクラス。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.OverlayStyle">
      <summary v="2XefjF" i="0">
オーバーレイdivに追加されるCssスタイル。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.PlacementCls">
      <summary v="WTn3s" i="0">
「Placement」パラメーターに基づくデフォルトの配置クラスをオーバーライドします。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.PopupContainerSelector">
      <summary v="2eHWNH" i="0">
オーバーレイのコンテナになるものを定義します。
使用例: オーバーレイを
スクロール可能なエリア。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Trigger">
      <summary v="40VgVu" i="0">
トリガーモード。 配列を渡すことで複数にすることができます。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.TriggerReference">
      <summary v="1DTqfD" i="0">
トリガー要素への参照を手動で設定します。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Unbound">
      <summary v="2o8VWA" i="0">
ChildElement with ElementReferenceは、divのラッピングを回避するために設定されています。
</summary>
    </member>
    <member name="P:AntDesign.Internal.OverlayTrigger.Visible">
      <summary v="18BKHv" i="0">
オーバーレイの実行可能性を切り替えます。
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef.OnCancel">
      <summary v="3A1HW6" i="0">
キャンセルボタンまたはより近いクリック時に呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef.OnOk">
      <summary v="pmyYN" i="0">
[OK] ボタンをクリックしたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef`1.OnCancel">
      <summary v="uSJz1" i="0">
キャンセルボタンまたはより近いクリック時に呼び出す
</summary>
    </member>
    <member name="P:AntDesign.IOkCancelRef`1.OnOk">
      <summary v="xi0GX" i="0">
[OK] ボタンをクリックしたときに呼び出す
</summary>
    </member>
    <member name="P:AntDesign.Mentions.LoadOptions">
      <summary v="27wMxz" i="0">
ユーザーが @ シンボルの後に値を入力したときに表示するための言及オプションを動的にロードする
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.ActiveClass">
      <summary v="2vOtf4" i="0">
NavLinkに適用されるCSSクラス名を取得または設定します。
現在のルートはNavLink hrefと一致します。
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.ChildContent">
      <summary v="23NMCf" i="0">
コンポーネントの子コンテンツを取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.MenuLink.Match">
      <summary v="3aS9Lu" i="0">
URL一致の動作を表す値を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.Modal.AfterClose">
      <summary v="22x97b" i="0">
モーダルが閉じたときに呼び出される関数を指定する
</summary>
    </member>
    <member name="P:AntDesign.Modal.BodyStyle">
      <summary v="20QVv7" i="0">
モーダルボディ要素のボディスタイル。 高さ、パディングなど
</summary>
    </member>
    <member name="P:AntDesign.Modal.CancelButtonProps">
      <summary v="43SP5U" i="0">
キャンセルボタンの小道具
</summary>
    </member>
    <member name="P:AntDesign.Modal.CancelText">
      <summary v="36siBe" i="0">
キャンセルボタンのテキストまたはRenderFragment、それはModalLocaleをオーバーライドします
</summary>
    </member>
    <member name="P:AntDesign.Modal.Centered">
      <summary v="4ae1Lx" i="0">
中央
</summary>
    </member>
    <member name="P:AntDesign.Modal.ChildContent">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Modal.Closable">
      <summary v="6Ku7u" i="0">
モーダルダイアログの右上に閉じる (x) ボタンが表示されているかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.CloseIcon">
      <summary v="1Bc5mm" i="0">
より近いアイコンRenderFragment、デフォルトは "X" です
</summary>
    </member>
    <member name="P:AntDesign.Modal.ConfirmLoading">
      <summary v="3IUGTG" i="0">
OKボタンの読み込み視覚効果を適用するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.DefaultMaximized">
      <summary v="iMY02" i="0">
コンポーネントの初期化中にモーダルを最大化すると、最大値は無視されます。
</summary>
    </member>
    <member name="P:AntDesign.Modal.DestroyOnClose">
      <summary v="eSgaw" i="0">
OnCloseで子コンポーネントをマウント解除するかどうか、デフォルトはfalse
</summary>
    </member>
    <member name="P:AntDesign.Modal.Draggable">
      <summary v="2CuRqx" i="0">
モーダルダイアログボックスをドラッグするかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.DragInViewport">
      <summary v="4eoCF0" i="0">
ビューポート内でのみドラッグアンドドロップ
</summary>
    </member>
    <member name="P:AntDesign.Modal.Footer">
      <summary v="geWVh" i="0">
フッターのコンテンツ、デフォルトのボタンが不要な場合はフッター = nullとして設定
</summary>
    </member>
    <member name="P:AntDesign.Modal.ForceRender">
      <summary v="2f0TiM" i="0">
開く前にモーダルドームを強制的にレンダリングするかどうか。
</summary>
    </member>
    <member name="P:AntDesign.Modal.GetContainer">
      <summary v="18bBhe" i="0">
モーダル親DOMを取得または設定します。デフォルトはnullです。これはdocument.bodyを指定しています。
</summary>
    </member>
    <member name="P:AntDesign.Modal.Header">
      <summary v="2AdhVw" i="0">
ヘッダーの内容
</summary>
    </member>
    <member name="P:AntDesign.Modal.Keyboard">
      <summary v="4DS9c2" i="0">
サポートプレスescを閉じるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.Locale">
      <summary v="8rCHK" i="0">
モーダルロケール
</summary>
    </member>
    <member name="P:AntDesign.Modal.Mask">
      <summary v="4N1u35" i="0">
ショーマスクかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaskClosable">
      <summary v="1DBAFK" i="0">
マスク (モーダルの外側の領域) をクリックしたときにモーダルダイアログを閉じるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaskStyle">
      <summary v="37Y5Kb" i="0">
モーダルのマスク要素のスタイル
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaxBodyHeight">
      <summary v="RA58v" i="0">
最大モーダルコンテンツの身長
</summary>
    </member>
    <member name="P:AntDesign.Modal.Maximizable">
      <summary v="4CJFl8" i="0">
ショーモーダル最大化ボタン
</summary>
    </member>
    <member name="P:AntDesign.Modal.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
モーダルが通常の状態にあるときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.Modal.ModalRef">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Modal.OkButtonProps">
      <summary v="y5TMV" i="0">
OKボタンの小道具
</summary>
    </member>
    <member name="P:AntDesign.Modal.OkText">
      <summary v="3XDkqM" i="0">
[OK] ボタンのRenderFragmentのテキストは、ModalLocaleをオーバーライドします
</summary>
    </member>
    <member name="P:AntDesign.Modal.OkType">
      <summary v="1XT62s" i="0">
OKボタンのボタンタイプ
</summary>
    </member>
    <member name="P:AntDesign.Modal.OnCancel">
      <summary v="1CxuiP" i="0">
ユーザーがマスクをクリックしたり、右上のボタンを閉じたり、 [キャンセル] ボタンをクリックしたときに呼び出される関数を指定します。
</summary>
    </member>
    <member name="P:AntDesign.Modal.OnOk">
      <summary v="1gOn2R" i="0">
ユーザーが [OK] ボタンをクリックしたときに呼び出される関数を指定する
</summary>
    </member>
    <member name="P:AntDesign.Modal.Resizable">
      <summary v="1COtwc" i="0">
Resizable (水平方向のみ)
</summary>
    </member>
    <member name="P:AntDesign.Modal.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
モーダルが最大化されたときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.Modal.Rtl">
      <summary v="MHb3Z" i="0">
はRTL
</summary>
    </member>
    <member name="P:AntDesign.Modal.Title">
      <summary v="1pU6Fn" i="0">
モーダルダイアログのタイトル。 <param>タイトルテンプレート</param>!= Null、<param>タイトル</param>有効になりません
</summary>
    </member>
    <member name="P:AntDesign.Modal.TitleTemplate">
      <summary v="3xtZMa" i="0">
モーダルダイアログのタイトル
</summary>
    </member>
    <member name="P:AntDesign.Modal.Visible">
      <summary v="1nqRXC" i="0">
モーダルダイアログが表示されているかどうか
</summary>
    </member>
    <member name="P:AntDesign.Modal.VisibleChanged">
      <summary v="2xcii5" i="0">
モーダルダイアログが表示されているかどうかにかかわらず、関数の呼び出しを指定する
</summary>
    </member>
    <member name="P:AntDesign.Modal.Width">
      <summary v="3Ed7Ef" i="0">
モーダルダイアログの幅、デフォルト値は520です。
</summary>
    </member>
    <member name="P:AntDesign.Modal.WrapClassName">
      <summary v="3xRJ9X" i="0">
モーダルダイアログのコンテナのクラス名
</summary>
    </member>
    <member name="P:AntDesign.Modal.ZIndex">
      <summary v="10GCuH" i="0">
モーダルのzインデックス
</summary>
    </member>
    <member name="P:AntDesign.ModalCancelFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalClosingEventArgs.Cancel">
      <summary v="49f55H" i="0">
クロージングをキャンセルするかどうか。
終了をキャンセルする場合はtrueを設定します。デフォルトはfalseです。
閉法。
となっています。となっています。
</summary>
    </member>
    <member name="P:AntDesign.ModalFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalLocale.CancelText">
      <summary v="3YxACC" i="0">
ボタンテキストをキャンセル
</summary>
    </member>
    <member name="P:AntDesign.ModalLocale.OkText">
      <summary v="1kbJyX" i="0">
OKボタンテキスト
</summary>
    </member>
    <member name="P:AntDesign.ModalOkFooter.ModalProps">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalOptions.AfterClose">
      <summary v="2jjyi0" i="0">
ダイアログが閉じた後のトリガー
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.BodyStyle">
      <summary v="Bh4MH" i="0">
Ant-モーダル-ボディスタイル
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Closable">
      <summary v="122WS7" i="0">
Show ant-modal-closer
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.CloseIcon">
      <summary v="1Bc5mm" i="0">
より近いアイコンRenderFragment、デフォルトは "X" です
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.ConfirmLoading">
      <summary v="3IUGTG" i="0">
OKボタンの読み込み視覚効果を適用するかどうか
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Content">
      <summary v="LVRKT" i="0">
チャイルドコンテンツ
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DefaultMaximized">
      <summary v="iMY02" i="0">
コンポーネントの初期化中にモーダルを最大化すると、最大値は無視されます。
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DestroyOnClose">
      <summary v="45nYFl" i="0">
モーダルが閉じた後にDOMからモーダルを削除するかどうか
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Draggable">
      <summary v="3zmBrO" i="0">
ドラガブルモーダル
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.DragInViewport">
      <summary v="4eoCF0" i="0">
ビューポート内でのみドラッグアンドドロップ
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Footer">
      <summary v="4GmrOX" i="0">
モーダルフッター。 Footer = = nullの場合、ダイアログにはフッターがありません
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Maximizable">
      <summary v="4CJFl8" i="0">
ショーモーダル最大化ボタン
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.MaximizeBtnIcon">
      <summary v="1fdJk" i="0">
モーダルが通常の状態にあるときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.OnCancel">
      <summary v="4XxZcU" i="0">
ユーザーがマスク、右上のボタンを閉じる、またはキャンセルボタンをクリックしたときに呼び出される関数を指定します。
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.OnOk">
      <summary v="1gOn2R" i="0">
ユーザーが [OK] ボタンをクリックしたときに呼び出される関数を指定する
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Resizable">
      <summary v="2v6bNP" i="0">
変更可能
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.RestoreBtnIcon">
      <summary v="sygjJ" i="0">
モーダルが最大化されたときの最大化ボタンのアイコン
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Style">
      <summary v="449EWV" i="0">
Ant-モーダルスタイル
</summary>
    </member>
    <member name="P:AntDesign.ModalOptions.Visible">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.ModalOptions.WrapClassName">
      <summary v="3xRJ9X" i="0">
モーダルダイアログのコンテナのクラス名
</summary>
    </member>
    <member name="P:AntDesign.ModalRef`1.OnCancel">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.ModalRef`1.OnOk">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.NotificationConfig.AnimationClass">
      <summary v="jSnlC" i="0">
実行中の実行中の実行中の表示
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Btn">
      <summary v="3rMr6n" i="0">
定自义関闭所
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.ClassName">
      <summary v="JO5pm" i="0">
定义CSSクラス
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.CloseIcon">
      <summary v="3vgdNM" i="0">
定自义関闭図标
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Description">
      <summary v="4XGzTg" i="0">
通知本内事、出选、文字列选択者RenderFragment
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Duration">
      <summary v="4USzIz" i="0">
自动関有有延时、自动関有无、自动関有无、自动関有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Icon">
      <summary v="4Ai0SO" i="0">
定自义図标
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Key">
      <summary v="2OV090" i="0">
当前通知一标志
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Message">
      <summary v="419bj1" i="0">
通知本の标、出选、文字列选択者RenderFragment
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.NotificationType">
      <summary v="1WRYqg" i="0">
通知点左侧的な図の种类型
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Placement">
      <summary v="1Cg6Tf" i="0">
出配置
</summary>
    </member>
    <member name="P:AntDesign.NotificationConfig.Style">
      <summary v="1EFSed" i="0">
定自义内式
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Bottom">
      <summary v="4CcfGP" i="0">
(位) 、 (位位) 、 (位位位)。
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.CloseIcon">
      <summary v="3vgdNM" i="0">
定自义関闭図标
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Duration">
      <summary v="4USzIz" i="0">
自动関有有延时、自动関有无、自动関有无、自动関有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有有
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Placement">
      <summary v="1Cg6Tf" i="0">
出配置
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Rtl">
      <summary v="1mUF1k" i="0">
明明 [RTL]
</summary>
    </member>
    <member name="P:AntDesign.NotificationGlobalConfig.Top">
      <summary v="PvlTX" i="0">
(位位位位) 、 (位位位位位) 、 (位位位位)。
</summary>
    </member>
    <member name="P:AntDesign.NotificationRef.Config">
      <summary v="1axnfs" i="0">
通知ボックスの設定
</summary>
    </member>
    <member name="P:AntDesign.Progress.Format">
      <summary v="4Lqn3Z" i="0">
コンテンツのテンプレート関数
</summary>
    </member>
    <member name="P:AntDesign.Progress.GapDegree">
      <summary v="12RNGJ" i="0">
半円のギャップの程度、0 ~ 295
</summary>
    </member>
    <member name="P:AntDesign.Progress.GapPosition">
      <summary v="21CHJQ" i="0">
ギャップ位置、オプション: 左下右上
</summary>
    </member>
    <member name="P:AntDesign.Progress.Percent">
      <summary v="3NOeu0" i="0">
完了率を設定する
</summary>
    </member>
    <member name="P:AntDesign.Progress.ShowInfo">
      <summary v="LnI2g" i="0">
進捗値とステータスアイコンを表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Progress.Size">
      <summary v="3T93xE" i="0">
進捗サイズ
</summary>
    </member>
    <member name="P:AntDesign.Progress.Status">
      <summary v="1r9Emr" i="0">
Progress、options: success exceptionのステータスを設定するには、通常のアクティブ (行のみ)
</summary>
    </member>
    <member name="P:AntDesign.Progress.Steps">
      <summary v="42cdeR" i="0">
総ステップ数
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeColor">
      <summary v="4XWxFu" i="0">
プログレスバーの色、オブジェクトを渡すときの線形グラデーションのレンダリング
円形の進行状況の色、オブジェクトを通過するときの線形勾配のレンダリング
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeLinecap">
      <summary v="3jsLOz" i="0">
Progress linecapのスタイルを設定する
</summary>
    </member>
    <member name="P:AntDesign.Progress.StrokeWidth">
      <summary v="4JZZdB" i="0">
プログレスバーの幅を設定します。単位: px
円形の進行状況の幅を設定するには、単位: キャンバス幅のパーセンテージ
ダッシュボードの進行状況の幅を設定します。単位: キャンバスの幅のパーセンテージ
</summary>
    </member>
    <member name="P:AntDesign.Progress.SuccessPercent">
      <summary v="196roM" i="0">
セグメント化された成功率
</summary>
    </member>
    <member name="P:AntDesign.Progress.TrailColor">
      <summary v="zWVJN" i="0">
未充填部分の色
</summary>
    </member>
    <member name="P:AntDesign.Progress.Type">
      <summary v="3E83zd" i="0">
型を設定するには、オプション: line circle dashboard
</summary>
    </member>
    <member name="P:AntDesign.Progress.Width">
      <summary v="1IrjNn" i="0">
円形の進行状況のキャンバス幅を設定するには、単位: px
ダッシュボードの進行状況のキャンバス幅を設定するには、単位: px
</summary>
    </member>
    <member name="P:AntDesign.PropertyColumn`2.Property">
      <summary v="24tPyG" i="0">
この列のセルに表示される値を定義します。
</summary>
    </member>
    <member name="P:AntDesign.RangePicker`1.Value">
      <summary v="yoUC3" i="0">
入力の値を取得または設定します。 これは双方向バインディングで使用する必要があります。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.Rate.AllowClear">
      <summary v="31ACLe" i="0">

</summary>
    </member>
    <member name="P:AntDesign.Rate.AllowHalf">
      <summary v="4eosQT" i="0">
半选
</summary>
    </member>
    <member name="P:AntDesign.Rate.AutoFocus">
      <summary v="3fMFPR" i="0">
元取得者入点
</summary>
    </member>
    <member name="P:AntDesign.Rate.Character">
      <summary v="Ria0m" i="0">
定星可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可可
</summary>
    </member>
    <member name="P:AntDesign.Rate.Count">
      <summary v="21NjXr" i="0">
组织的な星名
</summary>
    </member>
    <member name="P:AntDesign.Rate.DefaultValue">
      <summary v="35fCJO" i="0">
必要な认识的な星の选択的な星の量、必要な子の设计をしています。
</summary>
    </member>
    <member name="P:AntDesign.Rate.Disabled">
      <summary v="mwwY0" i="0">

</summary>
    </member>
    <member name="P:AntDesign.Rate.Tooltips">
      <summary v="1bbY12" i="0">
定自义的に指定された情報 ()
</summary>
    </member>
    <member name="P:AntDesign.Rate.Value">
      <summary v="3AqHuX" i="0">
-选択的な星の量
</summary>
    </member>
    <member name="P:AntDesign.RateItemRenderContext.Type">
      <summary v="34NDQy" i="0">
'AntIcon' | 'Text'
</summary>
    </member>
    <member name="P:AntDesign.Result.IsShowIcon">
      <summary v="2WCoGi" i="0">
::::::::
</summary>
    </member>
    <member name="P:AntDesign.Result.Status">
      <summary v="2RoVqZ" i="0">
Success | error | info | 警告 | 404 | 403 | 500
デフォルト: info
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Body">
      <summary v="151KL0" i="0">
ページコンテンツをカスタマイズするためのテンプレート。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Draggable">
      <summary v="3ONg1t" i="0">
タブをドラッグおよびドロップできるかどうか。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.HidePages">
      <summary v="2DzMAJ" i="0">
ページ表示を非表示にし、タイトルタブのみを保持するかどうか。 次に使用できます<see cref="T:AntDesign.ReusePages" />ページconentを表示します。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Locale">
      <summary v="2Y3MCv" i="0">
ローカライズ設定。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.ReuseTabsRouteData">
      <summary v="2MfoI1" i="0">
現在のページのルーティング情報。<see cref="T:Microsoft.AspNetCore.Components.RouteData" />を参照してください。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.Size">
      <summary v="2haZnj" i="0">
タブのサイズ。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabs.TabPaneClass">
      <summary v="1gD4lo" i="0">
内側のタブペインのクラス名。
</summary>
    </member>
    <member name="P:AntDesign.ReuseTabsService.Pages">
      <summary v="1FZzbS" i="0">
現在開いているページのページ情報リスト。キャッシュとリカバリに使用できます。
</summary>
    </member>
    <member name="P:AntDesign.Row.Align">
      <summary v="mIvIE" i="0">
'Top' | 'middle' | 'bottom'
</summary>
    </member>
    <member name="P:AntDesign.Row.DefaultBreakpoint">
      <summary v="2gg4aQ" i="0">
事前レンダリング中に溝を設定するために使用
</summary>
    </member>
    <member name="P:AntDesign.Row.Justify">
      <summary v="Ugi9m" i="0">
'Start' | 'end' | 'center' | 'space-around '| 'space-between'
</summary>
    </member>
    <member name="P:AntDesign.Search.ClassicSearchIcon">
      <summary v="1cvZKm" i="0">
検索入力は、ボタンとしてではなく、サフィックス検索アイコンでレンダリングされます。
EnterButton != falseのときに無視されます
</summary>
    </member>
    <member name="P:AntDesign.Search.EnterButton">
      <summary v="3Lcudq" i="0">
入力後に入力ボタンを表示するかどうか。 このプロパティはAddonAfterプロパティと競合します
</summary>
    </member>
    <member name="P:AntDesign.Search.Loading">
      <summary v="4HPN9Y" i="0">
ローディング付きの検索ボックス
</summary>
    </member>
    <member name="P:AntDesign.Search.OnSearch">
      <summary v="2YV1Az" i="0">
検索アイコン、クリアアイコンをクリックするか、Enterキーを押すと、コールバック機能がトリガーされます。
</summary>
    </member>
    <member name="P:AntDesign.Select.Internal.SelectOptionItem`2.SelectedTagRef">
      <summary v="r6r8j" i="0">
によって使用されるElementRef<see cref="T:AntDesign.Select.Internal.SelectContent`2" />のみ
選択されたモード = 複数およびMaxTagCount = 応答
</summary>
    </member>
    <member name="P:AntDesign.Select.Internal.SelectSuffixIcon`2.ShowSearchIcon">
      <summary v="1mzP4W" i="0">
シングルモードで検索入力を表示するかどうか。
</summary>
    </member>
    <member name="P:AntDesign.Select.LabelTemplateItem`2.Ref">
      <summary v="3v0RLn" i="0">
DOM要素に対して返されたElementRef参照。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.Bordered">
      <summary v="3MXGxp" i="0">
ボーダースタイルを切り替えます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DataSource">
      <summary v="3vflFW" i="0">
このコンポーネントのデータソース。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DataSourceEqualityComparer">
      <summary v="2AEbcd" i="0">
DataSourceの変更中に使用されるEqualityComparer
検出します。 Comparerが設定されていない場合、デフォルト。 ネットは
使用されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DefaultActiveFirstOption">
      <summary v="gQ3Lr" i="0">
無効化されていない最初のアイテムを有効にします。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DefaultValue">
      <summary v="f4vCE" i="0">
Mode = default-この値は、初期化中およびフォーム内のリセットボタンを押すときに使用されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DisabledName">
      <summary v="4Y7Gl5" i="0">
無効なインジケーターとして使用されるプロパティの名前。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DisabledPredicate">
      <summary v="ksaX5" i="0">
無効オプションの述語を指定します
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DropdownMatchSelectWidth">
      <summary v="3jo742" i="0">
Drowdownの幅と一致します:
-Booleanの場合: true-ドロップダウンリストで最も広いアイテムを使用
-文字列の場合: 値付き (例: "256px")
</summary>
    </member>
    <member name="P:AntDesign.Select`2.DropdownMaxWidth">
      <summary v="1LaV7G" i="0">
ドロップダウン幅がここの値に記載されている以上に拡大することはできません (例: "768px")
</summary>
    </member>
    <member name="P:AntDesign.Select`2.EnableVirtualization">
      <summary v="39WGkE" i="0">
仮想化機能を有効にするかどうかは、のためにのみ機能します。 NET 5以上
</summary>
    </member>
    <member name="P:AntDesign.Select`2.GroupName">
      <summary v="35WDeN" i="0">
グループインジケータとして使用するプロパティの名前。
値が設定されている場合、エントリはグループで表示されます。
追加のSortByGroupとSortByLabelを使用します。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.IgnoreItemChanges">
      <summary v="419yAi" i="0">
速度を上げるために使用されます。 ラベル名の変更が予想される場合は、
グループ名または無効のインジケーター、このプロパティを無効にします。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.IsGroupingEnabled">
      <summary v="23rvdX" i="0">
GroupNameが使用されているかどうかを示します。 この値がTrueの場合、SelectOptionsはグループモードでレンダリングされます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ItemTemplate">
      <summary v="3q66H2" i="0">
アイテムスタイルをカスタマイズするために使用されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.LabelProperty">
      <summary v="3Tbo9L" i="0">
オプションオブジェクトのラベルプロパティを指定します。 このプロパティを使用する場合は、<see cref="!:LabelName" /></summary>
    </member>
    <member name="P:AntDesign.Select`2.NotFoundContent">
      <summary v="3ITps3" i="0">
結果が一致しないときに表示するコンテンツを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnBlur">
      <summary v="3D7tWb" i="0">
Blurのときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnCreateCustomTag">
      <summary v="3KnduO" i="0">
カスタムタグが作成されたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnDataSourceChanged">
      <summary v="3DoqQL" i="0">
データソースが変更されたときに呼び出されます。 Nullから<see cref="T:System.Collections.Generic.IEnumerable`1" />
から<see cref="T:System.Collections.Generic.IEnumerable`1" /><see cref="T:System.Collections.Generic.IEnumerable`1" />
またはから<see cref="T:System.Collections.Generic.IEnumerable`1" />をnullにします。
内部の値が<see cref="T:System.Collections.Generic.IEnumerable`1" />変更します。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnDropdownVisibleChange">
      <summary v="QTkZe" i="0">
ドロップダウンの可視性が変更されたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.OnSearch">
      <summary v="1JqXvj" i="0">
入力が変更されたときに起動されるコールバック関数。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ShowArrowIcon">
      <summary v="3T7UEw" i="0">
ドロップダウン矢印を表示するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Select`2.TokenSeparators">
      <summary v="2uDnIP" i="0">
新しく作成されたタグのトークン区切り文字として扱われる文字を定義します。
キーボードのみを使用して新しいタグを作成するときに便利です。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.Value">
      <summary v="4UcFXa" i="0">
選択した値を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ValueChanged">
      <summary v="1koZkv" i="0">
双方向バインディングに使用されます。
</summary>
    </member>
    <member name="P:AntDesign.Select`2.ValueProperty">
      <summary v="2FBrf9" i="0">
オプションオブジェクトのvalueプロパティを指定します。 このプロパティを使用する場合は、<see cref="!:ValueName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AccessKey">
      <summary v="290XqI" i="0">
Accesskeyグローバル属性。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ActiveOption">
      <summary v="3ReKb8" i="0">
現在アクティブ (ハイライト) オプション。
選択したオプションと等しくする必要はありません。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AllowClear">
      <summary v="4g3Xf1" i="0">
クリアボタンを表示します。 場合は効果がありません<see cref="P:AntDesign.AntInputComponentBase`1.Value" />タイプデフォルト
のリストにもあります。<see cref="T:AntDesign.SelectOption`2" />
使用しない限り<see cref="P:AntDesign.SelectBase`2.ValueOnClear" />を参照してください。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.AutoClearSearchValue">
      <summary v="4LMxuO" i="0">
アイテムの選択時に現在の検索がクリアされるかどうか。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.BoundaryAdjustMode">
      <summary v="4FBjW3" i="0">
オーバーレイ調整戦略 (たとえば、ブラウザのサイズ変更が行われている場合)
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.CustomTagLabelToValue">
      <summary v="3EMaK3" i="0">
カスタムタグ (文字列) をTItemValue型に変換します。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.DefaultValues">
      <summary v="2J5DPu" i="0">
Mode = multiple | tags-値は初期化中およびフォーム内のリセットボタンを押すときに使用されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Disabled">
      <summary>System.Net.Http.HttpRequestException: An error occurred while sending the request.
 ---&gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..
 ---&gt; System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.
   --- End of inner exception stack trace ---
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.DropdownRender">
      <summary v="4Zzqb3" i="0">
ドロップダウンコンテンツをカスタマイズします。 コンテキストは元のコンテンツです。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.EnableSearch">
      <summary v="2naqqM" i="0">
検索機能がアクティブかどうかを示します。 モードタグの場合は常にtrueです。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.HasValue">
      <summary v="4VVb1k" i="0">
SelectOptionsに選択したアイテムがあるかどうかを判断します
</summary>
      <returns v="2R5twB" i="0">SelectOptionsに選択されたアイテムがある場合はtrue、そうでない場合はfalse</returns>
    </member>
    <member name="P:AntDesign.SelectBase`2.HideSelected">
      <summary v="4AwoTD" i="0">
選択したアイテムを非表示にします。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.IsSearchEnabled">
      <summary v="2ABzzv" i="0">
ユーザーが一致したアイテムを検索するパターンを入力できるかどうかを返します
</summary>
      <returns v="3ORAAp" i="0">検索が有効な場合はtrue</returns>
    </member>
    <member name="P:AntDesign.SelectBase`2.ItemLabel">
      <summary v="4Yg7SF" i="0">
オプションオブジェクトのラベルプロパティを指定します。 このプロパティを使用する場合は、<see cref="P:AntDesign.SelectBase`2.LabelName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ItemValue">
      <summary v="1CAphC" i="0">
オプションオブジェクトのvalueプロパティを指定します。 このプロパティを使用する場合は、<see cref="P:AntDesign.SelectBase`2.ValueName" /></summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelInValue">
      <summary v="1U3ymK" i="0">
ラベルを値に埋め込むかどうか、値の形式をTitemValueから文字列 (JSON) に変換します。
例えば、 {"value": TitemValue,"label": "Label value"}
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelName">
      <summary v="3AwSrr" i="0">
ラベルに使用するプロパティの名前。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LabelTemplate">
      <summary v="hwEOh" i="0">
ラベルスタイルをカスタマイズするために使用されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.LastValueBeforeReset">
      <summary v="44YdO2" i="0">
SelectOptionItemsで新しく設定された値が見つからない場合は、
デフォルトです。 このプロパティはリセット前の値を保持します。 それは必要かもしれません
(たとえば、新しい値が同時に設定されている場合など)
新しいSelectOptionが追加されると、コンポーネントの値が設定されます。
新しいSelectOptionItemが作成される前に)。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Loading">
      <summary v="3cOuxj" i="0">
ローディングインジケータを表示します。 ロードロジックを自分で書く必要があります。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagCount">
      <summary v="3GSRJr" i="0">
最大タグ数を表示します。 レスポンシブはパフォーマンスをレンダリングします。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagPlaceholder">
      <summary v="3mQAeT" i="0">
隠しタグ用のプレースホルダー。 ResponsiveTag.Responsiveで使用する場合は、独自の処理ロジックを実装します。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.MaxTagTextLength">
      <summary v="3C8N89" i="0">
タグの長さ (文字数)。
モード = "multiple" またはモード = "tags" のみ
</summary>
      <value>
            The maximum length of the tag text.
            </value>
    </member>
    <member name="P:AntDesign.SelectBase`2.Mode">
      <summary>System.Net.Http.HttpRequestException: An error occurred while sending the request.
 ---&gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..
 ---&gt; System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.
   --- End of inner exception stack trace ---
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnClearSelected">
      <summary v="14UtFb" i="0">
ユーザーが選択をクリアしたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnFocus">
      <summary v="1ERQAl" i="0">
フォーカス時に呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnMouseEnter">
      <summary v="46zJaG" i="0">
マウスが入力したときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnMouseLeave">
      <summary v="ninB2" i="0">
マウスが去るときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnSelectedItemChanged">
      <summary v="2ittuq" i="0">
選択したアイテムが変更されたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.OnSelectedItemsChanged">
      <summary v="g9Onl" i="0">
選択したアイテムが変更されたときに呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Open">
      <summary v="2tPov4" i="0">
ドロップダウンの制御されたオープン状態。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Placeholder">
      <summary v="4QgNG1" i="0">
Selectのプレースホルダー。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.PopupContainerSelector">
      <summary v="2FFcRl" i="0">
これを使用してオーバーレイの問題を修正します。# area
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.PrefixIcon">
      <summary v="YZqdW" i="0">
カスタムプレフィックスアイコン。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SearchDebounceMilliseconds">
      <summary v="2lpe12" i="0">
ユーザが停止するまで検索入力イベントの処理を遅らせる
所定の時間のタイピング。 250msにデフォルト。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SelectOptions">
      <summary v="2msqsT" i="0">
選択オプションを手動でレンダリングするために使用します。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ShowSearchIcon">
      <summary v="1mzP4W" i="0">
シングルモードで検索入力を表示するかどうか。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortByGroup">
      <summary v="35WDeN" i="0">
グループインジケータとして使用するプロパティの名前。
値が設定されている場合、エントリはグループで表示されます。
追加のSortByGroupとSortByLabelを使用します。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortByLabel">
      <summary v="2TkxTE" i="0">
ラベル値でアイテムを並べ替えます。 なし | 上昇 | 下降
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SortedSelectOptionItems">
      <summary v="2ME8BB" i="0">
SelectOptionItemsの並べ替えリスト
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.SuffixIcon">
      <summary v="20vubH" i="0">
カスタム接尾辞アイコン。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueChanged">
      <summary v="1koZkv" i="0">
双方向バインディングに使用されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueName">
      <summary v="1eRofc" i="0">
値に使用されるプロパティの名前。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValueOnClear">
      <summary v="3t8E6Y" i="0">
クリアボタンを押すと、値は
ValueOnClearに設定されているもの
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.Values">
      <summary v="38zUL6" i="0">
選択した値を取得または設定します。
</summary>
    </member>
    <member name="P:AntDesign.SelectBase`2.ValuesChanged">
      <summary v="1koZkv" i="0">
双方向バインディングに使用されます。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Disabled">
      <summary v="zh3il" i="0">
このオプションを無効にする
パラメータは、SelectOptionが直接作成された場合にのみ使用してください。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Label">
      <summary v="44K7nB" i="0">
このオプションを選択した後の選択のラベル
パラメータは、SelectOptionが直接作成された場合にのみ使用してください。
</summary>
    </member>
    <member name="P:AntDesign.SelectOption`2.Value">
      <summary v="2QHMVs" i="0">
このオプションを選択した後のSelectの値
パラメータは、SelectOptionが直接作成された場合にのみ使用してください。
</summary>
    </member>
    <member name="P:AntDesign.Sider.Trigger">
      <summary v="1wXYCU" i="0">
トリガーがnullの場合、「崩壊」が変更された後、「OnCollapsed」は呼び出されません。
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Avatar">
      <summary v="30BLfE" i="0">
头
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Paragraph">
      <summary v="4CRksF" i="0">
段落 (= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
</summary>
    </member>
    <member name="P:AntDesign.Skeleton.Title">
      <summary v="iORgL" i="0">
の図
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.DefaultValue">
      <summary v="3Dmrok" i="0">
スライダーのデフォルト値。 <see cref="P:AntDesign.Slider`1.Range" />はfalse、使用番号、それ以外の場合は、 [number, number] を使用します。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Disabled">
      <summary v="vRGcV" i="0">
Trueの場合、スライダーは相互作用できません
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Dots">
      <summary v="3aNKAY" i="0">
親指がダニだけをドラッグできるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.GetTooltipPopupContainer">
      <summary v="1HMa3g" i="0">
ツールチップのDOMコンテナ。デフォルトの動作は、bodyにdiv要素を作成することです。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Included">
      <summary v="2gasHt" i="0">
ときに効果を作る<see cref="P:AntDesign.Slider`1.Marks" />Nullではなく、trueは封じ込めを意味し、falseは調整を意味します
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Marks">
      <summary v="3CLKnZ" i="0">
スライダーのチェックマーク、キーのタイプは番号でなければならず、閉じた間隔 [min、max] でなければなりません。各マークは独自のスタイルを宣言できます。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Max">
      <summary v="4PpL6k" i="0">
スライダーがに滑ることができる最大値
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Min">
      <summary v="4F0VRd" i="0">
スライダーがに滑ることができる最小値
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.OnAfterChange">
      <summary v="pI4j4" i="0">
Onmouseupが発射されると発砲します。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.OnChange">
      <summary v="2m7PQ6" i="0">
ユーザーがスライダーの値を変更したときに発生するコールバック関数。
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.TooltipPlacement">
      <summary v="1muwp0" i="0">
ツールチップの表示位置を設定します。 参照ツールチップ
</summary>
    </member>
    <member name="P:AntDesign.Slider`1.Value">
      <summary v="yoUC3" i="0">
入力の値を取得または設定します。 これは双方向バインディングで使用する必要があります。
</summary>
      <example>
            @bind-Value="model.PropertyName"
            </example>
    </member>
    <member name="P:AntDesign.Slider`1.Vertical">
      <summary v="1XK2I0" i="0">
Trueの場合、スライダーは垂直になります。
</summary>
    </member>
    <member name="P:AntDesign.Space.Align">
      <summary v="3RqhIi" i="0">
Start | end | center | ベースライン
</summary>
    </member>
    <member name="P:AntDesign.Spin.Size">
      <summary v="78EEm" i="0">
小さい | デフォルト | 大きい
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Prefix">
      <summary v="40wKuF" i="0">
设计的前语
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Suffix">
      <summary v="3cvVXk" i="0">
设计的后の
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Title">
      <summary v="6Azy8" i="0">
値の主题
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.Value">
      <summary v="4KtQ9J" i="0">
(データ)
</summary>
    </member>
    <member name="P:AntDesign.StatisticComponentBase`1.ValueStyle">
      <summary v="14cxCL" i="0">
设计者的な式
</summary>
    </member>
    <member name="P:AntDesign.Switch.Control">
      <summary v="n71vy" i="0">
スイッチのステータスは完全にユーザー次第であり、もはや
クリックイベントに基づいてデータが自動的に変更されます。
</summary>
    </member>
    <member name="P:AntDesign.Table`1.DefaultExpandMaxLevel">
      <summary v="1EN01t" i="0">
DefaultExpandAllRowsを使用する場合の最大拡張レベル。
この属性は、ツリーレコードに円形参照があるときに無限ループを回避するために使用されます。
デフォルト値は4です。
</summary>
    </member>
    <member name="P:AntDesign.Table`1.EnableVirtualization">
      <summary v="39WGkE" i="0">
仮想化機能を有効にするかどうかは、のためにのみ機能します。 NET 5以上
</summary>
    </member>
    <member name="P:AntDesign.Table`1.PaginationPosition">
      <summary v="hyz7X" i="0">
TopLeft | topCenter | topRight | bottomLeft | bottomCenter | bottomRight
</summary>
    </member>
    <member name="P:AntDesign.Table`1.Resizable">
      <summary v="3IDB7H" i="0">
サイズ変更可能な列の有効化
</summary>
    </member>
    <member name="P:AntDesign.Table`1.SelectedRows">
      <summary v="2mLBpB" i="0">
ページ間で選択された行
</summary>
    </member>
    <member name="P:AntDesign.TableModels.RowData`1.Children">
      <summary v="3jUogV" i="0">
子供の列の状態を保持する
</summary>
    </member>
    <member name="P:AntDesign.TabPane.ForceRender">
      <summary v="2Cvjf8" i="0">
タブをクリックした後の怠惰なレンダリングではなく、タブ内のコンテンツの強制レンダリング
</summary>
    </member>
    <member name="P:AntDesign.TabPane.Key">
      <summary v="2YYIS2" i="0">
TabPaneのキー
</summary>
    </member>
    <member name="P:AntDesign.TabPane.Tab">
      <summary v="8N7Wf" i="0">
テキストを表示<see cref="T:AntDesign.TabPane" />の頭
</summary>
    </member>
    <member name="P:AntDesign.Tabs.ActiveKey">
      <summary v="2FY5Zq" i="0">
現在<see cref="T:AntDesign.TabPane" />の<see cref="P:AntDesign.TabPane.Key" /></summary>
    </member>
    <member name="P:AntDesign.Tabs.Animated">
      <summary v="2fNQfe" i="0">
アニメーションでタブを変更するかどうか。 間だけ働く<see cref="P:AntDesign.Tabs.TabPosition" />=<see cref="F:AntDesign.TabPosition.Top" />または<see cref="F:AntDesign.TabPosition.Bottom" /></summary>
    </member>
    <member name="P:AntDesign.Tabs.DefaultActiveKey">
      <summary v="CcZho" i="0">
初期アクティブ<see cref="T:AntDesign.TabPane" />の<see cref="P:AntDesign.TabPane.Key" />の場合は、<see cref="P:AntDesign.Tabs.ActiveKey" />が設定されていません
</summary>
    </member>
    <member name="P:AntDesign.Tabs.HideAdd">
      <summary v="3x3txU" i="0">
プラスアイコンを隠すかどうか。 間だけ働く<see cref="P:AntDesign.Tabs.Type" />=<see cref="F:AntDesign.TabType.EditableCard" /></summary>
    </member>
    <member name="P:AntDesign.Tabs.OnChange">
      <summary v="ozKGD" i="0">
アクティブなタブが変更されたときに実行されるコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnClose">
      <summary v="24p9uY" i="0">
タブが閉じたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tabs.OnEdit">
      <summary v="2pplmx" i="0">
タブが追加または削除されたときにコールバックが実行されます。 間だけ働く<see cref="P:AntDesign.Tabs.Type" />=<see cref="F:AntDesign.TabType.EditableCard" /></summary>
    </member>
    <member name="P:AntDesign.Tabs.OnTabClick">
      <summary v="nzs2r" i="0">
タブがクリックされたときに実行されるコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tabs.RenderTabBar">
      <summary v="4bb92P" i="0">
TabBarを交換する
</summary>
    </member>
    <member name="P:AntDesign.Tabs.Size">
      <summary v="2uRSg3" i="0">
プリセットタブバーのサイズ
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarClass">
      <summary v="3e35Zi" i="0">
タブバーCSSクラス
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarExtraContent">
      <summary v="3x7TO1" i="0">
タブバーの追加コンテンツ
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarGutter">
      <summary v="2R1oV0" i="0">
タブ间のギャップ
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabBarStyle">
      <summary v="3aIVwY" i="0">
タブバースタイルオブジェクト
</summary>
    </member>
    <member name="P:AntDesign.Tabs.TabPosition">
      <summary v="4ceKgX" i="0">
タブの位置
</summary>
    </member>
    <member name="P:AntDesign.Tabs.Type">
      <summary v="sK3mA" i="0">
タブの基本スタイル
</summary>
    </member>
    <member name="P:AntDesign.Tag.Checkable">
      <summary v="4SrypX" i="0">
タグをチェックできるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Tag.Checked">
      <summary v="420tmQ" i="0">
タグのチェックステータス
</summary>
    </member>
    <member name="P:AntDesign.Tag.CheckedChanged">
      <summary v="1VfqF2" i="0">
タグがチェック/チェック解除されたときに実行されるコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tag.ChildContent">
      <summary v="4FUS9X" i="0">
タグの内容
</summary>
    </member>
    <member name="P:AntDesign.Tag.Closable">
      <summary v="E9gms" i="0">
タグを閉じることができるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Tag.Color">
      <summary v="2JUVUq" i="0">
タグの色。 定義済みの色 (文字列) のいずれかになります
またはhex色。
</summary>
    </member>
    <member name="P:AntDesign.Tag.Icon">
      <summary v="21J6lk" i="0">
タグのアイコンを設定する
</summary>
    </member>
    <member name="P:AntDesign.Tag.IconTheme">
      <summary v="3RjsZn" i="0">
'Fill' | 'outline' | 'twotone';
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClick">
      <summary v="3I8uAB" i="0">
タグがクリックされたときに実行されるコールバック (呼び出されない)
アイコンを閉じるときにクリックされます)。
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClose">
      <summary v="2cb9Pq" i="0">
タグが閉じられたときに実行されるコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tag.OnClosing">
      <summary v="3vb75u" i="0">
真の閉鎖の前にトリガーされ、閉鎖を防ぐことができます
</summary>
    </member>
    <member name="P:AntDesign.Tag.Visible">
      <summary v="1Wdmg" i="0">
タグが閉じているかどうか
</summary>
    </member>
    <member name="P:AntDesign.TemplateComponentBase`1.Options">
      <summary v="11Cl1m" i="0">
外部からテンプレートを渡すことができるオプション
</summary>
    </member>
    <member name="P:AntDesign.TextArea.AutoSize">
      <summary v="bWvi3" i="0">
コンテンツに応じて「TextArea」を調整 (拡大または縮小) します。
「MaxRows」と「MinRows」に関連して動作できます。
Textarea HTML要素のサイズ変更属性をnoneに設定します。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.DefaultToEmptyString">
      <summary v="1OUfFJ" i="0">
「False' 」の場合、コンテンツが空の場合、値は「null」に設定されます。
またはwhitespace。 'True' の場合、値は空の文字列に設定されます。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.MaxRows">
      <summary v="eoMTf" i="0">
「TextArea」は成長を可能にしますが、見えると停止します
Rows = MaxRows (これ以上成長しません)。
デフォルト値 = uint.MaxValue
</summary>
    </member>
    <member name="P:AntDesign.TextArea.MinRows">
      <summary v="T6VLX" i="0">
「TextArea」は縮小を可能にしますが、表示されると停止します
Rows = MinRows (これ以上縮小されません)。
デフォルト値 = DEFAULT_MIN_ROWS = 1
</summary>
    </member>
    <member name="P:AntDesign.TextArea.OnResize">
      <summary v="41j1op" i="0">
サイズが変更されたときのコールバック
</summary>
    </member>
    <member name="P:AntDesign.TextArea.Rows">
      <summary v="A2xJ8" i="0">
行数で表されるTextAreaの高さを設定します。
デフォルト値は2です。
</summary>
    </member>
    <member name="P:AntDesign.TextArea.Value">
      <inheritdoc />
    </member>
    <member name="P:AntDesign.Timeline.Mode">
      <summary v="2SBVs1" i="0">
'Left' | 'alternate' | 'right'
</summary>
    </member>
    <member name="P:AntDesign.Transfer.ListStyle">
      <summary v="Hovrn" i="0">
転送列のレンダリングに使用されるカスタムCSSスタイル
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.BlockNode">
      <summary v="1C1tz" i="0">
TreeNodeが残りの水平スペースを埋めるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Checkable">
      <summary v="2AZD7w" i="0">
ノードの前にチェックボックスを追加する
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckableExpression">
      <summary v="rEuK6" i="0">
チェック可能なノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckedKeys">
      <summary v="2X1ZjM" i="0">
チェックされたキー
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckedKeysChanged">
      <summary v="14s0ey" i="0">
@ Bind-CheckedKeys
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckOnClickNode">
      <summary v="1ewR9Z" i="0">
チェック可能な場合は、 [TreeNodeTitle] をクリックしてノードをチェックまたはチェック解除します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.CheckStrictly">
      <summary v="42UEkh" i="0">
TreeNodeを正確にチェックします。親treeNodeと子treeNodeは関連付けられていません
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ChildNodes">
      <summary v="1SoIAs" i="0">
ツリーchildnodes
ノードが初期化されたときに値を追加する
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ChildrenExpression">
      <summary v="1a94kF" i="0">
子ノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DataSource">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.DefaultCheckedKeys">
      <summary v="18LgiI" i="0">
デフォルトチェックされたtreeNodesのキーを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandAll">
      <summary v="2oK5An" i="0">
すべてのツリーノードはデフォルトで展開されます
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandedKeys">
      <summary v="2sJkXY" i="0">
指定されたツリーノードをデフォルトで展開します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DefaultExpandParent">
      <summary v="lOqhO" i="0">
親ノードはデフォルトで展開されます
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DisableCheckKeys">
      <summary v="1cxA3L" i="0">
ノードチェックボックスの無効化
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Disabled">
      <summary v="1QaL60" i="0">
ツリーは無効です
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DisabledExpression">
      <summary v="4QpUNh" i="0">
無効なノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Draggable">
      <summary v="1IFV7v" i="0">
ノードがドラッグ &amp; ドロップを許可するかどうか
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.DragItem">
      <summary v="2APWtc" i="0">
当前子の项
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ExpandedKeys">
      <summary v="4d5ThB" i="0">
(制御) 指定されたツリーノードを拡張します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ExpandOnClickNode">
      <summary v="1DJafz" i="0">
[TreeNodeTitle] をクリックしてノードを展開または折りたたむ
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IconExpression">
      <summary v="37B3eq" i="0">
ノードアイコンを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IndentTemplate">
      <summary v="3FAxcU" i="0">
インデントテンプレート
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.IsLeafExpression">
      <summary v="3OYLNx" i="0">
式がリーフノードであるかどうかを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.KeyExpression">
      <summary v="3F1pUh" i="0">
ノードのキーを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.MatchedStyle">
      <summary v="3XV05o" i="0">
一致するテキストスタイルを検索する
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Multiple">
      <summary v="2dQlNQ" i="0">
複数のtreeNodesを選択できます
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnCheck">
      <summary v="8TDXd" i="0">
ツリーノードのコールバックを確認しました
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnClick">
      <summary v="3qs9fw" i="0">
ツリーノードのコールバックをクリックします。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnContextMenu">
      <summary v="27GI7h" i="0">
ツリーノードの右クリックコールバック
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDblClick">
      <summary v="uIvkf" i="0">
ノードのコールバックをダブルクリックします。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragEnd">
      <summary v="1L8CiD" i="0">
ドラッグアンドドロップ終了コールバック
</summary>
      <remarks>this callback method must be set</remarks>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragEnter">
      <summary v="2O4Pxh" i="0">
リリース可能なターゲットにドラッグアンドドロップするときに呼び出される
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragLeave">
      <summary v="1dobxG" i="0">
リリース可能なターゲットからドラッグアンドドロップするときに呼び出される
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDragStart">
      <summary v="31ndc9" i="0">
ドラッグ &amp; ドロップが始まると呼び出されます。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnDrop">
      <summary v="1yoUYO" i="0">
ドラッグアンドドロップドロップが成功したときにトリガーされます
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnExpandChanged">
      <summary v="2pqvwr" i="0">
拡張ツリーノードアイコンをクリックしてコールバックします
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.OnNodeLoadDelayAsync">
      <summary v="3A2c9f" i="0">
怠惰なロードコールバック
</summary>
      <remarks>You must use async and the return type is Task, otherwise you may experience load lag and display problems</remarks>
    </member>
    <member name="P:AntDesign.Tree`1.SearchValue">
      <summary v="3gNRzP" i="0">
検索値
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.Selectable">
      <summary v="1x7lyW" i="0">
選択できるかどうか
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedData">
      <summary v="2vGOEn" i="0">
@ Bing-SelectedData
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedDatas">
      <summary v="M11OA" i="0">
選択したデータセット
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKey">
      <summary v="3KNPSJ" i="0">
@ Bind-SelectedKey
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKeyChanged">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.SelectedKeys">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.Tree`1.SelectedNode">
      <summary v="1nxXOb" i="0">
@ Bind-SelectedNode
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SelectedNodes">
      <summary v="23S8go" i="0">
選択したノードのコレクション
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowExpand">
      <summary v="T2Gv1" i="0">
ノードの前に拡張アイコンを表示します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowIcon">
      <summary v="33jgCa" i="0">
Show treeNodeアイコン
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowLeafIcon">
      <summary v="32TlPX" i="0">
Cotyledonのアイコンを表示します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.ShowLine">
      <summary v="2Gh5TZ" i="0">
接続ラインを表示します
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SwitcherIcon">
      <summary v="3bRdwq" i="0">
スイッチャーのアイコンタイプの特定
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.SwitcherIconTemplate">
      <summary v="4OLQVz" i="0">
トグルアイコンテンプレートのカスタマイズ
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleExpression">
      <summary v="17Cqdr" i="0">
ノードのテキストを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleIconTemplate">
      <summary v="2cC9bk" i="0">
アイコンテンプレートのカスタマイズ
</summary>
    </member>
    <member name="P:AntDesign.Tree`1.TitleTemplate">
      <summary v="a0sZ5" i="0">
ヘッダーテンプレートのカスタマイズ
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.DropBelow">
      <summary v="34DM5g" i="0">
ドラッグノードを兄弟 (下) またはターゲットノードの子としてドロップするかどうか。
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.OriginalEvent">
      <summary v="15L2Au" i="0">
原生事
</summary>
    </member>
    <member name="P:AntDesign.TreeEventArgs`1.TargetNode">
      <summary v="1F0Y2X" i="0">
目标の节约
</summary>
    </member>
    <member name="P:AntDesign.TreeIndent`1.SelfNode">
      <summary v="4bZ677" i="0">
現在のノード
</summary>
    </member>
    <member name="P:AntDesign.TreeIndent`1.TreeComponent">
      <summary v="1uvHBZ" i="0">
ルートツリー
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Checked">
      <summary v="1ZPUcx" i="0">
TreeNodeをチェックするかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DisableCheckbox">
      <summary v="2pFfjr" i="0">
チェックボックスを無効にする
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Disabled">
      <summary v="2mtrZP" i="0">
無効状態は親ノードの対象となります。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DragTarget">
      <summary v="2I6Teb" i="0">
ターゲットを解放するかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.DragTargetBottom">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.Expanded">
      <summary v="1dJKzH" i="0">
ノードを展開するかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.HasChildMatched">
      <summary v="2XEPG2" i="0">
子节なりに存在する足なりにします。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.HasChildNodes">
      <summary v="4es4zi" i="0">
子ノードが存在するかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Icon">
      <summary v="f80m3" i="0">
ノードの前のアイコン
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.IsLastNode">
      <summary v="4cJ424" i="0">
同じレベルのノードの最後のノードかどうかを判断します。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.IsLeaf">
      <summary v="3cKGhc" i="0">
リーフノードかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Key">
      <summary v="25YQXT" i="0">
現在のノードの一意の識別子名を指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Loading">
      <summary v="3cafGE" i="0">
ロード状態が非同期かどうか (拡張アイコンの表示に影響します)
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Matched">
      <summary v="sRjSt" i="0">
Title SearchValue (searchValue)
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.NodeIndex">
      <summary v="40g1H9" i="0">
親ノードの子ノードリストにインデックスを記録します。
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Nodes">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.ParentNode">
      <summary v="3xV3Wk" i="0">
一级の节约
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.RealDisplay">
      <summary v="1jnI3j" i="0">
実際の拡張状態は、パス上に拡張されたノードがある限り、下のすべての折り目
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.Selected">
      <summary v="3XEjb8" i="0">
選択したかどうか
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.SwitcherClose">
      <summary v="iICRj" i="0">
スイッチャーが近い
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.SwitcherOpen">
      <summary v="TpcNo" i="0">
スイッチャーが開かれる
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.TargetContainer">
      <summary v="0000" i="0" />
    </member>
    <member name="P:AntDesign.TreeNode`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树本 (树本)
</summary>
    </member>
    <member name="P:AntDesign.TreeNode`1.TreeLevel">
      <summary v="1c26WG" i="0">
現在のノードレベル
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeCheckbox`1.SelfNode">
      <summary v="4bZ677" i="0">
現在のノード
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeCheckbox`1.TreeComponent">
      <summary v="1uvHBZ" i="0">
ルートツリー
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherClose">
      <summary v="3ur2B7" i="0">
节関闭形态
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherOpen">
      <summary v="2iaKt5" i="0">
节形
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.SelfNode">
      <summary v="zQzEv" i="0">
节约点
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeSwitcher`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树本 (树本)
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeTitle`1.SelfNode">
      <summary v="zQzEv" i="0">
节约点
</summary>
    </member>
    <member name="P:AntDesign.TreeNodeTitle`1.TreeComponent">
      <summary v="4SG0pP" i="0">
树本 (树本)
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.CheckableExpression">
      <summary v="rEuK6" i="0">
チェック可能なノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ChildrenExpression">
      <summary v="1a94kF" i="0">
子ノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.DisabledExpression">
      <summary v="4QpUNh" i="0">
無効なノードを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ExpandedKeys">
      <summary v="4d5ThB" i="0">
(制御) 指定されたツリーノードを拡張します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.IconExpression">
      <summary v="37B3eq" i="0">
ノードアイコンを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.IsLeafExpression">
      <summary v="3OYLNx" i="0">
式がリーフノードであるかどうかを返すメソッドを指定します。
</summary>) == args.Node.Key).FirstOrDefault();
        </member>
    <member name="P:AntDesign.TreeSelect`2.KeyExpression">
      <summary v="3F1pUh" i="0">
ノードのキーを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ShowCheckedStrategy">
      <summary v="3JoB00" i="0">
TreeCheckableがtrue、TreeCheckStrictlyがfalseの場合、チェックされた値を表示する方法を指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.ShowIcon">
      <summary v="33jgCa" i="0">
Show treeNodeアイコン
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TitleExpression">
      <summary v="17Cqdr" i="0">
ノードのテキストを返すメソッドを指定します。
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TitleIconTemplate">
      <summary v="2cC9bk" i="0">
アイコンテンプレートのカスタマイズ
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TreeCheckStrictly">
      <summary v="42UEkh" i="0">
TreeNodeを正確にチェックします。親treeNodeと子treeNodeは関連付けられていません
</summary>
    </member>
    <member name="P:AntDesign.TreeSelect`2.TreeComponent">
      <summary v="4SG0pP" i="0">
树本 (树本)
</summary>
    </member>
    <member name="T:AntDesign.Alert">
      <summary v="lrPn5" i="0">
フィードバックのための警告コンポーネント。
</summary>
    </member>
    <member name="T:AntDesign.AntInputComponentBase`1">
      <summary v="4IyV3t" i="0">
オプションでサポートする任意の入力コントロールの基本クラス<see cref="P:AntDesign.AntInputComponentBase`1.EditContext" />を参照してください。
参照: https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs
</summary>
      <typeparam name="TValue" v="KpCZe" i="0">入力値の自然な型</typeparam>
    </member>
    <member name="T:AntDesign.Badge">
      <summary v="2Rq7Zo" i="0">
UI要素の小さな数値またはステータス记述子。
</summary>
    </member>
    <member name="T:AntDesign.BadgeRibbon">
      <summary v="2Rq7Zo" i="0">
UI要素の小さな数値またはステータス记述子。
</summary>
    </member>
    <member name="T:AntDesign.BreadcrumbOption">
      <summary v="3CaXYE" i="0">
現在使用されていません。 将来の開発のために計画されています。
</summary>
    </member>
    <member name="T:AntDesign.ButtonProps">
      <summary v="1jRKjS" i="0">
ボタン小道具
</summary>
    </member>
    <member name="T:AntDesign.CloseEventArgs`1">
      <summary v="qxMDq" i="0">
条件付きで終了イベントをブロックするために使用できます
</summary>
      <typeparam name="T" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Color">
      <summary v="1eFGx0" i="0">
Antデザインカラー: https:// ant.de sign/docs/spec/colors
</summary>
    </member>
    <member name="T:AntDesign.Confirm">
      <summary v="3MOCfz" i="0">
DOTは直接確認を使用しません、
ModalServiceまたはConfirmServiceを使用してConfirmダイアログを作成してください
</summary>
    </member>
    <member name="T:AntDesign.ConfirmButtonOptions">
      <summary v="29ac0n" i="0">
Config the confirmボタンのプロパティ
</summary>
    </member>
    <member name="T:AntDesign.ConfirmButtons">
      <summary v="4A7aQN" i="0">
フッターボタンの種類を確認
</summary>
    </member>
    <member name="T:AntDesign.ConfirmIcon">
      <summary v="4btyuR" i="0">
アイコンタイプの確認
</summary>
    </member>
    <member name="T:AntDesign.ConfirmLocale">
      <summary v="1p1KyL" i="0">
ダイアログロケールの確認
</summary>
    </member>
    <member name="T:AntDesign.ConfirmOptions">
      <summary v="1kUbEo" i="0">
ダイアログオプションの確認
</summary>
    </member>
    <member name="T:AntDesign.ConfirmRef">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ConfirmRef`1">
      <summary v="30SDzd" i="0">
戻り値を持つConfirmRef
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ConfirmResult">
      <summary v="1E9RxE" i="0">
確認ボタンをクリックした
</summary>
    </member>
    <member name="T:AntDesign.ConfirmService">
      <summary v="4bavRW" i="0">
WindowsのMessageBoxのようなシンプルなConfirmダイアログを表示します。ModalServiceとは異なります。 ModalServiceはOK-Cancel Confirmダイアログを作成してConfirm Refを返すだけですが、ConfirmServiceはConfirmの結果を返します。
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCode`1">
      <summary v="2QfH9f" i="0">
2つのパラメータ値のハッシュ比較を提供します。
</summary>
      <typeparam name="TParameter" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeExtensions">
      <summary v="25Bj9r" i="0">
コンポーネントパラメータとその他の関数のHashCode計算を提供する
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider">
      <summary v="4U8Dt8" i="0">
HashCodeプロバイダー
<para>HashCodeのパラメータ値を計算するために使用されます</para><para>コレクションタイプは、各要素のHashCodeを計算します。
他の型は、オブジェクトのデフォルトのGetHashCodeメソッドによって発生した値を単に返します。
</para><para>リフレクション性能を考慮するために、複雑なモデルはその属性のHashCodeを分解して計算しないため、モデルはGetHashCodeメソッドをそれ自体で書き直すことをお勧めします。</para></summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.DictionaryHashCodeProvider">
      <summary v="ogIOV" i="0">
辞書タイプのハッシュプロバイダー
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.EnumerableHashCodeProvider">
      <summary v="1U8TI8" i="0">
IEnumerable型のハッシュプロバイダー
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.OtherHashCodeProvider">
      <summary v="OKreE" i="0">
他のタイプのハッシュプロバイダー
</summary>
    </member>
    <member name="T:AntDesign.Core.HashCodes.ParameterDescriptor`1">
      <summary v="3IE49e" i="0">
コンポーネントのパラメーター记述子を表します。
</summary>
      <typeparam name="TComponent" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Dialog">
      <summary v="3kcfun" i="0">
ダイアログのみの制御コンポーネントが表示または非表示になり、
DOMツリーから要素が削除されない
</summary>
    </member>
    <member name="T:AntDesign.DialogOptions">
      <summary v="4BPXAm" i="0">
ダイアログのオプション
</summary>
    </member>
    <member name="T:AntDesign.DialogOptionsBase">
      <summary v="342PtQ" i="0">
ModalOptions、ConfirmOptions、DialogOptionsの基本クラス
</summary>
    </member>
    <member name="T:AntDesign.DialogWrapper">
      <summary v="3kvY2G" i="0">
あなた自身のイニシアチブでそれを破壊しない限り、DOMツリーに長い間存在することができるコンポーネント
</summary>
    </member>
    <member name="T:AntDesign.EventUtil">
      <summary v="1Qq0jo" i="0">
イベントによって発生するコンポーネントの再レンダリングをBlazorコンポーネントに回避します (純粋なイベントハンドラ)。
<para>
著者: SteveSandersonMS、から<see href="https://gist.github.com/SteveSandersonMS/8a19d8e992f127bb2d2a315ec6c5a373" />を参照してください。
</para><para>
問題:<seealso href="https://github.com/dotnet/aspnetcore/issues/18919#issuecomment-735969441" />を参照してください。
</para></summary>
    </member>
    <member name="T:AntDesign.FeedbackComponent`1">
      <summary v="1wTQkB" i="0">
フィードバックコンポーネント
</summary>
      <typeparam name="TComponentOptions" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackComponent`2">
      <summary v="1wTQkB" i="0">
フィードバックコンポーネント
</summary>
      <typeparam name="TComponentOptions" v="0000" i="0" />
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackRefBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.FeedbackRefWithOkCancelBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.IFeedbackRef">
      <summary v="4GzNez" i="0">
Open and closeメソッドによるコンポーネント参照
</summary>
    </member>
    <member name="T:AntDesign.Input`1">
      <summary v="1GfhnE" i="0">
入力型コンポーネントの基本クラス。
</summary>
    </member>
    <member name="T:AntDesign.IOkCancelRef">
      <summary v="23dkGA" i="0">
OkおよびCancelメソッドによるコンポーネント参照
</summary>
    </member>
    <member name="T:AntDesign.IOkCancelRef`1">
      <summary v="4VqRkO" i="0">
コンポーネント &lt;&gt; OkおよびCancelメソッドでの参照
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.MessageService">
      <summary v="46UWFn" i="0">
メッセージサービス
</summary>
    </member>
    <member name="T:AntDesign.Modal">
      <summary v="4eCJHq" i="0">
モーダルダイアログ
</summary>
    </member>
    <member name="T:AntDesign.ModalCancelFooter">
      <summary v="3rqwQJ" i="0">
Modal footerコンポーネント
</summary>
    </member>
    <member name="T:AntDesign.ModalFooter">
      <summary v="3rqwQJ" i="0">
Modal footerコンポーネント
</summary>
    </member>
    <member name="T:AntDesign.ModalLocale">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ModalOkFooter">
      <summary v="3rqwQJ" i="0">
Modal footerコンポーネント
</summary>
    </member>
    <member name="T:AntDesign.ModalOptions">
      <summary v="33zzV5" i="0">
モーダルダイアログボックスのオプション
</summary>
    </member>
    <member name="T:AntDesign.ModalRef">
      <summary v="3g66il" i="0">
モーダルインスタンスの参照
</summary>
    </member>
    <member name="T:AntDesign.ModalRef`1">
      <summary v="obMVl" i="0">
戻り値を持つModalRef
</summary>
      <typeparam name="TResult" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.ModalService">
      <summary v="17Ulp2" i="0">
モーダルダイアログを作成して開く
</summary>
    </member>
    <member name="T:AntDesign.NotificationBase">
      <summary v="0000" i="0" />
    </member>
    <member name="T:AntDesign.NotificationGlobalConfig">
      <summary v="1hOMBL" i="0">
AntNotification全要素配置
</summary>
    </member>
    <member name="T:AntDesign.NotificationRef">
      <summary v="1vLyd3" i="0">
通知Ref
</summary>
    </member>
    <member name="T:AntDesign.NotificationService">
      <summary v="SPIyy" i="0">
AntNotificationサービス
</summary>
    </member>
    <member name="T:AntDesign.RangePickerDefaults">
      <summary v="38wVtM" i="0">
PickerValues (各日付) に挿入する値を評価します。
ピッカーは、最初に表示されたときに焦点を当てます)。
</summary>
    </member>
    <member name="T:AntDesign.RerenderStrategy">
      <summary v="2FJ4wP" i="0">
レンダリング戦略
</summary>
    </member>
    <member name="T:AntDesign.ReuseTabs">
      <summary v="2UMBIG" i="0">
アプリケーション内の複数のページコンポーネントの再利用
</summary>
    </member>
    <member name="T:AntDesign.Select.Internal.SelectOptionItem`2">
      <summary v="1X6flt" i="0">
内部で使用されるSelectOptionのデータモデル。
</summary>
      <typeparam name="TItemValue" v="0000" i="0" />
      <typeparam name="TItem" v="0000" i="0" />
    </member>
    <member name="T:AntDesign.Table.Internal.TItemProxy">
      <summary v="2auhJN" i="0">
このクラスは、DispatchProxyによってインターフェイスのインスタンスを作成するために使用されます。
</summary>
    </member>
    <member name="T:AntDesign.TableModels.RowData">
      <summary v="2VK43F" i="0">
行に固有のすべてのデータを保持します。たとえば、行が拡張されているかどうかです。
「」をご参照ください。<see cref="P:AntDesign.TableModels.RowData.TableDataItem" />行ではなくアイテムに固有のすべてのプロパティに対して
</summary>
    </member>
    <member name="T:AntDesign.TableModels.RowData`1">
      <inheritdoc />
    </member>
    <member name="T:AntDesign.TableModels.TableDataItem">
      <summary v="4IsL8v" i="0">
テーブル内のアイテムのプロパティを保持します。
テーブル内の各アイテムに対して一意です (たとえば、アイテムが複数回表示されている場合でも、
1つだけがあります<see cref="T:AntDesign.TableModels.TableDataItem" />)。
したがって、同じアイテムを持つすべての行が一度に選択/選択解除されます。
<br />
行固有のデータについては、<see cref="T:AntDesign.TableModels.RowData" />を参照してください。
</summary>
    </member>
    <member name="T:AntDesign.TableModels.TableDataItem`1">
      <inheritdoc />
    </member>
    <member name="T:AntDesign.TemplateComponentBase`1">
      <summary v="0000" i="0" />
      <typeparam name="TComponentOptions" v="0000" i="0" />
    </member>
  </members>
</doc>