@inject ReuseTabsService ReuseTabsService;
@implements IDisposable

@namespace AntDesign

@foreach (var item in ReuseTabsService.Pages)
{
    <div class="@Class" @key="item.Url" style="@(item.Url== ReuseTabsService.CurrentUrl?"": "display:none;") @Style">
        @item.Body
    </div>
}

@code {
    [CascadingParameter]
    private RouteData RouteData { get; set; }

    [Parameter]
    public bool Reuse { get; set; } = true;

    [Parameter]
    public bool Class { get; set; } = true;

    [Parameter]
    public bool Style { get; set; } = true;

    [Parameter]
    public string ActivedUri { get; set; }

    [Parameter]

    public EventCallback<string> ActivedUriChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ReuseTabsService.Init(Reuse);
        ReuseTabsService.OnStateHasChanged += OnStateHasChanged;
    }

    public void Dispose()
    {
        ReuseTabsService.OnStateHasChanged -= OnStateHasChanged;
    }

    private void OnStateHasChanged()
    {
        StateHasChanged();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue(nameof(RouteData), out RouteData routeData))
        {
            ReuseTabsService.TrySetRouteData(routeData, Reuse);

            if (ActivedUriChanged.HasDelegate)
            {
                ActivedUriChanged.InvokeAsync(ReuseTabsService.CurrentUrl);
            }
        }

        if (parameters.TryGetValue(nameof(ActivedUri), out string activedUri))
        {
            ReuseTabsService.CurrentUrl = activedUri;
        }

        return base.SetParametersAsync(parameters);
    }
}