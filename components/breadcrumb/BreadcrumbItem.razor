@namespace AntDesign
@inherits AntDomComponentBase

<li @ref="Ref">
	@if (Overlay != null)
	{
		<Dropdown Placement="@Placement.Bottom">
			<Unbound>
				<span @ref="context.Current" class="ant-breadcrumb-overlay-link">
					<span class="ant-breadcrumb-link">
						@FormattedChildContent
					</span>
					<Icon Type="down"></Icon>
				</span>
			</Unbound>
			<Overlay>
				@Overlay
			</Overlay>
		</Dropdown>
	}
	else
	{
        <span class="ant-breadcrumb-link" @onclick="@_onClick">
			@FormattedChildContent
		</span>
	}

	@if (BreadCrumb?.Separator != null)
	{
		<span class="ant-breadcrumb-separator">
			@BreadCrumb.Separator
		</span>
	}
</li>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment Overlay { get; set; }

    [Parameter]
    public string Href { get; set; }

    [Parameter]
    public EventCallback<Tuple<MouseEventArgs, BreadcrumbItem>> OnClick { get; set; }

    [CascadingParameter]
    public Breadcrumb BreadCrumb { get; set; }

    private async void _onClick(MouseEventArgs args)
    {
        if(OnClick.HasDelegate){
            await OnClick.InvokeAsync(new Tuple<MouseEventArgs, BreadcrumbItem>(args, this));
        }
    }

    private RenderFragment FormattedChildContent => Href is null 
        ? ChildContent 
        : @<a href="@Href">@ChildContent</a>;
}
