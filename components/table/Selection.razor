@namespace AntDesign
@using AntDesign.TableModels
@using AntDesign.Table

@inherits ColumnBase

@if (IsHeaderTemplate)
{
    Table.Selection = this;

    Context?.AddHeaderColumn(this);
}
else if (IsRowTemplate)
{
    Context?.AddRowColumn(this);

    Table.Selection.RowSelections.Add(this);
}
else
{
    Context?.AddColumn(this);

}

@if (IsHeaderTemplate)
{
    @if (HeaderColSpan == 0)
        return;
    @RenderHeader()
}
else if (IsRowTemplate)
{  
    @if (RowSpan == 0 || ColSpan == 0)
        return;
    @RenderBody(RowData)
}

@code{

    RenderFragment IRenderColumn.RenderPlaceholder()
    {
        return@<td style="padding: 0px; border: 0px; height: 0px;"></td>;
    }

    RenderFragment IRenderColumn.RenderMeasure()
    {
        return@<td style="padding: 0px; border: 0px; height: 0px;"><div style="height: 0px; overflow: hidden;">&nbsp;</div></td>;
    }


    RenderFragment IRenderColumn.RenderColGroup()
    {
        if (Width != null)
        {
            return@<col class="ant-table-selection-col" style="width: @((CssSizeLength)Width); min-width: @((CssSizeLength)Width);">;
        }
        else
        {
            return@<col class="ant-table-selection-col">;
        }
    }
    RenderFragment IRenderColumn.RenderHeader() => RenderHeader();
    RenderFragment RenderHeader()
    {
        return
    @<th class="@HeaderMapper.Class ant-table-selection-column" style="@CalcFixedStyle(true) @HeaderStyle" @key="@Key" colspan="@HeaderColSpan">
        @if (Type == "checkbox")
            {
                <Checkbox Checked="Table.AllSelected" CheckedChanged="(e)=>OnCheckedChange(e,null,true)" Indeterminate="Indeterminate" Disabled="IsHeaderDisabled" />
            }
            </th>
    ;
    }

    RenderFragment IRenderColumn.RenderBody(RowData rowData) => RenderBody(rowData);
    RenderFragment RenderBody(RowData rowData)
    {
        return@<td class="@ClassMapper.Class ant-table-selection-column" style="@CalcFixedStyle() @Style" @key="@Key" rowspan="@RowSpan" colspan="@ColSpan">

		@if (CellRender != null)
		{
			var cellData = new CellData(RowData);
            @CellRender(cellData)
		}
		else if (ChildContent != null)
		{
			@ChildContent
		}
		else
		{
            HandleSelected();

			@if (Type == "checkbox")
			{
				<Checkbox Checked="_selected.Value" Disabled="Disabled" CheckedChange="OnCheckedChange" />
			}
			else if (Type == "radio")
			{
                <Radio Checked="_selected.Value" Disabled="Disabled" CheckedChange="OnCheckedChange" TValue="bool" />
			}
		}
	    </td>;
    }
}