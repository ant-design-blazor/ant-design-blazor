@namespace AntDesign
@using AntDesign.TableModels
@using AntDesign.Table

@inherits ColumnBase

@if (IsHeaderTemplate)
{
    Context?.AddHeaderColumn(this);
}
else if (IsRowTemplate)
{
    Context?.AddRowColumn(this);
}
else
{
    Context?.AddColumn(this);
}

@if (IsHeaderTemplate)
{
    @if (HeaderColSpan == 0)
        return;
    @RenderHeader()
}
else if (IsRowTemplate)
{
    @if (RowSpan == 0 || ColSpan == 0)
        return;
    @RenderBody(RowData)
}

@code
{
    RenderFragment IRenderColumn.RenderPlaceholder()
    {
        return @<td style="padding: 0px; border: 0px; height: 0px;"></td>;
    }

    RenderFragment IRenderColumn.RenderMeasure()
    {
        return @<td style="padding: 0px; border: 0px; height: 0px;"><div style="height: 0px; overflow: hidden;">&nbsp;</div></td>;
    }

    RenderFragment IRenderColumn.RenderColGroup()
    {
        return builder =>
        {
            if (AppendExpandColumn)
            {
                builder.AddContent(1,@<col class="ant-table-expand-icon-col">);
            }

            if (Width != null)
            {
                builder.AddContent(2,@<col style="width: @((CssSizeLength)Width); min-width: @((CssSizeLength)Width);"> );
            }
            else
            {
                builder.AddContent(2,@<col />  );
            }
        };
    }
    RenderFragment IRenderColumn.RenderHeader() => RenderHeader();

    RenderFragment RenderHeader()
    {
        return builder =>
        {
            @if (AppendExpandColumn)
            {
                builder.AddContent(1,@<th class="ant-table-cell ant-table-row-expand-icon-cell"></th>);
            }

	<th class="@ClassMapper.Class" style="@FixedStyle @HeaderStyle" colspan="@HeaderColSpan" rowspan="@(RowSpan > 1 ? RowSpan : false)">
		@if (TitleTemplate != null)
		{
			@TitleTemplate
		}
		else
		{
			@Title
		}
	</th>
}
else if (!IsHeader && RowSpan != 0 && ColSpan != 0)
{
	@if (AppendExpandColumn)
	{
		<td class="ant-table-cell ant-table-row-expand-icon-cell">
			@if (Table.RowExpandable(RowData) && (!Table.TreeMode || !DataItem.HasChildren))
			{
				<button type="button" @onclick="ToggleTreeNode"
			class="ant-table-row-expand-icon @(RowData.Expanded?"ant-table-row-expand-icon-expanded":"ant-table-row-expand-icon-collapsed")"
			aria-label="@(RowData.Expanded?Table.Locale.Collapse:Table.Locale.Expand)"></button>
			}
        </td>
    }

    var title = Context.HeaderColumns.LastOrDefault(x => x.ColIndex <= ColIndex && x.ColIndex + x.HeaderColSpan > ColIndex)?.Title;
    <td class="@ClassMapper.Class" style="@FixedStyle @Style" rowspan="@RowSpan" colspan="@ColSpan" data-label="@title">
		@if (ColIndex == Table.TreeExpandIconColumnIndex && Table.TreeMode)
		{
			<span class="ant-table-row-indent indent-level-@RowData.Level" style="padding-left: @((CssSizeLength)(RowData.Level * Table.IndentSize));"></span>
			@if (DataItem.HasChildren)
			{
				<button type="button" @onclick="ToggleTreeNode" class="ant-table-row-expand-icon @(RowData?.Expanded==true?"ant-table-row-expand-icon-expanded":"ant-table-row-expand-icon-collapsed")" aria-label="@(RowData?.Expanded==true?Table.Locale.Collapse:Table.Locale.Expand)"></button>
			}
			else
			{
				<button type="button" class="ant-table-row-expand-icon ant-table-row-expand-icon-spaced" aria-label="@Table.Locale.Expand"></button>
			}
		}

                @if (CellRender != null)
                {
                    var cellData = new CellData(rowData);
                    @CellRender(cellData)
                }
                else
                {
                    @ChildContent
                }
            </td>);
        };
    }
}