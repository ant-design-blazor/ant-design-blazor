@namespace AntDesign
@inherits AntDomComponentBase
@using AntDesign.TableModels
@using AntDesign.Internal
@using AntDesign.Select
@using AntDesign.Select
@using AntDesign.Core.Component.ResizeObserver

@typeparam TItem

<div class="@_wrapperClassMapper.Class" @ref="Ref">
    <Spin Spinning="Loading">
        @if (!HidePagination && PaginationPosition.Contains("top"))
        {
            if (PaginationTemplate == null)
            {
                <Pagination Size="@(Size == TableSize.Default ? PaginationSize.Default : PaginationSize.Small)"
                            Class="@_paginationClass"
                            Total="_total"
                            PageSize="PageSize"
                            Current="PageIndex"
                            OnChange="HandlePageChange" />
            }
            else
            {
                @PaginationTemplate((PageSize,PageIndex,_total,_paginationClass, EventCallback.Factory.Create<PaginationEventArgs>(this, HandlePageChange)))
            }
        }

        <CascadingValue Value="@this" TValue="ITable" IsFixed>
            <CascadingValue Value=@typeof(TItem) Name="ItemType" IsFixed>
                <CascadingValue Value="@ColumnContext" IsFixed>
                    <CascadingValue Name="IsInitialize" Value="true" IsFixed>
                        @ChildContent(_fieldModel)
                    </CascadingValue>
                    <div class="@ClassMapper.Class" @ref="_tableRef">
                        @if (_groupMode)
                        {
                            <GridRow Wrap="false" Style="padding: 0px 1px;">
                                <GridCol Flex=@("auto")>
                                    <Select 
                                        Mode="multiple"
                                        Size="@(this.Size == TableSize.Default?"large":this.Size == TableSize.Middle?"default":"small")"
                                        Placeholder="Please select columns to group by."
                                        LabelName="@nameof(GroupModel.FieldName)" 
                                        ValueName="@nameof(GroupModel.ColumnIndex)" 
                                        TItem="GroupModel"
                                        DataSource="@this._allGroupModels"
                                        TItemValue="int"
                                        @bind-Values="@this._selectedGroupModelIndexes"
		                                EnableSearch
		                                AllowClear>
                                    </Select>
                                </GridCol>
                                <GridCol Flex=@("none")>
                                    <Button 
                                        Shape="@ButtonShape.Round"
                                        Type="@ButtonType.Primary"
                                        Size="@(this.Size == TableSize.Default?ButtonSize.Large:this.Size== TableSize.Middle? ButtonSize.Default: ButtonSize.Small)"
                                        OnClick="@this.OnApplyGroup"
                                    >
                                    Apply
                                    </Button>
                                </GridCol>
                            </GridRow>
                        }

                        @if (_groupMode)
                        {
                            <GridRow Wrap="false" Style="padding: 0px 1px;">
                                <GridCol Flex=@("auto")>
                                    <Select 
                                        Mode="multiple"
                                        Size="@(this.Size == TableSize.Default?"large":this.Size == TableSize.Middle?"default":"small")"
                                        Placeholder="Please select columns to group by."
                                        LabelName="@nameof(GroupModel.FieldName)" 
                                        ValueName="@nameof(GroupModel.ColumnIndex)" 
                                        TItem="GroupModel"
                                        DataSource="@this._allGroupModels"
                                        TItemValue="int"
		                                @bind-Values="@this._selectedGroupModelIndexes"
		                                EnableSearch
		                                AllowClear>
                                    </Select>
                                </GridCol>
                                <GridCol Flex=@("none")>
                                    <Button 
                                        Shape="@ButtonShape.Round"
                                        Type="@ButtonType.Primary"
                                        Size="@(this.Size == TableSize.Default?ButtonSize.Large:this.Size== TableSize.Middle? ButtonSize.Default: ButtonSize.Small)"
                                        OnClick="@this.OnApplyGroup"
                                    >
                                    Apply
                                    </Button>
                                </GridCol>
                            </GridRow>
                        }

                        @if (TitleTemplate != null || Title != null)
                        {
                            <div class="ant-table-title">
                                @if (TitleTemplate != null)@TitleTemplate else @Title
                            </div>
                        }
                        <div class="ant-table-container">
                            @if (ScrollY != null)
                            {
                                <div class="ant-table-header" style="overflow: hidden;" @ref="_tableHeaderRef">
                                    <table style="@TableLayoutStyle">
                                        @colGroup((this, true))
                                        @header(this)
                                    </table>
                                </div>
                                <div class="ant-table-body" @ref="_tableBodyRef" style="@(ScrollX!=null?" overflow: auto scroll;":"overflow-y: scroll;") max-height: @((CssSizeLength)ScrollY);--scrollbar-width: @((CssSizeLength)_scrollBarWidth);">
                                    <table style="@(ScrollX!=null?$" width: {(CssSizeLength)ScrollX}; min-width: 100%;":"") @TableLayoutStyle">
                                        @colGroup((this, false))
                                        <tbody class="ant-table-tbody">
                                            <tr aria-hidden="true" class="ant-table-measure-row" style="height: 0px; font-size: 0px;">
                                                <CascadingValue Name="IsMeasure" Value="true" IsFixed>
                                                    @ChildContent(_fieldModel)
                                                </CascadingValue>
                                            </tr>
                                            @body(this, _showItems, 0, _dataSourceCache)
                                        </tbody>
                                        @tfoot(this)
                                    </table>
                                </div>
                            }
                            else if (ScrollX != null)
                            {
                                <div class="ant-table-content" @ref="_tableBodyRef" style="overflow: auto hidden; --scrollbar-width: @((CssSizeLength)_scrollBarWidth);">
                                    <table style="width: @((CssSizeLength)ScrollX); min-width: 100%; @TableLayoutStyle;">
                                        @colGroup((this, true))
                                        @header(this)
                                        <tbody class="ant-table-tbody">
                                            <tr aria-hidden="true" class="ant-table-measure-row" style="height: 0px; font-size: 0px;">
                                                <CascadingValue Name="IsMeasure" Value="true" IsFixed>
                                                    @ChildContent(_fieldModel)
                                                </CascadingValue>
                                            </tr>
                                            @body(this, _showItems, 0, _dataSourceCache)
                                        </tbody>
                                        @tfoot(this)
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="ant-table-content">
                                    <table style="@TableLayoutStyle;--scrollbar-width: @((CssSizeLength)_scrollBarWidth);">
                                        @colGroup((this, true))
                                        @header(this)
                                        <tbody class="ant-table-tbody">
                                            @{
                                            if (this._showGroupItems?.Any() == true)
                                            {
                                                @bodyGroup(this, _showGroupItems, 0)
                                            }
                                            else
                                            {
                                                @body(this, _showItems, 0, _dataSourceCache)
                                            }
                                            }
                                        </tbody>
                                        @tfoot(this)
                                    </table>
                                </div>
                            }
                        </div>
                        @if (FooterTemplate != null || Footer != null)
                        {
                            <div class="ant-table-footer">
                                @if (FooterTemplate != null)@FooterTemplate else @Footer
                            </div>
                        }
                    </div>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
        @if (!HidePagination && PaginationPosition.Contains("bottom"))
        {
            if (PaginationTemplate == null)
            {
                <Pagination Size="@(Size == TableSize.Default ? PaginationSize.Default : PaginationSize.Small)"
                            Class="@_paginationClass"
                            Total="_total"
                            PageSize="PageSize"
                            Current="PageIndex"
                            OnChange="HandlePageChange" />
            }
            else
            {
                @PaginationTemplate((PageSize,PageIndex,_total,_paginationClass, EventCallback.Factory.Create<PaginationEventArgs>(this, HandlePageChange)))
            }
        }
    </Spin>
</div>

@if (UseResizeObserver)
{
    <ResizeObserver RefBack="RefBack" OnResize="OnResize" />   
}

@code
{
    RenderFragment<Table<TItem>> header = table =>
    @<Template>
                @{
    @<Template>
       @{
            var headerRowAttributes = table.OnHeaderRow?.Invoke();
        }
        <thead class="ant-table-thead">
            <CascadingValue Name="IsHeader" Value="true" IsFixed>
                <CascadingValue Value="headerRowAttributes" Name="AntDesign.TableRow.RowAttributes">
                    <CascadingValue Value="table._hasFixRight" Name="AntDesign.TableRow.HasFixRight">
                        <CascadingValue Value="table.ScrollY" Name="AntDesign.TableRow.ScrollY">
                            @if (table.HeaderTemplate != null)
                            {
                                @table.HeaderTemplate(_fieldModel)
                            }
                            else
                            {
                                <TableRow>
                                    @table.ChildContent(_fieldModel)
                                </TableRow>
                            }
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </thead>
    </Template>;

    RenderFragment<(Table<TItem> table, bool header)> colGroup = ctx =>
    @<Template>
        @{
            var table = ctx.table;
            var header = ctx.header;
        }
            <colgroup>
                <CascadingValue Name="IsColGroup" Value="true" IsFixed>
                    @table.ChildContent(_fieldModel)
                </CascadingValue>
                @if (table.ScrollY != null && header)
        {
                    <col style="width: @((CssSizeLength)table.ScrollBarWidth); min-width: @((CssSizeLength)table.ScrollBarWidth);" />
        }
            </colgroup>
    </Template>;

    Func<Table<TItem>, IEnumerable<TItem>, int, Dictionary<TItem, RowData<TItem>>, RenderFragment> body = 
            (table, showItems, level, rowDataCache) =>
    @<Template>
        @if (table._total <= 0)
        {
                    <tr class="ant-table-placeholder">
                        <td colspan="@(table.ColumnContext.Columns.Count + (table.ExpandTemplate != null? 1 : 0))" class="ant-table-cell">
                            <Empty Simple />
                        </td>
                    </tr>
        }
        else if (showItems != null && table.ColumnContext.Columns.Count > 0)
        {
    #if NET5_0_OR_GREATER
            if (table.EnableVirtualization && table.ScrollY != null)
            {
                <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="showItems.Select((data, index) => (data, index)).ToList()"
                                                                               ChildContent="table.bodyRow(table, level, rowDataCache)" />
            }
            else
            {
    #endif
                { @*Build will fail without this block*@ }
            <ForeachLoop Items="showItems.Select((data, index) => (data, index))"
                         ChildContent="table.bodyRow(table, level, rowDataCache)" />
    #if NET5_0_OR_GREATER
            }
    #endif
        }
    </Template>;
@<Template>
    @if (table._total <= 0)
    {
                    <tr class="ant-table-placeholder">
                    <td colspan="@(table.ColumnContext.Columns.Count + (table.ExpandTemplate != null? 1 : 0))" class="ant-table-cell">
                                @if (table.ScrollX != null)
                                {
                                    <div class="ant-table-expanded-row-fixed" style="width: @(table._tableWidth)px; position: sticky; left: 0px; overflow: hidden;">
                                       @if (table.EmptyTemplate!=null) @table.EmptyTemplate else { <Empty Simple /> }
                                    </div>
                                }
                                else
                                {
                                     @if (table.EmptyTemplate!=null) @table.EmptyTemplate else { <Empty Simple /> }
                                }
                    </td>
                </tr>
    }
    else if (showItems != null && table.ColumnContext.Columns.Count > 0)
    {
        <h1>Body...</h1>
#if NET5_0_OR_GREATER
        if (table.EnableVirtualization && table.ScrollY != null)
        {
            <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="showItems.Select((data, index) => (data, index)).ToList()"
                                                                           ChildContent="table.bodyRow(table, level, rowDataCache)" />
        }
        else
        {
#endif
            { @*Build will fail without this block*@ }
        <ForeachLoop Items="showItems.Select((data, index) => (data, index))"
                     ChildContent="table.bodyRow(table, level, rowDataCache)" />
#if NET5_0_OR_GREATER
        }
#endif
    }
</Template>;

    Func<Table<TItem>, IEnumerable<GroupData<TItem>>, int, RenderFragment> bodyGroup = 
            (table, showGroupItems, level) =>
@<Template>
    @{
    if (showGroupItems != null && table.ColumnContext.Columns.Count > 0)
    {
        <h1>Body Group...</h1>
#if NET5_0_OR_GREATER
        if (table.EnableVirtualization && table.ScrollY != null)
        {
            <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="showGroupItems.Select((group, index) => (group, index)).ToList()"
                                                                           ChildContent="table.bodyGroupRow(table, level)" />
        }
        else
        {
#endif
            { @*Build will fail without this block*@ }
        <ForeachLoop Items="showGroupItems.Select((group, index) => (group, index))"
                     ChildContent="table.bodyGroupRow(table, level)" />
#if NET5_0_OR_GREATER
        }
#endif
    }
    }
</Template>;

    Func<Table<TItem>, int, IDictionary<TItem, RowData<TItem>>, RenderFragment<(TItem data, int index)>> bodyRow = 
            (table, level, rowDataCache) => tuple =>
    @<Template @key="tuple">
        @{
            int rowIndex;
            if (level == 0) rowIndex = table.PageSize * (table.PageIndex - 1) + tuple.index + 1;
            else rowIndex = tuple.index + 1;
            var data = tuple.data;
            bool selected = table.SelectedRows.Contains(data);
            if (!rowDataCache.ContainsKey(data) || rowDataCache[data] == null)
            {
                var rowData = new RowData<TItem>(rowIndex, table.PageIndex, data)
                {
                    Expanded = table.DefaultExpandAllRows && level < table.DefaultExpandMaxLevel
                };
                rowDataCache[data] = rowData;
            }
            var currentRowData = rowDataCache[data];
            if (!table._allRowDataCache.ContainsKey(data))
            {
                table._allRowDataCache.Add(data, new());
            }
            if (!table._allRowDataCache[data].Contains(currentRowData))
            {
                table._allRowDataCache[data].Add(currentRowData);
            }
            var childrenData = table.TreeChildren(data);
            var hasChildren = childrenData?.Any() == true;
            var childrenRowDataCache = currentRowData.Children;
            currentRowData.Level = level;
            currentRowData.HasChildren = hasChildren;
            currentRowData.RowIndex = rowIndex;
            currentRowData.PageIndex = table.PageIndex;
            currentRowData.SetSelected(selected);

            <TableRowWrapper RowData="currentRowData" RowDataSelectedChanged="table.RowDataSelectedChanged">
                @{
                    var rowAttributes = table.OnRow?.Invoke(currentRowData);
                    if (table.OnRowClick.HasDelegate)
                    {
                        rowAttributes ??= new Dictionary<string, object>();
                        rowAttributes.TryAdd("onclick", ((Action)delegate { table.OnRowClick.InvokeAsync(currentRowData); }));
                    }

                    var rowClassName = table.RowClassName(currentRowData);
                    <CascadingValue Value="true" Name="IsBody" IsFixed>
                        <CascadingValue Value="rowAttributes" Name="AntDesign.TableRow.RowAttributes">
                            <CascadingValue Value="rowClassName" Name="AntDesign.TableRow.RowClassName">
                                <TableRow @key="currentRowData.Data" TItem="TItem">
                                    @table.ChildContent(currentRowData.Data)
                                </TableRow>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                var rowClassName = table.RowClassName(currentRowData);
                <CascadingValue Value="true" Name="IsBody" IsFixed>
                    <CascadingValue Value="rowAttributes" Name="AntDesign.TableRow.RowAttributes">
                        <CascadingValue Value="rowClassName" Name="AntDesign.TableRow.RowClassName">
                            @if (table.RowTemplate != null)
                            {
                                @table.RowTemplate(currentRowData)
                            }
                            else
                            {
                                <TableRow @key="currentRowData.Data">
                                    @table.ChildContent(currentRowData.Data)
                                </TableRow>
                            }
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>

                    @if (currentRowData.HasChildren && currentRowData.Expanded)
                    {
                        @table.body(table, table.SortFilterChildren(childrenData), currentRowData.Level + 1, childrenRowDataCache);
                    }
                    @if (!currentRowData.HasChildren && table.ExpandTemplate != null && table.RowExpandable(currentRowData) && currentRowData.Expanded)
                    {
                        <tr class="ant-table-expanded-row ant-table-expanded-row-level-1 @table.ExpandedRowClassName(currentRowData)"
                            style="@(currentRowData.Expanded?"":"display: none;")">
                            <td colspan="@(table.ColumnContext.Columns.Count+1)" class="ant-table-cell">
                                @table.ExpandTemplate(currentRowData)
                            </td>
                        </tr>
                    }
                }
            </TableRowWrapper>
        }
    </Template>;

    Func<Table<TItem>, int, RenderFragment<(GroupData<TItem> group, int index)>> bodyGroupRow = 
            (table, level) => tuple =>
    @<Template @key="tuple.group.Key">
        @{
            <h1>Body Group Row...</h1>
            var group = tuple.group;
            <tr>
                <td>
                    <span class="ant-table-row-indent indent-level-@level" style="padding-left: @((CssSizeLength)(level * table.IndentSize));"></span>
			        @if (group.Children?.Any() == true)
			        {
				        <button type="button" @onclick:stopPropagation class="ant-table-row-expand-icon @(group.Expanded == true ? "ant-table-row-expand-icon-expanded" : "ant-table-row-expand-icon-collapsed")" aria-label="@(group.Expanded == true ? table.Locale.Collapse : table.Locale.Expand)"></button>
			        }
			        else
			        {
				        <button type="button" class="ant-table-row-expand-icon ant-table-row-expand-icon-spaced" aria-label="@table.Locale.Expand"></button>
			        }
                    @group.Key?.ToString()
                </td>
            </tr>
            @if (group.Children?.Any() == true && group.Expanded)
            {
                <h1>Sub Body Group...</h1>
                table.bodyGroup(table, group.Children, level + 1);
            }
            else
            {
                <h1>Sub Body...</h1>
                table.body(table, table.SortFilterChildren(group.Items), level + 1, group.Cache);
            }
        }
    </Template>;


    RenderFragment<Table<TItem>> tfoot = table =>
    @<Template>
        @if (table._summaryRows?.Any() == true)
        {
                    <CascadingValue Value="true" Name="IsSummary" IsFixed>
                        <tfoot class="ant-table-summary">
                            @foreach (var row in table._summaryRows)
                    {
                                <tr>
                                    @row.ChildContent
                                </tr>
                    }
                        </tfoot>
                    </CascadingValue>
        }
    </Template>;
}
